package generatedtest;

import junit.framework.*;

public class SAT4JUnitTest0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(SAT4JUnitTest0.class);
  }

  public void test1() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var5 = var0.model();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);

  }

  public void test2() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.learns((org.sat4j.minisat.core.Constr)var2);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test3() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.core.VecInt var4 = new org.sat4j.core.VecInt(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.calcReason((-1), (org.sat4j.specs.IVecInt)var4);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setLearnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test5() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var3.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));

  }

  public void test6() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeout(var8);
    org.sat4j.minisat.constraints.cnf.UnitClause var10 = new org.sat4j.minisat.constraints.cnf.UnitClause(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.learn((org.sat4j.minisat.core.Constr)var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);

  }

  public void test7() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.VecInt var4 = new org.sat4j.core.VecInt(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.insertFirst(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test8() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    var1.shrinkTo(var13);
    
    // Checks the contract:  var1.equals(var1)
    assertTrue("Contract failed: var1.equals(var1)", var1.equals(var1));

  }

  public void test10() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.core.ReadOnlyVecInt var10 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.calcReason(1, (org.sat4j.specs.IVecInt)var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test11() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    java.lang.String var18 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f98d58\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f98d58\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9bad5a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var18.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9bad5a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test12() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var5 = var3.get((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test13() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.assertConstraint((org.sat4j.minisat.core.UnitPropagationListener)var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test14() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int[] var22 = new int[] { 0, 100, (-1)};
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var23 = var18.decode(var22);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test15() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var2 = var1.getActivity();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test16() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var7 = var3.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test17() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    java.lang.String var12 = var0.toString(var11);
    org.sat4j.specs.TimeoutException var13 = new org.sat4j.specs.TimeoutException(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c19919\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c19919\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5b28c9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));

  }

  public void test18() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    var20.setTimeoutOnConflicts(var30);
    org.sat4j.tools.ModelIterator var33 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var19, var30);
    boolean var35 = var33.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var36 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var33);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var39 = var38.pop();
    org.sat4j.core.ReadOnlyVecInt var40 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var38);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    boolean var59 = var33.isSatisfiable((org.sat4j.specs.IVecInt)var40, var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var61 = var14.addAtLeast((org.sat4j.specs.IVecInt)var40, 10);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@119db9e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@119db9e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2264da\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2264da\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dafa2c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dafa2c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test19() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    java.lang.String var11 = org.sat4j.minisat.constraints.cnf.Lits.toString(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var0.model(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "-1073741"+ "'", var11.equals("-1073741"));

  }

  public void test20() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    var4.setTimeoutOnConflicts(var14);
    org.sat4j.tools.ModelIterator var17 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var14);
    boolean var19 = var17.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var20 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var17);
    org.sat4j.core.VecInt var22 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var23 = var22.pop();
    org.sat4j.core.ReadOnlyVecInt var24 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var22);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    org.sat4j.tools.ModelIterator var39 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var25, var36);
    boolean var41 = var39.isSatisfiable(true);
    boolean var42 = var39.isVerbose();
    boolean var43 = var17.isSatisfiable((org.sat4j.specs.IVecInt)var24, var42);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var44.expireTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeout(var47);
    org.sat4j.minisat.constraints.cnf.UnitClause var49 = new org.sat4j.minisat.constraints.cnf.UnitClause(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var50 = var0.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var2, (org.sat4j.specs.IVecInt)var24, var47);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12fc02\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12fc02\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1811e2c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1811e2c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);

  }

  public void test21() throws Throwable {

    org.sat4j.minisat.learning.PercentLengthLearning var0 = new org.sat4j.minisat.learning.PercentLengthLearning();

  }

  public void test22() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.core.ReadOnlyVecInt var7 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var5);
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    org.sat4j.minisat.core.Constr var11 = var2.createCardinalityConstraint((org.sat4j.specs.IVecInt)var5, var10);
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    int var14 = var13.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var15 = var5.delete(var14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test23() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    boolean var5 = var0.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var6 = var0.getOrder();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.unset(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test24() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var2 = var1.size();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimpNoRestarts();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var1.propagate((org.sat4j.minisat.core.UnitPropagationListener)var3, 10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test25() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.reader.DimacsReader var5 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IProblem var13 = var5.parseInstance(var12);
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7cb44d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7cb44d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test26() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int[] var21 = new int[] { 1, 10};
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var22 = var18.decode(var21);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test27() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    java.lang.String var12 = var0.toString(var11);
    org.sat4j.core.VecInt var14 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var15 = var14.pop();
    org.sat4j.core.ReadOnlyVecInt var16 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var14);
    org.sat4j.minisat.constraints.cnf.UnitClause var18 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var19 = var16.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var21 = var0.addAtMost((org.sat4j.specs.IVecInt)var16, 10);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@aee320\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@aee320\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e45e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));

  }

  public void test28() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var8 = var2.createClause((org.sat4j.specs.IVecInt)var5);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test29() throws Throwable {

    org.sat4j.specs.ISolver var0 = org.sat4j.minisat.SolverFactory.newLight();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test30() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeap((org.sat4j.minisat.core.DataStructureFactory)var0);
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    java.lang.String var5 = var3.toString();
    org.sat4j.core.VecInt var7 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var8 = var7.pop();
    org.sat4j.core.ReadOnlyVecInt var9 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var7);
    org.sat4j.minisat.constraints.cnf.UnitClause var11 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var12 = var9.indexOf((-1));
    boolean var13 = var3.contains((-1));
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var14.expireTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeout(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var19 = var0.createCardinalityConstraint((org.sat4j.specs.IVecInt)var3, var17);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);

  }

  public void test31() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause(var1);
    var2.incActivity(10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var2.locked();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);

  }

  public void test32() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    int[] var4 = new int[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.moveTo(var4);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test33() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause(var1);
    var2.incActivity(10.0d);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove((org.sat4j.minisat.core.UnitPropagationListener)var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test34() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var47 = var21.delete(var44);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f6f3dc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f6f3dc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@94124f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@94124f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);

  }

  public void test35() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var2 = var1.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var1.getActivity();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test36() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var6 = var5.locked();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);

  }

  public void test37() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    org.sat4j.reader.InstanceReader var1 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var0);
    int[] var2 = new int[] { };
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var3 = var1.decode(var2);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test38() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "positive phase selection"+ "'", var1.equals("positive phase selection"));

  }

  public void test39() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    int var6 = var1.getTimeout();
    var0.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);

  }

  public void test40() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.tools.ConstrGroup var16 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var18 = new org.sat4j.tools.ConstrGroup(true);
    var16.add((org.sat4j.specs.IConstr)var18);
    boolean var20 = var16.learnt();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var14.removeSubsumedConstr((org.sat4j.specs.IConstr)var16);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e20a9a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e20a9a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test41() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.core.VecInt var7 = new org.sat4j.core.VecInt(var6);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test42() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.minisat.core.SolverStats var1 = var0.getStats();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test43() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    boolean var20 = var18.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var21 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var24 = var23.pop();
    org.sat4j.core.ReadOnlyVecInt var25 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var23);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    boolean var43 = var40.isVerbose();
    boolean var44 = var18.isSatisfiable((org.sat4j.specs.IVecInt)var25, var43);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    int var50 = org.sat4j.core.LiteralsUtils.toInternal(var48);
    int var51 = var25.indexOf(var50);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var51);
    org.sat4j.tools.ConstrGroup var54 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var56 = new org.sat4j.tools.ConstrGroup(true);
    var54.add((org.sat4j.specs.IConstr)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var58 = var52.removeSubsumedConstr((org.sat4j.specs.IConstr)var54);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fa1f5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fa1f5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d12d43\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d12d43\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test44() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.reader.DimacsReader var5 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.specs.TimeoutException var7 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var8 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var7);
    org.sat4j.specs.TimeoutException var9 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    java.lang.String var10 = var8.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IProblem var11 = var5.parseInstance(var10);
      fail("Expected exception of type org.sat4j.reader.ParseFormatException");
    } catch (org.sat4j.reader.ParseFormatException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var10.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));

  }

  public void test45() throws Throwable {

    org.sat4j.specs.ContradictionException var0 = new org.sat4j.specs.ContradictionException();

  }

  public void test46() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.core.ReadOnlyVecInt var41 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var21);
    org.sat4j.core.VecInt var43 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var44 = var43.pop();
    org.sat4j.core.ReadOnlyVecInt var45 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var46.expireTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeout(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    java.lang.String var58 = var46.toString(var57);
    boolean var59 = var43.equals((java.lang.Object)var46);
    int var60 = var46.nConstraints();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var41.moveTo(var60, 0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@275b35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@275b35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d13e3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d13e3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@12f8578\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var58.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@12f8578\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6f558a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test47() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    org.sat4j.tools.ConstrGroup var23 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var25 = new org.sat4j.tools.ConstrGroup(true);
    var23.add((org.sat4j.specs.IConstr)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var27 = var21.removeSubsumedConstr((org.sat4j.specs.IConstr)var25);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f7e273\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f7e273\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);

  }

  public void test48() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var26 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var28 = var26.select(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var29 = var7.varActivity(var28);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1535057\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1535057\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 201);

  }

  public void test49() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    boolean var5 = var0.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var6 = var0.getOrder();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    int var11 = org.sat4j.core.LiteralsUtils.toInternal(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var12 = var0.addAtLeast((org.sat4j.specs.IVecInt)var8, var11);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 20);

  }

  public void test50() throws Throwable {

    org.sat4j.tools.ConstrGroup var1 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup(true);
    var1.add((org.sat4j.specs.IConstr)var3);
    var1.clear();

  }

  public void test51() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    var7.setTimeoutMs(0L);
    int var22 = var7.newVar();
    double var23 = var6.varActivity(var22);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var24 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var26 = var24.select(100);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var6.undo(var26);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test52() throws Throwable {

    org.sat4j.minisat.core.Counter var0 = new org.sat4j.minisat.core.Counter();
    var0.inc();

  }

  public void test53() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var28 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var29 = var28.size();
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    org.sat4j.tools.ModelIterator var46 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var32, var43);
    boolean var48 = var46.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var49 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.core.ReadOnlyVecInt var53 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var51);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    org.sat4j.minisat.core.IOrder var60 = var55.getOrder();
    java.lang.String var61 = var55.toString();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    var55.setTimeoutOnConflicts(var65);
    org.sat4j.tools.ModelIterator var68 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var54, var65);
    boolean var70 = var68.isSatisfiable(true);
    boolean var71 = var68.isVerbose();
    boolean var72 = var46.isSatisfiable((org.sat4j.specs.IVecInt)var53, var71);
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    var73.setTimeoutOnConflicts(var76);
    int var78 = org.sat4j.core.LiteralsUtils.toInternal(var76);
    int var79 = var53.indexOf(var78);
    org.sat4j.specs.IVecInt var80 = var26.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var28, (org.sat4j.specs.IVecInt)var31, var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var81 = var0.createClause((org.sat4j.specs.IVecInt)var31);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@219c51\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@219c51\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@164feb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@164feb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@61b29f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var61.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@61b29f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test54() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var2 = var1.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var3 = var1.learnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test55() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var7.expireTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeout(var10);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    org.sat4j.minisat.core.IOrder var17 = var12.getOrder();
    java.lang.String var18 = var12.toString();
    java.lang.String var19 = var7.toString(var18);
    int var20 = var7.nVars();
    org.sat4j.minisat.constraints.ClausalDataStructureCB var21 = new org.sat4j.minisat.constraints.ClausalDataStructureCB();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    org.sat4j.minisat.core.IOrder var27 = var22.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var28 = new org.sat4j.minisat.orders.RandomWalkDecorator(var27);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    var29.setTimeoutMs(0L);
    int var44 = var29.newVar();
    double var45 = var28.varActivity(var44);
    org.sat4j.specs.IVec var46 = var21.getWatchesFor(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.moveTo(var20, var44);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var18.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f6d156\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f6d156\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e85a35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe8884\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe8884\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test56() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.assignLiteral(var9);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      int var11 = var6.select();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test57() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var8 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var7);
    org.sat4j.reader.LecteurDimacs var9 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var7);
    int var10 = var7.nVars();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var6.updateVar(var10);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test58() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    int var18 = org.sat4j.core.LiteralsUtils.posLit(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var19 = var3.get(var15);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a5aff\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a5aff\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4294966);

  }

  public void test59() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.onRestart();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test60() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var22 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var19);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    org.sat4j.core.ReadOnlyVecInt var26 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var24);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    org.sat4j.tools.ModelIterator var41 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var27, var38);
    boolean var43 = var41.isSatisfiable(true);
    boolean var44 = var41.isVerbose();
    boolean var45 = var19.isSatisfiable((org.sat4j.specs.IVecInt)var26, var44);
    org.sat4j.core.ReadOnlyVecInt var46 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.moveTo2((org.sat4j.specs.IVecInt)var46);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1bfee\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1bfee\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@87281f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@87281f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test61() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var36 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var37 = var36.size();
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    var41.setTimeoutOnConflicts(var51);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var40, var51);
    boolean var56 = var54.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var57 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var54);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var60 = var59.pop();
    org.sat4j.core.ReadOnlyVecInt var61 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var59);
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    org.sat4j.minisat.core.IOrder var68 = var63.getOrder();
    java.lang.String var69 = var63.toString();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeoutOnConflicts(var73);
    var63.setTimeoutOnConflicts(var73);
    org.sat4j.tools.ModelIterator var76 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var62, var73);
    boolean var78 = var76.isSatisfiable(true);
    boolean var79 = var76.isVerbose();
    boolean var80 = var54.isSatisfiable((org.sat4j.specs.IVecInt)var61, var79);
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    var81.setTimeoutOnConflicts(var84);
    int var86 = org.sat4j.core.LiteralsUtils.toInternal(var84);
    int var87 = var61.indexOf(var86);
    org.sat4j.specs.IVecInt var88 = var34.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var36, (org.sat4j.specs.IVecInt)var39, var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.shrinkTo(var87);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10a08e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10a08e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@693a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@693a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@84c5ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@84c5ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1891732\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var69.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1891732\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);

  }

  public void test62() throws Throwable {

    int[] var3 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var4 = new org.sat4j.core.VecInt(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeout(var8);
    var4.ensure(var8);
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var13 = var12.pop();
    org.sat4j.core.ReadOnlyVecInt var14 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var12);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var15.expireTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeout(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    java.lang.String var27 = var15.toString(var26);
    boolean var28 = var12.equals((java.lang.Object)var15);
    int var29 = var15.nConstraints();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    int var32 = var15.newVar(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var33 = var4.delete(var31);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@188a478\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var27.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@188a478\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19efe65\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);

  }

  public void test63() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    java.lang.String var41 = var21.toString();
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var42 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var42.updateVar(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var49 = var21.get(var46);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19318fa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19318fa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c6a6fd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c6a6fd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);

  }

  public void test64() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.DefaultComparator var34 = new org.sat4j.core.DefaultComparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.sortUnique((java.util.Comparator)var34);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6ca32e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6ca32e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14c2fa5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14c2fa5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test65() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    java.lang.String var41 = var21.toString();
    org.sat4j.core.VecInt var43 = new org.sat4j.core.VecInt(100);
    int var44 = var43.size();
    java.lang.String var45 = var43.toString();
    org.sat4j.core.VecInt var47 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var48 = var47.pop();
    org.sat4j.core.ReadOnlyVecInt var49 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var47);
    org.sat4j.minisat.constraints.cnf.UnitClause var51 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var52 = var49.indexOf((-1));
    boolean var53 = var43.contains((-1));
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    int var59 = org.sat4j.core.LiteralsUtils.toInternal(var57);
    int var60 = var43.indexOf(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var61 = var21.unsafeGet(var57);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6e6874\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6e6874\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1556234\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1556234\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));

  }

  public void test66() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    int var3 = var0.nVars();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    java.lang.String var16 = var4.toString(var15);
    int var17 = var4.nVars();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.unset(var17);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@129dda\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@129dda\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@afd9e3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test67() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var2 = var1.model();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test68() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    int[] var5 = new int[] { 10, (-1), (-1)};
    var1.moveTo(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test69() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.core.ReadOnlyVecInt var5 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var3);
    java.lang.String var6 = var3.toString();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    int var12 = org.sat4j.core.LiteralsUtils.toInternal(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var13 = var1.addAtMost((org.sat4j.specs.IVecInt)var3, var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4294966);

  }

  public void test70() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.discard();
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@76da32\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@76da32\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test71() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var5 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var4);
    org.sat4j.reader.LecteurDimacs var6 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var4);
    org.sat4j.tools.SolutionCounter var7 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var4);
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    int var20 = var4.newVar((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.forceObjectiveValueTo((java.lang.Number)var20);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));

  }

  public void test72() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    java.lang.String var41 = var21.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var42 = var21.toArray();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10b3611\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10b3611\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c52e72\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c52e72\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));

  }

  public void test73() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var2 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    var4.setTimeoutOnConflicts(var14);
    org.sat4j.tools.ModelIterator var17 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var14);
    var3.setTimeoutOnConflicts(0);
    var2.updateVar(0);
    var0.setTimeout(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d5b144\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d5b144\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);

  }

  public void test74() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var34.expireTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeout(var37);
    boolean var39 = var34.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var40 = var34.getOrder();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    var41.setTimeoutOnConflicts(0);
    var34.setExpectedNumberOfClauses(0);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var59 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.constraints.cnf.UnitClause var61 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    var59.init((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.moveTo(0, (-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7f9d70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7f9d70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4e62cc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4e62cc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4c535d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4c535d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);

  }

  public void test75() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      int var7 = var6.select();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test76() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.insertFirst((java.lang.Object)(byte)0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1488344\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1488344\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1155331\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1155331\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1372bdb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1372bdb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ab52f7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ab52f7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test77() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    long var1 = var0.getTimeoutMs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483647L);

  }

  public void test78() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.constraints.cnf.UnitClause var3 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var4 = var3.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.learn((org.sat4j.minisat.core.Constr)var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test79() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.constraints.cnf.UnitClauses var4 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var3);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test80() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var6 = var5.getActivity();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);

  }

  public void test81() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var6.init();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test82() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    int[] var80 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var81 = new org.sat4j.core.VecInt(var80);
    org.sat4j.minisat.core.Solver var82 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var82.expireTimeout();
    org.sat4j.minisat.core.Solver var84 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var85 = var84.getTimeout();
    var82.setTimeout(var85);
    var81.ensure(var85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.shrinkTo(var85);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@47fdc3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@47fdc3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1854518\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1854518\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14ec310\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14ec310\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a15291\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a15291\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2147483);

  }

  public void test83() throws Throwable {

    org.sat4j.minisat.learning.NoLearningButHeuristics var0 = new org.sat4j.minisat.learning.NoLearningButHeuristics();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var3 = new org.sat4j.minisat.constraints.cnf.UnitClause(var2);
    var3.incActivity(10.0d);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.learns((org.sat4j.minisat.core.Constr)var3);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test84() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    var0.setTimeoutOnConflicts(var10);
    var0.setTimeoutMs(0L);
    int var15 = var0.newVar();
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var35 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var32);
    org.sat4j.core.VecInt var37 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var38 = var37.pop();
    org.sat4j.core.ReadOnlyVecInt var39 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var37);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    var41.setTimeoutOnConflicts(var51);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var40, var51);
    boolean var56 = var54.isSatisfiable(true);
    boolean var57 = var54.isVerbose();
    boolean var58 = var32.isSatisfiable((org.sat4j.specs.IVecInt)var39, var57);
    boolean var59 = var39.isEmpty();
    int var61 = org.sat4j.core.LiteralsUtils.toInternal(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var62 = var0.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var17, (org.sat4j.specs.IVecInt)var39, 10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c0e8aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c0e8aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@811340\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@811340\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@746d6d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@746d6d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 20);

  }

  public void test85() throws Throwable {

    org.sat4j.tools.xplain.QuickXplainStrategy var0 = new org.sat4j.tools.xplain.QuickXplainStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var2 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var1);
    org.sat4j.reader.LecteurDimacs var3 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var1);
    org.sat4j.opt.MaxSatDecorator var4 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var1);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    var31.sort();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    int var39 = org.sat4j.core.LiteralsUtils.toInternal(var37);
    org.sat4j.specs.IVecInt var40 = var31.push(var39);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      org.sat4j.specs.IVecInt var41 = var0.explain((org.sat4j.specs.ISolver)var4, var29, var40);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test86() throws Throwable {

    org.sat4j.tools.ConstrGroup var1 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup(true);
    var1.add((org.sat4j.specs.IConstr)var3);
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var7 = var6.pop();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var14 = new org.sat4j.minisat.orders.RandomWalkDecorator(var13);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    org.sat4j.minisat.core.IOrder var20 = var15.getOrder();
    java.lang.String var21 = var15.toString();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    var15.setTimeoutOnConflicts(var25);
    var15.setTimeoutMs(0L);
    int var30 = var15.newVar();
    double var31 = var14.varActivity(var30);
    int var32 = var6.indexOf(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var33 = var1.get(var32);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c3951e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var21.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c3951e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));

  }

  public void test87() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14);
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    var20.setTimeoutOnConflicts(var30);
    org.sat4j.tools.ModelIterator var33 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var19, var30);
    boolean var35 = var33.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var36 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var33);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var39 = var38.pop();
    org.sat4j.core.ReadOnlyVecInt var40 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var38);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    boolean var59 = var33.isSatisfiable((org.sat4j.specs.IVecInt)var40, var58);
    java.lang.String var60 = var40.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var61 = var18.addBlockingClause((org.sat4j.specs.IVecInt)var40);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@93f455\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@93f455\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d1aa70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d1aa70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d1f3c3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d1f3c3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));

  }

  public void test88() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var9 = new org.sat4j.minisat.orders.RandomWalkDecorator(var8);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    var10.setTimeoutMs(0L);
    int var25 = var10.newVar();
    double var26 = var9.varActivity(var25);
    int var27 = var1.indexOf(var25);
    org.sat4j.core.VecInt var29 = new org.sat4j.core.VecInt(100);
    int var30 = var29.size();
    var29.sort();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    int var37 = org.sat4j.core.LiteralsUtils.toInternal(var35);
    org.sat4j.specs.IVecInt var38 = var29.push(var37);
    org.sat4j.core.Vec var40 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    org.sat4j.reader.InstanceReader var59 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var55);
    int var60 = var55.nConstraints();
    var40.ensure(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.moveTo(var37, var60);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f846df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f846df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@441fdb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@441fdb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test89() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b206f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b206f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d5934d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d5934d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test90() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ConstrGroup var4 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var6 = new org.sat4j.tools.ConstrGroup(true);
    var4.add((org.sat4j.specs.IConstr)var6);
    boolean var8 = var4.learnt();
    var2.setVerbosity(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test91() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    var30.start();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    int var37 = var32.nVars();
    org.sat4j.minisat.orders.PureOrder var38 = new org.sat4j.minisat.orders.PureOrder(var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.backtracking(var37);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ed1e7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ed1e7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test92() throws Throwable {

    org.sat4j.specs.ISolver var0 = org.sat4j.minisat.SolverFactory.newMinOneSolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test93() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14);
    java.lang.String var19 = var14.getLogPrefix();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e8d9a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e8d9a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "c "+ "'", var19.equals("c "));

  }

  public void test94() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    int[] var7 = new int[] { 10, 1, 100};
    int[] var9 = new int[] { 0};
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var10.expireTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeout(var13);
    org.sat4j.reader.DimacsReader var15 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var10);
    int[] var17 = new int[] { (-1)};
    java.lang.String var18 = var15.decode(var17);
    int[][] var19 = new int[][] { var17};
    org.sat4j.core.VecInt var21 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var22 = var21.pop();
    org.sat4j.core.ReadOnlyVecInt var23 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var21);
    org.sat4j.minisat.constraints.cnf.UnitClause var25 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var26 = var23.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.ISolver var27 = var3.parseInstance(var7, var9, var19, var26);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "-1 0"+ "'", var18.equals("-1 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test95() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var35 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var36 = var35.size();
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var56 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var53);
    org.sat4j.core.VecInt var58 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var59 = var58.pop();
    org.sat4j.core.ReadOnlyVecInt var60 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var58);
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    org.sat4j.minisat.core.IOrder var67 = var62.getOrder();
    java.lang.String var68 = var62.toString();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeoutOnConflicts(var72);
    var62.setTimeoutOnConflicts(var72);
    org.sat4j.tools.ModelIterator var75 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var61, var72);
    boolean var77 = var75.isSatisfiable(true);
    boolean var78 = var75.isVerbose();
    boolean var79 = var53.isSatisfiable((org.sat4j.specs.IVecInt)var60, var78);
    org.sat4j.minisat.core.Solver var80 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var81 = var80.getTimeout();
    org.sat4j.minisat.core.Solver var82 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var83 = var82.getTimeout();
    var80.setTimeoutOnConflicts(var83);
    int var85 = org.sat4j.core.LiteralsUtils.toInternal(var83);
    int var86 = var60.indexOf(var85);
    org.sat4j.specs.IVecInt var87 = var33.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var35, (org.sat4j.specs.IVecInt)var38, var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var88 = var1.delete(var86);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1242aae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1242aae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c66162\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c66162\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1be645d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1be645d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e600bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var68.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e600bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test96() throws Throwable {

    org.sat4j.tools.xplain.QuickXplainStrategy var0 = new org.sat4j.tools.xplain.QuickXplainStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(100);
    int var18 = var17.size();
    var15.setTimeoutOnConflicts(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapRsatExpSimpLuby();
    org.sat4j.minisat.core.SolverStats var21 = var20.getStats();
    java.util.Map var22 = var21.toMap();
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var26 = var0.explain((org.sat4j.specs.ISolver)var15, var22, var25);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12190b1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12190b1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test97() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    int[] var18 = var14.model();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var19.expireTimeout();
    org.sat4j.core.VecInt var22 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var23 = var22.pop();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    org.sat4j.minisat.core.IOrder var30 = var25.getOrder();
    java.lang.String var31 = var25.toString();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    var25.setTimeoutOnConflicts(var35);
    org.sat4j.tools.ModelIterator var38 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var24, var35);
    boolean var40 = var38.isSatisfiable(true);
    boolean var41 = var38.isVerbose();
    boolean var42 = var19.isSatisfiable((org.sat4j.specs.IVecInt)var22, var41);
    var14.setVerbose(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@111d38e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@111d38e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f78ba5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var31.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f78ba5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test98() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.SearchParams var34 = new org.sat4j.minisat.core.SearchParams();
    int var36 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var34.setInitConflictBound(10);
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    org.sat4j.minisat.core.IOrder var43 = var38.getOrder();
    java.lang.String var44 = var38.toString();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    var38.setTimeoutOnConflicts(var48);
    var38.setTimeoutMs(0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.set(10, (java.lang.Object)var38);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ca84f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ca84f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15dd2f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15dd2f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19dc8dd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var44.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19dc8dd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);

  }

  public void test99() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var3 = var2.size();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    boolean var22 = var20.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var23 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var20);
    org.sat4j.core.VecInt var25 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var26 = var25.pop();
    org.sat4j.core.ReadOnlyVecInt var27 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var25);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    org.sat4j.tools.ModelIterator var42 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var28, var39);
    boolean var44 = var42.isSatisfiable(true);
    boolean var45 = var42.isVerbose();
    boolean var46 = var20.isSatisfiable((org.sat4j.specs.IVecInt)var27, var45);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    int var52 = org.sat4j.core.LiteralsUtils.toInternal(var50);
    int var53 = var27.indexOf(var52);
    org.sat4j.specs.IVecInt var54 = var0.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var2, (org.sat4j.specs.IVecInt)var5, var53);
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var55.expireTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeout(var58);
    org.sat4j.minisat.constraints.cnf.UnitClause var60 = new org.sat4j.minisat.constraints.cnf.UnitClause(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var61 = var2.get(var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@392c27\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@392c27\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d1a6b3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d1a6b3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);

  }

  public void test100() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newGreedySolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test101() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.specs.ISolver var22 = var14.clearDecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ef8774\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ef8774\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test102() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    var0.setTimeoutMs(100L);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test103() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    int var26 = var25.newVar();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1138a28\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1138a28\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);

  }

  public void test104() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    int[] var2 = var1.findModel();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    var4.setTimeoutOnConflicts(var14);
    org.sat4j.tools.ModelIterator var17 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var14);
    boolean var19 = var17.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var20 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var17);
    org.sat4j.core.VecInt var22 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var23 = var22.pop();
    org.sat4j.core.ReadOnlyVecInt var24 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var22);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    org.sat4j.tools.ModelIterator var39 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var25, var36);
    boolean var41 = var39.isSatisfiable(true);
    boolean var42 = var39.isVerbose();
    boolean var43 = var17.isSatisfiable((org.sat4j.specs.IVecInt)var24, var42);
    org.sat4j.core.ReadOnlyVecInt var44 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var45 = var1.addClause((org.sat4j.specs.IVecInt)var44);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a742a1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a742a1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12fe0c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12fe0c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test105() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.minisat.core.SearchParams var33 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    int var36 = var35.size();
    var33.setInitConflictBound(var36);
    var3.setExpectedNumberOfClauses(var36);
    org.sat4j.core.VecInt var40 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var41 = var40.pop();
    org.sat4j.core.ReadOnlyVecInt var42 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var40);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var43.expireTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeout(var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    java.lang.String var55 = var43.toString(var54);
    boolean var56 = var40.equals((java.lang.Object)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var57 = var3.addBlockingClause((org.sat4j.specs.IVecInt)var40);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1eefc33\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1eefc33\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@c4a6d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var55.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@c4a6d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6305aa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test106() throws Throwable {

    org.sat4j.minisat.learning.MiniSATLearning var0 = new org.sat4j.minisat.learning.MiniSATLearning();
    java.lang.String var1 = var0.toString();
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var5 = new org.sat4j.tools.ConstrGroup(true);
    var3.add((org.sat4j.specs.IConstr)var5);
    boolean var7 = var3.learnt();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeout(var11);
    org.sat4j.minisat.constraints.cnf.UnitClause var13 = new org.sat4j.minisat.constraints.cnf.UnitClause(var11);
    var3.add((org.sat4j.specs.IConstr)var13);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.learns((org.sat4j.minisat.core.Constr)var13);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test107() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.tools.SingleSolutionDetector var7 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    int var13 = org.sat4j.core.LiteralsUtils.toInternal(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var7.hasASingleSolution();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1469d08\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1469d08\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4294966);

  }

  public void test108() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    var34.setTimeoutOnConflicts(var44);
    org.sat4j.tools.ModelIterator var47 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var33, var44);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    org.sat4j.minisat.core.IOrder var54 = var49.getOrder();
    java.lang.String var55 = var49.toString();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeoutOnConflicts(var59);
    var49.setTimeoutOnConflicts(var59);
    org.sat4j.tools.ModelIterator var62 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var48, var59);
    boolean var64 = var62.isSatisfiable(true);
    boolean var65 = var62.isVerbose();
    org.sat4j.reader.InstanceReader var66 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var62);
    int var67 = var62.nConstraints();
    int[] var68 = var62.model();
    org.sat4j.tools.SolutionCounter var69 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var62);
    org.sat4j.core.VecInt var71 = new org.sat4j.core.VecInt(100);
    int[] var72 = var69.findModel((org.sat4j.specs.IVecInt)var71);
    int[] var73 = var33.findModel((org.sat4j.specs.IVecInt)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var3.admitABetterSolution((org.sat4j.specs.IVecInt)var71);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13ad3f4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13ad3f4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c73236\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c73236\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cb55c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var55.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cb55c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);

  }

  public void test109() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    int var61 = org.sat4j.core.LiteralsUtils.posLit(var58);
    int var62 = org.sat4j.core.LiteralsUtils.var(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var21.delete(var62);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d68561\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d68561\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@112951d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@112951d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cc9f86\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cc9f86\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);

  }

  public void test110() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    org.sat4j.minisat.core.IOrder var21 = var16.getOrder();
    java.lang.String var22 = var16.toString();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    var16.setTimeoutOnConflicts(var26);
    org.sat4j.tools.ModelIterator var29 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15, var26);
    boolean var31 = var29.isSatisfiable(true);
    boolean var32 = var29.isVerbose();
    org.sat4j.reader.InstanceReader var33 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var29);
    int var34 = var29.nConstraints();
    int[] var35 = var29.model();
    org.sat4j.tools.SolutionCounter var36 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var29);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    int[] var39 = var36.findModel((org.sat4j.specs.IVecInt)var38);
    int[] var40 = var0.findModel((org.sat4j.specs.IVecInt)var38);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    int var43 = var42.size();
    java.lang.String var44 = var42.toString();
    org.sat4j.core.VecInt var46 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var47 = var46.pop();
    org.sat4j.core.ReadOnlyVecInt var48 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var46);
    org.sat4j.minisat.constraints.cnf.UnitClause var50 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var51 = var48.indexOf((-1));
    boolean var52 = var42.contains((-1));
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var42.indexOf(var56);
    org.sat4j.tools.ModelIterator var60 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4ee4c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4ee4c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@61e285\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@61e285\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));

  }

  public void test111() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    boolean var20 = var18.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var21 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var24 = var23.pop();
    org.sat4j.core.ReadOnlyVecInt var25 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var23);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    boolean var43 = var40.isVerbose();
    boolean var44 = var18.isSatisfiable((org.sat4j.specs.IVecInt)var25, var43);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    int var50 = org.sat4j.core.LiteralsUtils.toInternal(var48);
    int var51 = var25.indexOf(var50);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var51);
    boolean var53 = var0.isDBSimplificationAllowed();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@68b764\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@68b764\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8c63e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8c63e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test112() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    boolean var17 = var15.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var18 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var15);
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var21 = var20.pop();
    org.sat4j.core.ReadOnlyVecInt var22 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var20);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    org.sat4j.minisat.core.IOrder var29 = var24.getOrder();
    java.lang.String var30 = var24.toString();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    var24.setTimeoutOnConflicts(var34);
    org.sat4j.tools.ModelIterator var37 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var23, var34);
    boolean var39 = var37.isSatisfiable(true);
    boolean var40 = var37.isVerbose();
    boolean var41 = var15.isSatisfiable((org.sat4j.specs.IVecInt)var22, var40);
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    int var47 = org.sat4j.core.LiteralsUtils.toInternal(var45);
    int var48 = var22.indexOf(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.varBumpActivity(var47);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8d5581\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8d5581\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b6b0e1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var30.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b6b0e1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));

  }

  public void test113() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    var34.setTimeoutOnConflicts(var44);
    org.sat4j.tools.ModelIterator var47 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var33, var44);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    boolean var50 = var47.isSatisfiable((org.sat4j.specs.IVecInt)var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.remove((java.lang.Object)var49);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19c47d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19c47d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9dee92\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9dee92\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bd9ca9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bd9ca9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test114() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a28d31\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a28d31\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4aaca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4aaca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test115() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    int[] var7 = new int[] { 10, (-1), 0};
    java.lang.String var8 = var3.decode(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "10 -1 0 0"+ "'", var8.equals("10 -1 0 0"));

  }

  public void test116() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.Vec var34 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    org.sat4j.reader.InstanceReader var53 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var49);
    int var54 = var49.nConstraints();
    var34.ensure(var54);
    org.sat4j.core.VecInt var57 = new org.sat4j.core.VecInt(100);
    int var58 = var57.size();
    java.lang.String var59 = var57.toString();
    org.sat4j.core.VecInt var61 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var62 = var61.pop();
    org.sat4j.core.ReadOnlyVecInt var63 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var61);
    org.sat4j.minisat.constraints.cnf.UnitClause var65 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var66 = var63.indexOf((-1));
    boolean var67 = var57.contains((-1));
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    int var73 = org.sat4j.core.LiteralsUtils.toInternal(var71);
    int var74 = var57.indexOf(var71);
    boolean var75 = var57.isEmpty();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var76 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var79 = var78.getTimeout();
    org.sat4j.minisat.core.Solver var80 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var81 = var80.getTimeout();
    var78.setTimeoutOnConflicts(var81);
    org.sat4j.minisat.core.IOrder var83 = var78.getOrder();
    java.lang.String var84 = var78.toString();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    org.sat4j.minisat.core.Solver var87 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var88 = var87.getTimeout();
    var85.setTimeoutOnConflicts(var88);
    var78.setTimeoutOnConflicts(var88);
    org.sat4j.tools.ModelIterator var91 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var77, var88);
    var77.setTimeoutOnConflicts(0);
    var76.updateVar(0);
    var57.shrinkTo(0);
    var34.shrink(0);
    var1.insertFirstWithShifting((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a68a10\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a68a10\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b94cfb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b94cfb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13ec894\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13ec894\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e43eb8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var84.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e43eb8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2147483);

  }

  public void test117() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var3.sort();
    int[] var6 = var3.toArray();
    int[] var7 = var0.findModel((org.sat4j.specs.IVecInt)var3);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.learning.PercentLengthLearning var13 = new org.sat4j.minisat.learning.PercentLengthLearning(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.remove(var11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);

  }

  public void test118() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    boolean var17 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    org.sat4j.minisat.core.IOrder var23 = var18.getOrder();
    java.lang.String var24 = var18.toString();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    var18.setTimeoutOnConflicts(var28);
    int var31 = org.sat4j.core.LiteralsUtils.posLit(var28);
    int var32 = org.sat4j.core.LiteralsUtils.var(var31);
    org.sat4j.core.VecInt var34 = new org.sat4j.core.VecInt(100);
    int var35 = var34.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.moveTo(var32, var35);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@258792\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@258792\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11d72a0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var24.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11d72a0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test119() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isDBSimplificationAllowed();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cb546b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cb546b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test120() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.setTimeoutOnConflicts(var17);
    int[] var19 = var14.findModel();
    org.sat4j.core.VecInt var21 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var22 = var21.pop();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    int var47 = var21.indexOf(var45);
    int[] var48 = var21.toArray();
    boolean var49 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21);
    var21.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@107cce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@107cce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ca5165\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ca5165\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test121() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    org.sat4j.core.DefaultComparator var77 = new org.sat4j.core.DefaultComparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.sortUnique((java.util.Comparator)var77);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@30e7b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@30e7b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f967c8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f967c8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a404a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a404a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4406b8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4406b8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);

  }

  public void test122() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var33 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    var34.setTimeoutOnConflicts(0);
    var33.updateVar(0);
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var53 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var52);
    org.sat4j.reader.LecteurDimacs var54 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var52);
    org.sat4j.opt.MaxSatDecorator var55 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var52);
    org.sat4j.core.VecInt var57 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var58 = var57.pop();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    var59.setTimeoutOnConflicts(var62);
    org.sat4j.minisat.core.IOrder var64 = var59.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var65 = new org.sat4j.minisat.orders.RandomWalkDecorator(var64);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    org.sat4j.minisat.core.IOrder var71 = var66.getOrder();
    java.lang.String var72 = var66.toString();
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    var73.setTimeoutOnConflicts(var76);
    var66.setTimeoutOnConflicts(var76);
    var66.setTimeoutMs(0L);
    int var81 = var66.newVar();
    double var82 = var65.varActivity(var81);
    int var83 = var57.indexOf(var81);
    var55.setExpectedNumberOfClauses(var81);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var85 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var87 = var85.select(100);
    var33.init(var81, var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var89 = var1.delete(var87);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1facee6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1facee6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10c9d49\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10c9d49\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19662a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19662a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1624af1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var72.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1624af1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 201);

  }

  public void test123() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    var34.setTimeoutOnConflicts(0);
    int var43 = org.sat4j.core.LiteralsUtils.posLit(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.remove((java.lang.Object)0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1be7915\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1be7915\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1125a42\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1125a42\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16a599f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16a599f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test124() throws Throwable {

    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var0 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(100);
    int var18 = var17.size();
    var15.setTimeoutOnConflicts(var18);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.updateVar(var18);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test125() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    int var9 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var10 = new org.sat4j.minisat.learning.PercentLengthLearning(var9);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var11.expireTimeout();
    var10.setSolver(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f71719\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f71719\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test126() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    org.sat4j.tools.ModelIterator var42 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var28, var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var43 = var17.unsafeGet(var39);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@194f2e8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@194f2e8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);

  }

  public void test127() throws Throwable {

    org.sat4j.tools.ConstrGroup var1 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup(true);
    var1.add((org.sat4j.specs.IConstr)var3);
    boolean var5 = var1.learnt();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimpLongRestarts();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeFrom((org.sat4j.specs.ISolver)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test128() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.clear();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@148f152\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@148f152\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@166092f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@166092f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19fa017\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19fa017\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9c4e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9c4e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);

  }

  public void test129() throws Throwable {

    org.sat4j.minisat.restarts.NoRestarts var0 = new org.sat4j.minisat.restarts.NoRestarts();
    var0.onRestart();

  }

  public void test130() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    var6.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test131() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var7 = var3.toArray();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test132() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    int var2 = var1.size();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.reader.LecteurDimacs var5 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.ExtendedDimacsArrayReader var6 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var3);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var18);
    boolean var23 = var21.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var24 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var21);
    org.sat4j.core.VecInt var26 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var27 = var26.pop();
    org.sat4j.core.ReadOnlyVecInt var28 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var26);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    boolean var45 = var43.isSatisfiable(true);
    boolean var46 = var43.isVerbose();
    boolean var47 = var21.isSatisfiable((org.sat4j.specs.IVecInt)var28, var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    int var53 = org.sat4j.core.LiteralsUtils.toInternal(var51);
    int var54 = var28.indexOf(var53);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var54);
    int var56 = org.sat4j.core.LiteralsUtils.neg(var54);
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    org.sat4j.minisat.core.IOrder var62 = var57.getOrder();
    java.lang.String var63 = var57.toString();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    var57.setTimeoutOnConflicts(var67);
    int var70 = org.sat4j.core.LiteralsUtils.posLit(var67);
    int var71 = org.sat4j.core.LiteralsUtils.var(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set(var56, var71);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14f279c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14f279c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@123abc8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@123abc8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@140bcb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var63.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@140bcb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);

  }

  public void test133() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    var26.setTimeoutOnConflicts(0);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var52 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var49);
    org.sat4j.core.VecInt var54 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var55 = var54.pop();
    org.sat4j.core.ReadOnlyVecInt var56 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var54);
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    java.lang.String var64 = var58.toString();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    var58.setTimeoutOnConflicts(var68);
    org.sat4j.tools.ModelIterator var71 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var57, var68);
    boolean var73 = var71.isSatisfiable(true);
    boolean var74 = var71.isVerbose();
    boolean var75 = var49.isSatisfiable((org.sat4j.specs.IVecInt)var56, var74);
    boolean var76 = var56.isEmpty();
    org.sat4j.core.VecInt var78 = new org.sat4j.core.VecInt(100);
    int var79 = var78.size();
    java.lang.String var80 = var78.toString();
    org.sat4j.core.VecInt var82 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var83 = var82.pop();
    org.sat4j.core.ReadOnlyVecInt var84 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var82);
    org.sat4j.minisat.constraints.cnf.UnitClause var86 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var87 = var84.indexOf((-1));
    boolean var88 = var78.contains((-1));
    org.sat4j.specs.IConstr var89 = var26.addAtLeast((org.sat4j.specs.IVecInt)var56, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var90 = var0.createClause((org.sat4j.specs.IVecInt)var56);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe13e1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe13e1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4595a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4595a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5af153\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5af153\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@74beea\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var64.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@74beea\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);

  }

  public void test134() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.specs.IVecInt var2 = var0.unsatExplanation();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test135() throws Throwable {

    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    boolean var17 = var15.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var18 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var15);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15);
    org.sat4j.core.Vec var20 = new org.sat4j.core.Vec(10, (java.lang.Object)var19);
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.reader.LecteurDimacs var23 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var21);
    org.sat4j.tools.ExtendedDimacsArrayReader var24 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var21);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    org.sat4j.tools.ModelIterator var39 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var25, var36);
    boolean var41 = var39.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var42 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var39);
    org.sat4j.core.VecInt var44 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var45 = var44.pop();
    org.sat4j.core.ReadOnlyVecInt var46 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var44);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    org.sat4j.tools.ModelIterator var61 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var47, var58);
    boolean var63 = var61.isSatisfiable(true);
    boolean var64 = var61.isVerbose();
    boolean var65 = var39.isSatisfiable((org.sat4j.specs.IVecInt)var46, var64);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    int var71 = org.sat4j.core.LiteralsUtils.toInternal(var69);
    int var72 = var46.indexOf(var71);
    org.sat4j.tools.ModelIterator var73 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var21, var72);
    org.sat4j.minisat.learning.PercentLengthLearning var74 = new org.sat4j.minisat.learning.PercentLengthLearning(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var75 = var20.delete(var72);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@677c0a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@677c0a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@141c2c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@141c2c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a84a4f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a84a4f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));

  }

  public void test136() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    var3.setDBSimplificationAllowed(false);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.Number var6 = var3.calculateObjective();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test137() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var51 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var48);
    org.sat4j.core.VecInt var53 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var54 = var53.pop();
    org.sat4j.core.ReadOnlyVecInt var55 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var53);
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    org.sat4j.minisat.core.IOrder var62 = var57.getOrder();
    java.lang.String var63 = var57.toString();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    var57.setTimeoutOnConflicts(var67);
    org.sat4j.tools.ModelIterator var70 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var56, var67);
    boolean var72 = var70.isSatisfiable(true);
    boolean var73 = var70.isVerbose();
    boolean var74 = var48.isSatisfiable((org.sat4j.specs.IVecInt)var55, var73);
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    var75.setTimeoutOnConflicts(var78);
    int var80 = org.sat4j.core.LiteralsUtils.toInternal(var78);
    int var81 = var55.indexOf(var80);
    org.sat4j.core.VecInt var83 = new org.sat4j.core.VecInt(100);
    int var84 = var83.size();
    int var85 = var55.get(var84);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var86 = var33.model(var85);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test138() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.tools.SingleSolutionDetector var7 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ConstrGroup var8 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var9 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var9.setSolver(var10);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var12.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var14 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var12.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var14);
    var9.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var12);
    var8.removeFrom((org.sat4j.specs.ISolver)var12);
    org.sat4j.minisat.restarts.MiniSATRestarts var18 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var19 = var18.toString();
    var12.setLogPrefix(var19);
    org.sat4j.tools.DecisionTracing var21 = new org.sat4j.tools.DecisionTracing(var19);
    var21.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var24 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var25 = var24.size();
    var24.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    boolean var45 = var43.isSatisfiable(true);
    boolean var46 = var43.isVerbose();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    org.sat4j.tools.ModelIterator var61 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var47, var58);
    boolean var63 = var61.isSatisfiable(true);
    boolean var64 = var61.isVerbose();
    org.sat4j.reader.InstanceReader var65 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var61);
    int var66 = var61.nConstraints();
    boolean var67 = var61.isVerbose();
    boolean var68 = var61.isDBSimplificationAllowed();
    int var69 = var43.nextFreeVarId(var68);
    var21.conflictFound((org.sat4j.specs.IConstr)var24, (-1), var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var71 = var7.model((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@efbfe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@efbfe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "MiniSAT restarts strategy"+ "'", var19.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b5b4d1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b5b4d1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d69ffc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d69ffc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);

  }

  public void test139() throws Throwable {

    org.sat4j.minisat.learning.ClauseOnlyLearning var0 = new org.sat4j.minisat.learning.ClauseOnlyLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var4 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var5 = var4.size();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var7 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    int var24 = var8.nVars();
    org.sat4j.specs.IVecInt var25 = var1.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var4, var7, var24);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.learns((org.sat4j.minisat.core.Constr)var4);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test140() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var7 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.SearchParams var8 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    int var11 = var10.size();
    var8.setInitConflictBound(var11);
    var8.setClaDecay(1.0d);
    var7.incActivity(1.0d);
    org.sat4j.minisat.core.Pair var16 = new org.sat4j.minisat.core.Pair();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze((org.sat4j.minisat.core.Constr)var7, var16);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test141() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.constraints.ClausalDataStructureCB var28 = new org.sat4j.minisat.constraints.ClausalDataStructureCB();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var35 = new org.sat4j.minisat.orders.RandomWalkDecorator(var34);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    var36.setTimeoutMs(0L);
    int var51 = var36.newVar();
    double var52 = var35.varActivity(var51);
    org.sat4j.specs.IVec var53 = var28.getWatchesFor(var51);
    org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(100);
    int var56 = var55.size();
    var55.sort();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    int var63 = org.sat4j.core.LiteralsUtils.toInternal(var61);
    org.sat4j.specs.IVecInt var64 = var55.push(var63);
    org.sat4j.minisat.core.Constr var65 = var28.createUnregisteredClause((org.sat4j.specs.IVecInt)var55);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    int var71 = var66.nVars();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var72 = var0.createCardinalityConstraint((org.sat4j.specs.IVecInt)var55, var71);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e43476\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e43476\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test142() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var1 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var2.expireTimeout();
    var1.setLearner((org.sat4j.minisat.core.Learner)var2);
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    int var7 = var6.size();
    var6.sort();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    int var11 = var10.size();
    java.lang.String var12 = var10.toString();
    org.sat4j.core.VecInt var14 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var15 = var14.pop();
    org.sat4j.core.ReadOnlyVecInt var16 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var14);
    org.sat4j.minisat.constraints.cnf.UnitClause var18 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var19 = var16.indexOf((-1));
    boolean var20 = var10.contains((-1));
    var6.pushAll((org.sat4j.specs.IVecInt)var10);
    boolean var22 = var2.isSatisfiable((org.sat4j.specs.IVecInt)var6);
    org.sat4j.minisat.constraints.cnf.UnitClauses var23 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var24 = var0.createClause((org.sat4j.specs.IVecInt)var6);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test143() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    java.lang.String var9 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Limit learning to clauses of size smaller or equal to 3"+ "'", var9.equals("Limit learning to clauses of size smaller or equal to 3"));

  }

  public void test144() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.tools.ModelIterator var2 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0);
    org.sat4j.specs.ISolver var3 = var2.clearDecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test145() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    java.lang.String var7 = var6.toString();
    java.lang.String var8 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"+ "'", var7.equals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"+ "'", var8.equals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"));

  }

  public void test146() throws Throwable {

    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    boolean var17 = var15.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var18 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var15);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15);
    org.sat4j.core.Vec var20 = new org.sat4j.core.Vec(10, (java.lang.Object)var19);
    org.sat4j.core.DefaultComparator var21 = new org.sat4j.core.DefaultComparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.sortUnique((java.util.Comparator)var21);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ddbced\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ddbced\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test147() throws Throwable {

    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    boolean var17 = var15.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var18 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var15);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15);
    org.sat4j.core.Vec var20 = new org.sat4j.core.Vec(10, (java.lang.Object)var19);
    int[] var21 = var19.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f4c74f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f4c74f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);

  }

  public void test148() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = org.sat4j.Messages.getString(var4);
    org.sat4j.specs.TimeoutException var6 = new org.sat4j.specs.TimeoutException(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "!!"+ "'", var5.equals("!!"));

  }

  public void test149() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapRsatExpSimpBiere();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test150() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    int[] var63 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var64 = new org.sat4j.core.VecInt(var63);
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var65.expireTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeout(var68);
    var64.ensure(var68);
    org.sat4j.specs.IConstr[] var71 = var11.and(var58, (org.sat4j.specs.IVecInt)var64);
    org.sat4j.specs.ISolver var72 = var11.decorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ce83d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ce83d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6061e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6061e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test151() throws Throwable {

    double[] var2 = new double[] { 1.0d, (-1.0d)};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var3.getmin();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test152() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    int var51 = var21.get(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var52 = var21.toArray();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ac5a9a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ac5a9a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1698c89\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1698c89\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test153() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.specs.IVecInt var15 = var14.unsatExplanation();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    org.sat4j.minisat.core.IOrder var22 = var17.getOrder();
    java.lang.String var23 = var17.toString();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    var17.setTimeoutOnConflicts(var27);
    org.sat4j.tools.ModelIterator var30 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var16, var27);
    boolean var32 = var30.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var33 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var30);
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var36 = var35.pop();
    org.sat4j.core.ReadOnlyVecInt var37 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var35);
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    org.sat4j.minisat.core.IOrder var44 = var39.getOrder();
    java.lang.String var45 = var39.toString();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    var39.setTimeoutOnConflicts(var49);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var38, var49);
    boolean var54 = var52.isSatisfiable(true);
    boolean var55 = var52.isVerbose();
    boolean var56 = var30.isSatisfiable((org.sat4j.specs.IVecInt)var37, var55);
    java.lang.String var57 = var37.toString();
    int[] var58 = var14.findModel((org.sat4j.specs.IVecInt)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c12ee7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c12ee7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16da888\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var23.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16da888\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4db0e4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var45.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4db0e4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);

  }

  public void test154() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    int var39 = var34.nVars();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = var33.get(var39);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16ba4ef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16ba4ef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17cf6e4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17cf6e4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test155() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.setTimeoutOnConflicts(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var19 = var14.model();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19918ca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19918ca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test156() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var14 = new org.sat4j.minisat.learning.PercentLengthLearning(var13);
    var3.assignLiteral(var13);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var3.init();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test157() throws Throwable {

    org.sat4j.minisat.orders.RSATPhaseSelectionStrategy var0 = new org.sat4j.minisat.orders.RSATPhaseSelectionStrategy();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "lightweight component caching from RSAT"+ "'", var1.equals("lightweight component caching from RSAT"));

  }

  public void test158() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = var1.last();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var15 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var14);
    org.sat4j.reader.LecteurDimacs var16 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var14);
    org.sat4j.opt.MaxSatDecorator var17 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var27 = new org.sat4j.minisat.orders.RandomWalkDecorator(var26);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    var28.setTimeoutMs(0L);
    int var43 = var28.newVar();
    double var44 = var27.varActivity(var43);
    int var45 = var19.indexOf(var43);
    var17.setExpectedNumberOfClauses(var43);
    org.sat4j.minisat.core.SearchParams var47 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    var47.setInitConflictBound(var50);
    var17.setExpectedNumberOfClauses(var50);
    var13.assuming(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b9b34\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b9b34\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test160() throws Throwable {

    org.sat4j.tools.ConstrGroup var1 = new org.sat4j.tools.ConstrGroup(true);
    double var2 = var1.getActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);

  }

  public void test161() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.core.VecInt var29 = new org.sat4j.core.VecInt(100);
    int var30 = var29.size();
    java.lang.String var31 = var29.toString();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.core.ReadOnlyVecInt var35 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var33);
    org.sat4j.minisat.constraints.cnf.UnitClause var37 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var38 = var35.indexOf((-1));
    boolean var39 = var29.contains((-1));
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    int var45 = org.sat4j.core.LiteralsUtils.toInternal(var43);
    int var46 = var29.indexOf(var43);
    boolean var47 = var29.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var48 = var0.createClause((org.sat4j.specs.IVecInt)var29);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test162() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureCBWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureCBWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    int[] var5 = var2.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var6 = var0.createClause((org.sat4j.specs.IVecInt)var2);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test163() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newGlucose();
    var0.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test164() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    org.sat4j.minisat.core.IOrder var21 = var16.getOrder();
    java.lang.String var22 = var16.toString();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    var16.setTimeoutOnConflicts(var26);
    org.sat4j.tools.ModelIterator var29 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15, var26);
    boolean var31 = var29.isSatisfiable(true);
    boolean var32 = var29.isVerbose();
    org.sat4j.reader.InstanceReader var33 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var29);
    int var34 = var29.nConstraints();
    int[] var35 = var29.model();
    org.sat4j.tools.SolutionCounter var36 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var29);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    int[] var39 = var36.findModel((org.sat4j.specs.IVecInt)var38);
    int[] var40 = var0.findModel((org.sat4j.specs.IVecInt)var38);
    org.sat4j.minisat.learning.FixedLengthLearning var41 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var41.setSolver(var42);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var44.expireTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeout(var47);
    var41.setSolver(var44);
    org.sat4j.specs.IVecInt var50 = var44.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var51 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var44);
    org.sat4j.tools.GateTranslator var52 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var44);
    org.sat4j.specs.SearchListener var53 = var52.getSearchListener();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var59 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var61 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var62 = var61.pop();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    org.sat4j.minisat.core.IOrder var68 = var63.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var69 = new org.sat4j.minisat.orders.RandomWalkDecorator(var68);
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeoutOnConflicts(var73);
    org.sat4j.minisat.core.IOrder var75 = var70.getOrder();
    java.lang.String var76 = var70.toString();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    var77.setTimeoutOnConflicts(var80);
    var70.setTimeoutOnConflicts(var80);
    var70.setTimeoutMs(0L);
    int var85 = var70.newVar();
    double var86 = var69.varActivity(var85);
    int var87 = var61.indexOf(var85);
    var59.assignLiteral(var87);
    org.sat4j.minisat.core.Solver var89 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var90 = var89.getTimeout();
    org.sat4j.minisat.core.Solver var91 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var92 = var91.getTimeout();
    var89.setTimeoutOnConflicts(var92);
    int var94 = org.sat4j.core.LiteralsUtils.toInternal(var92);
    var52.halfAdderSum(var57, var87, var92);
    var38.shrink(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b652b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b652b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1083fe3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1083fe3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a7b933\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var76.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a7b933\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 4294966);

  }

  public void test165() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.reader.InstanceReader var12 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var11);
    org.sat4j.tools.ConstrGroup var14 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var16 = new org.sat4j.tools.ConstrGroup(true);
    var14.add((org.sat4j.specs.IConstr)var16);
    boolean var18 = var14.learnt();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var11.removeConstr((org.sat4j.specs.IConstr)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test166() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var8.sort();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    int var16 = org.sat4j.core.LiteralsUtils.toInternal(var14);
    org.sat4j.specs.IVecInt var17 = var8.push(var16);
    boolean var18 = var3.contains(var16);
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var22 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var23 = var22.size();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    var26.setTimeoutMs(0L);
    int var41 = var26.newVar();
    int var42 = var26.nVars();
    org.sat4j.specs.IVecInt var43 = var19.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var22, var25, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.shrink(var42);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a995c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a995c5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);

  }

  public void test167() throws Throwable {

    org.sat4j.tools.xplain.ReplayXplainStrategy var0 = new org.sat4j.tools.xplain.ReplayXplainStrategy();
    var0.cancelExplanationComputation();

  }

  public void test168() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    java.lang.String var27 = var21.toString();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    var21.setTimeoutOnConflicts(var31);
    org.sat4j.tools.ModelIterator var34 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var20, var31);
    boolean var36 = var34.isSatisfiable(true);
    boolean var37 = var34.isVerbose();
    org.sat4j.reader.InstanceReader var38 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var34);
    int var39 = var34.nConstraints();
    int[] var40 = var34.model();
    org.sat4j.tools.SolutionCounter var41 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var34);
    org.sat4j.core.VecInt var43 = new org.sat4j.core.VecInt(100);
    int[] var44 = var41.findModel((org.sat4j.specs.IVecInt)var43);
    int[] var45 = var5.findModel((org.sat4j.specs.IVecInt)var43);
    boolean var46 = var4.isSatisfiable((org.sat4j.specs.IVecInt)var43);
    org.sat4j.core.VecInt var48 = new org.sat4j.core.VecInt(100);
    int var49 = var48.size();
    var48.sort();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = org.sat4j.core.LiteralsUtils.toInternal(var54);
    org.sat4j.specs.IVecInt var57 = var48.push(var56);
    var43.copyTo((org.sat4j.specs.IVecInt)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a0a87\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a0a87\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e31cd5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var27.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e31cd5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);

  }

  public void test169() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    var25.expireTimeout();
    org.sat4j.minisat.core.DataStructureFactory var27 = var25.getDSFactory();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bae047\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bae047\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test170() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    int var9 = var4.nVars();
    org.sat4j.minisat.orders.PureOrder var10 = new org.sat4j.minisat.orders.PureOrder(var9);
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    int var13 = var12.size();
    var10.assignLiteral(var13);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var10);
    org.sat4j.tools.ConstrGroup var16 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var17 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var17.setSolver(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var20.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var22 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var20.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var22);
    var17.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var20);
    var16.removeFrom((org.sat4j.specs.ISolver)var20);
    org.sat4j.minisat.restarts.MiniSATRestarts var26 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var27 = var26.toString();
    var20.setLogPrefix(var27);
    org.sat4j.tools.DecisionTracing var29 = new org.sat4j.tools.DecisionTracing(var27);
    var29.beginLoop();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    int var36 = var31.getTimeout();
    var29.backtracking(var36);
    var29.solutionFound();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var41 = new org.sat4j.minisat.constraints.cnf.UnitClause(var40);
    var29.assuming(var40);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var45 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var46 = var45.size();
    org.sat4j.core.VecInt var48 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    org.sat4j.minisat.core.IOrder var55 = var50.getOrder();
    java.lang.String var56 = var50.toString();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    var50.setTimeoutOnConflicts(var60);
    org.sat4j.tools.ModelIterator var63 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var49, var60);
    boolean var65 = var63.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var66 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var63);
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var69 = var68.pop();
    org.sat4j.core.ReadOnlyVecInt var70 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var68);
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeoutOnConflicts(var75);
    org.sat4j.minisat.core.IOrder var77 = var72.getOrder();
    java.lang.String var78 = var72.toString();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    var79.setTimeoutOnConflicts(var82);
    var72.setTimeoutOnConflicts(var82);
    org.sat4j.tools.ModelIterator var85 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var71, var82);
    boolean var87 = var85.isSatisfiable(true);
    boolean var88 = var85.isVerbose();
    boolean var89 = var63.isSatisfiable((org.sat4j.specs.IVecInt)var70, var88);
    org.sat4j.minisat.core.Solver var90 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var91 = var90.getTimeout();
    org.sat4j.minisat.core.Solver var92 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var93 = var92.getTimeout();
    var90.setTimeoutOnConflicts(var93);
    int var95 = org.sat4j.core.LiteralsUtils.toInternal(var93);
    int var96 = var70.indexOf(var95);
    org.sat4j.specs.IVecInt var97 = var43.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var45, (org.sat4j.specs.IVecInt)var48, var96);
    var0.conflictDetectedInWatchesFor(var40, var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "MiniSAT restarts strategy"+ "'", var27.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cbbfa1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var56.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cbbfa1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e604\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var78.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e604\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);

  }

  public void test171() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    java.lang.Number var34 = var3.getObjectiveValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@144c1a4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@144c1a4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 0+ "'", var34.equals(0));

  }

  public void test172() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    long var30 = var5.getTimeoutMs();
    var4.setTimeoutMs(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19ba46f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19ba46f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483647L);

  }

  public void test173() throws Throwable {

    org.sat4j.core.Vec var0 = new org.sat4j.core.Vec();

  }

  public void test174() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    int var31 = var26.getTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.updateVar(var31);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15c91ad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15c91ad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);

  }

  public void test175() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    boolean var20 = var18.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var21 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var24 = var23.pop();
    org.sat4j.core.ReadOnlyVecInt var25 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var23);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    boolean var43 = var40.isVerbose();
    boolean var44 = var18.isSatisfiable((org.sat4j.specs.IVecInt)var25, var43);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    int var50 = org.sat4j.core.LiteralsUtils.toInternal(var48);
    int var51 = var25.indexOf(var50);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var51);
    java.lang.String var53 = var52.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1de7e39\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1de7e39\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1543ada\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1543ada\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fa88e6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var53.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fa88e6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test176() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielHT var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielHT();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var3 = var2.pop();
    org.sat4j.core.ReadOnlyVecInt var4 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.constraints.cnf.UnitClause var6 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var7 = var4.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var8 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test177() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    int var2 = var1.size();
    var1.sort();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    java.lang.String var7 = var5.toString();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var10 = var9.pop();
    org.sat4j.core.ReadOnlyVecInt var11 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var9);
    org.sat4j.minisat.constraints.cnf.UnitClause var13 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var14 = var11.indexOf((-1));
    boolean var15 = var5.contains((-1));
    var1.pushAll((org.sat4j.specs.IVecInt)var5);
    org.sat4j.core.Vec var18 = new org.sat4j.core.Vec(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var19 = var1.delete(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test178() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    org.sat4j.specs.TimeoutException var32 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var33 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var32);
    org.sat4j.specs.TimeoutException var34 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var33);
    java.lang.String var35 = var33.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var36.expireTimeout();
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var40 = var39.pop();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    boolean var59 = var36.isSatisfiable((org.sat4j.specs.IVecInt)var39, var58);
    java.util.Map var60 = var36.getStat();
    org.sat4j.tools.DotSearchTracing var61 = new org.sat4j.tools.DotSearchTracing(var35, var60);
    org.sat4j.tools.TextOutputTracing var62 = new org.sat4j.tools.TextOutputTracing(var60);
    org.sat4j.tools.DotSearchTracing var63 = new org.sat4j.tools.DotSearchTracing(var4, var60);
    var63.solutionFound();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe3f51\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fe3f51\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var35.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7c923b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7c923b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);

  }

  public void test179() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var35.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var37 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var35.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var37);
    org.sat4j.core.VecInt var40 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var41 = var40.pop();
    org.sat4j.core.ReadOnlyVecInt var42 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var40);
    org.sat4j.core.VecInt var44 = new org.sat4j.core.VecInt(100);
    int var45 = var44.size();
    org.sat4j.minisat.core.Constr var46 = var37.createCardinalityConstraint((org.sat4j.specs.IVecInt)var40, var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var33.isSatisfiable((org.sat4j.specs.IVecInt)var40);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16bae6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16bae6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test180() throws Throwable {

    double[] var2 = new double[] { 1.0d, (-1.0d)};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.tools.ConstrGroup var4 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var5 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var5.setSolver(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var10 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var8.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var10);
    var5.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var8);
    var4.removeFrom((org.sat4j.specs.ISolver)var8);
    org.sat4j.minisat.restarts.MiniSATRestarts var14 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var15 = var14.toString();
    var8.setLogPrefix(var15);
    org.sat4j.tools.DecisionTracing var17 = new org.sat4j.tools.DecisionTracing(var15);
    var17.beginLoop();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    int var24 = var19.getTimeout();
    var17.backtracking(var24);
    var17.solutionFound();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var29 = new org.sat4j.minisat.constraints.cnf.UnitClause(var28);
    var17.assuming(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var3.inHeap(var28);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "MiniSAT restarts strategy"+ "'", var15.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);

  }

  public void test181() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var22 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var23.expireTimeout();
    var22.setLearner((org.sat4j.minisat.core.Learner)var23);
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    int var28 = var27.size();
    var27.sort();
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    java.lang.String var33 = var31.toString();
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var36 = var35.pop();
    org.sat4j.core.ReadOnlyVecInt var37 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var35);
    org.sat4j.minisat.constraints.cnf.UnitClause var39 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var40 = var37.indexOf((-1));
    boolean var41 = var31.contains((-1));
    var27.pushAll((org.sat4j.specs.IVecInt)var31);
    boolean var43 = var23.isSatisfiable((org.sat4j.specs.IVecInt)var27);
    boolean var44 = var21.isSatisfiable((org.sat4j.specs.IVecInt)var27);
    int[] var48 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(var48);
    var27.moveTo2((org.sat4j.specs.IVecInt)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12d1860\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12d1860\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test182() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.core.DefaultComparator var23 = new org.sat4j.core.DefaultComparator();
    var1.sort((java.util.Comparator)var23);
    java.lang.String var25 = var1.toString();
    java.lang.String var26 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bb9d54\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bb9d54\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));

  }

  public void test183() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    int var25 = var24.size();
    java.lang.String var26 = var24.toString();
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var29 = var28.pop();
    org.sat4j.core.ReadOnlyVecInt var30 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var28);
    org.sat4j.minisat.constraints.cnf.UnitClause var32 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var33 = var30.indexOf((-1));
    boolean var34 = var24.contains((-1));
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    int var40 = org.sat4j.core.LiteralsUtils.toInternal(var38);
    int var41 = var24.indexOf(var38);
    boolean var42 = var24.isEmpty();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var43 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    org.sat4j.minisat.core.IOrder var50 = var45.getOrder();
    java.lang.String var51 = var45.toString();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    var52.setTimeoutOnConflicts(var55);
    var45.setTimeoutOnConflicts(var55);
    org.sat4j.tools.ModelIterator var58 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var44, var55);
    var44.setTimeoutOnConflicts(0);
    var43.updateVar(0);
    var24.shrinkTo(0);
    var1.shrink(0);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var64 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    org.sat4j.minisat.core.IOrder var70 = var65.getOrder();
    java.lang.String var71 = var65.toString();
    var65.setTimeoutOnConflicts(0);
    var64.assignLiteral(0);
    var1.ensure(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6b7657\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6b7657\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12eb53d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var51.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12eb53d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@177afca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var71.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@177afca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test184() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.specs.IVecInt var7 = var0.getOutLearnt();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    int var21 = org.sat4j.core.LiteralsUtils.posLit(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.model(var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15bcd5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15bcd5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1dde23d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1dde23d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4294966);

  }

  public void test185() throws Throwable {

    org.sat4j.reader.ParseFormatException var0 = new org.sat4j.reader.ParseFormatException();

  }

  public void test186() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    var2.setTimeoutMs(0L);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var17 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    var18.setTimeoutOnConflicts(0);
    var17.updateVar(0);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var37 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var36);
    org.sat4j.reader.LecteurDimacs var38 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var36);
    org.sat4j.opt.MaxSatDecorator var39 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var36);
    org.sat4j.core.VecInt var41 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var42 = var41.pop();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    org.sat4j.minisat.core.IOrder var48 = var43.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var49 = new org.sat4j.minisat.orders.RandomWalkDecorator(var48);
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    org.sat4j.minisat.core.IOrder var55 = var50.getOrder();
    java.lang.String var56 = var50.toString();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    var50.setTimeoutOnConflicts(var60);
    var50.setTimeoutMs(0L);
    int var65 = var50.newVar();
    double var66 = var49.varActivity(var65);
    int var67 = var41.indexOf(var65);
    var39.setExpectedNumberOfClauses(var65);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var69 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var71 = var69.select(100);
    var17.init(var65, var71);
    int var73 = var2.newVar(var65);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var74 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    var75.setTimeoutOnConflicts(var78);
    org.sat4j.minisat.core.IOrder var80 = var75.getOrder();
    java.lang.String var81 = var75.toString();
    var75.setTimeoutOnConflicts(0);
    var74.assignLiteral(0);
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    org.sat4j.minisat.core.Solver var87 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var88 = var87.getTimeout();
    var85.setTimeoutOnConflicts(var88);
    int var90 = var85.nVars();
    org.sat4j.minisat.orders.PureOrder var91 = new org.sat4j.minisat.orders.PureOrder(var90);
    org.sat4j.core.VecInt var93 = new org.sat4j.core.VecInt(100);
    int var94 = var93.size();
    var91.assignLiteral(var94);
    var74.assignLiteral(var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set(var73, (java.lang.Object)var94);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13e9fe4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13e9fe4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6d76\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6d76\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b1a755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var56.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b1a755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@507110\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var81.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@507110\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test187() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeap((org.sat4j.minisat.core.DataStructureFactory)var0);
    org.sat4j.core.VecInt var30 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var31 = var30.pop();
    org.sat4j.core.ReadOnlyVecInt var32 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var30);
    org.sat4j.minisat.constraints.cnf.UnitClause var34 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var35 = var32.indexOf((-1));
    org.sat4j.core.ReadOnlyVecInt var36 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var37 = var0.createClause((org.sat4j.specs.IVecInt)var32);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));

  }

  public void test188() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    java.lang.String var16 = var4.toString(var15);
    boolean var17 = var1.equals((java.lang.Object)var4);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    org.sat4j.core.VecInt var34 = new org.sat4j.core.VecInt(100);
    int var35 = var34.size();
    var32.setTimeoutOnConflicts(var35);
    int[] var37 = var32.findModel();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    org.sat4j.minisat.core.IOrder var44 = var39.getOrder();
    java.lang.String var45 = var39.toString();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    var39.setTimeoutOnConflicts(var49);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var38, var49);
    boolean var54 = var52.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var55 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var52);
    org.sat4j.core.VecInt var57 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var58 = var57.pop();
    org.sat4j.core.ReadOnlyVecInt var59 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var57);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeoutOnConflicts(var64);
    org.sat4j.minisat.core.IOrder var66 = var61.getOrder();
    java.lang.String var67 = var61.toString();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    var61.setTimeoutOnConflicts(var71);
    org.sat4j.tools.ModelIterator var74 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var60, var71);
    boolean var76 = var74.isSatisfiable(true);
    boolean var77 = var74.isVerbose();
    boolean var78 = var52.isSatisfiable((org.sat4j.specs.IVecInt)var59, var77);
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    var79.setTimeoutOnConflicts(var82);
    int var84 = org.sat4j.core.LiteralsUtils.toInternal(var82);
    int var85 = var59.indexOf(var84);
    int var86 = var32.newVar(var85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var87 = var1.unsafeGet(var86);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1af82d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1af82d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18a6743\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1006ff2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1006ff2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a3acf0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var45.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a3acf0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ee2be9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var67.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ee2be9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));

  }

  public void test189() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    var0.init(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test190() throws Throwable {

    org.sat4j.specs.ISolver var0 = org.sat4j.minisat.SolverFactory.newDefault();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain(var0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var2.expireTimeout();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var18);
    boolean var23 = var21.isSatisfiable(true);
    boolean var24 = var21.isVerbose();
    boolean var25 = var2.isSatisfiable((org.sat4j.specs.IVecInt)var5, var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cc7c50\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cc7c50\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test191() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    int var40 = var35.nVars();
    org.sat4j.minisat.orders.PureOrder var41 = new org.sat4j.minisat.orders.PureOrder(var40);
    org.sat4j.core.VecInt var43 = new org.sat4j.core.VecInt(100);
    int var44 = var43.size();
    var41.assignLiteral(var44);
    org.sat4j.core.VecInt var47 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var48 = var47.pop();
    org.sat4j.core.ReadOnlyVecInt var49 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var47);
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var50.expireTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeout(var53);
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    org.sat4j.minisat.core.IOrder var60 = var55.getOrder();
    java.lang.String var61 = var55.toString();
    java.lang.String var62 = var50.toString(var61);
    boolean var63 = var47.equals((java.lang.Object)var50);
    int var64 = var50.nConstraints();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    int var67 = var50.newVar(var66);
    var41.assignLiteral(var67);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var69 = var33.model(var67);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test192() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var23 = var22.size();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test193() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    var0.setTimeoutOnConflicts(0);
    org.sat4j.minisat.restarts.NoRestarts var17 = new org.sat4j.minisat.restarts.NoRestarts();
    org.sat4j.minisat.core.SearchParams var18 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    int var21 = var20.size();
    var18.setInitConflictBound(var21);
    var17.init(var18);
    org.sat4j.minisat.core.SearchParams var24 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var26 = new org.sat4j.core.VecInt(100);
    int var27 = var26.size();
    var24.setInitConflictBound(var27);
    var24.setClaDecay(1.0d);
    var18.setVarDecay(1.0d);
    double var32 = var18.getConflictBoundIncFactor();
    var0.setSearchParams(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c7de30\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c7de30\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.5d);

  }

  public void test194() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.assignLiteral(var9);
    org.sat4j.minisat.core.ILits var11 = var6.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var12 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var6.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var15 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var14);
    org.sat4j.reader.LecteurDimacs var16 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var14);
    org.sat4j.opt.MaxSatDecorator var17 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var27 = new org.sat4j.minisat.orders.RandomWalkDecorator(var26);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    var28.setTimeoutMs(0L);
    int var43 = var28.newVar();
    double var44 = var27.varActivity(var43);
    int var45 = var19.indexOf(var43);
    var17.setExpectedNumberOfClauses(var43);
    org.sat4j.minisat.core.SearchParams var47 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    var47.setInitConflictBound(var50);
    var17.setExpectedNumberOfClauses(var50);
    double var53 = var6.varActivity(var50);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var55 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var54);
    org.sat4j.reader.LecteurDimacs var56 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var54);
    org.sat4j.opt.MaxSatDecorator var57 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var54);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var60 = var59.pop();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeoutOnConflicts(var64);
    org.sat4j.minisat.core.IOrder var66 = var61.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var67 = new org.sat4j.minisat.orders.RandomWalkDecorator(var66);
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    org.sat4j.minisat.core.IOrder var73 = var68.getOrder();
    java.lang.String var74 = var68.toString();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    var75.setTimeoutOnConflicts(var78);
    var68.setTimeoutOnConflicts(var78);
    var68.setTimeoutMs(0L);
    int var83 = var68.newVar();
    double var84 = var67.varActivity(var83);
    int var85 = var59.indexOf(var83);
    var57.setExpectedNumberOfClauses(var83);
    org.sat4j.minisat.core.SearchParams var87 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var89 = new org.sat4j.core.VecInt(100);
    int var90 = var89.size();
    var87.setInitConflictBound(var90);
    var57.setExpectedNumberOfClauses(var90);
    var6.assignLiteral(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e328de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e328de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a5814b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var74.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a5814b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test195() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var22.expireTimeout();
    org.sat4j.core.VecInt var25 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var26 = var25.pop();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    org.sat4j.tools.ModelIterator var41 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var27, var38);
    boolean var43 = var41.isSatisfiable(true);
    boolean var44 = var41.isVerbose();
    boolean var45 = var22.isSatisfiable((org.sat4j.specs.IVecInt)var25, var44);
    java.util.Map var46 = var22.getStat();
    org.sat4j.tools.TextOutputTracing var47 = new org.sat4j.tools.TextOutputTracing(var46);
    boolean var48 = var5.equals((java.lang.Object)var47);
    var47.start();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@897d3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@897d3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test196() throws Throwable {

    org.sat4j.tools.DecisionTracing var1 = new org.sat4j.tools.DecisionTracing("");

  }

  public void test197() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeap((org.sat4j.minisat.core.DataStructureFactory)var0);
    org.sat4j.minisat.constraints.cnf.UnitClause var3 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.learnConstraint((org.sat4j.minisat.core.Constr)var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test198() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.SearchParams var6 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.setInitConflictBound(var9);
    var6.setClaDecay(1.0d);
    var5.incActivity(1.0d);
    org.sat4j.minisat.constraints.cnf.UnitClause var16 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.SearchParams var17 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    int var20 = var19.size();
    var17.setInitConflictBound(var20);
    var17.setClaDecay(1.0d);
    var16.incActivity(1.0d);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    org.sat4j.minisat.core.IOrder var30 = var25.getOrder();
    java.lang.String var31 = var25.toString();
    var25.setTimeoutOnConflicts(0);
    int var34 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.core.SearchParams var35 = new org.sat4j.minisat.core.SearchParams(1.0d, 100.0d, 1.0d, 0);
    org.sat4j.tools.ConstrGroup var36 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var37 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var37.setSolver(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var42 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var40.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var42);
    var37.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var40);
    var36.removeFrom((org.sat4j.specs.ISolver)var40);
    org.sat4j.minisat.restarts.MiniSATRestarts var46 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var47 = var46.toString();
    var40.setLogPrefix(var47);
    org.sat4j.tools.DecisionTracing var49 = new org.sat4j.tools.DecisionTracing(var47);
    var49.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var52 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var53 = var52.size();
    var52.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    java.lang.String var64 = var58.toString();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    var58.setTimeoutOnConflicts(var68);
    org.sat4j.tools.ModelIterator var71 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var57, var68);
    boolean var73 = var71.isSatisfiable(true);
    boolean var74 = var71.isVerbose();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var77 = var76.getTimeout();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var79 = var78.getTimeout();
    var76.setTimeoutOnConflicts(var79);
    org.sat4j.minisat.core.IOrder var81 = var76.getOrder();
    java.lang.String var82 = var76.toString();
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    var83.setTimeoutOnConflicts(var86);
    var76.setTimeoutOnConflicts(var86);
    org.sat4j.tools.ModelIterator var89 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var75, var86);
    boolean var91 = var89.isSatisfiable(true);
    boolean var92 = var89.isVerbose();
    org.sat4j.reader.InstanceReader var93 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var89);
    int var94 = var89.nConstraints();
    boolean var95 = var89.isVerbose();
    boolean var96 = var89.isDBSimplificationAllowed();
    int var97 = var71.nextFreeVarId(var96);
    var49.conflictFound((org.sat4j.specs.IConstr)var52, (-1), var97);
    boolean var99 = var0.enqueue(0, (org.sat4j.minisat.core.Constr)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a61c42\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var31.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a61c42\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "MiniSAT restarts strategy"+ "'", var47.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fa351e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var64.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fa351e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6a2757\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var82.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6a2757\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test199() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.core.DefaultComparator var23 = new org.sat4j.core.DefaultComparator();
    var1.sort((java.util.Comparator)var23);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var25 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var25.setLearner((org.sat4j.minisat.core.Learner)var26);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    var29.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var46 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, 0);
    var1.ensure(0);
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    org.sat4j.minisat.core.IOrder var55 = var50.getOrder();
    java.lang.String var56 = var50.toString();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    var50.setTimeoutOnConflicts(var60);
    org.sat4j.tools.ModelIterator var63 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var49, var60);
    boolean var65 = var63.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var66 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var63);
    org.sat4j.tools.ModelIterator var67 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var63);
    org.sat4j.core.Vec var68 = new org.sat4j.core.Vec(10, (java.lang.Object)var67);
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    var1.copyTo(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fbe360\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fbe360\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15f3ad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15f3ad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dc5132\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var56.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dc5132\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test200() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.assignLiteral(var9);
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var13 = var12.pop();
    org.sat4j.core.ReadOnlyVecInt var14 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var12);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var15.expireTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeout(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    java.lang.String var27 = var15.toString(var26);
    boolean var28 = var12.equals((java.lang.Object)var15);
    int var29 = var15.nConstraints();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    int var32 = var15.newVar(var31);
    var6.assignLiteral(var32);
    var6.varDecayActivity();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      int var35 = var6.select();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test201() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    java.lang.String var16 = var4.toString(var15);
    boolean var17 = var1.equals((java.lang.Object)var4);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var19 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var18);
    org.sat4j.reader.LecteurDimacs var20 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var18);
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int var24 = var23.size();
    java.lang.String var25 = var23.toString();
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.core.ReadOnlyVecInt var29 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var27);
    org.sat4j.minisat.constraints.cnf.UnitClause var31 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var32 = var29.indexOf((-1));
    boolean var33 = var23.contains((-1));
    int var34 = var18.newVar((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e92eba\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e92eba\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8f755\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));

  }

  public void test202() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    var30.start();
    var30.start();
    int[] var36 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var37 = new org.sat4j.core.VecInt(var36);
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var38.expireTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeout(var41);
    var37.ensure(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.backtracking(var41);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bd5ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bd5ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);

  }

  public void test203() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int[] var21 = new int[] { 1, 0};
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var22 = var18.decode(var21);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test204() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);

  }

  public void test205() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    var62.onRestart();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var64.expireTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeout(var67);
    var62.setFactor(var67);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var62.init(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c620c4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c620c4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cb457c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cb457c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test206() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    org.sat4j.minisat.core.IOrder var36 = var31.getOrder();
    java.lang.String var37 = var31.toString();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    var31.setTimeoutOnConflicts(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.backtracking(var41);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19ca1ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19ca1ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@104ca48\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var37.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@104ca48\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);

  }

  public void test207() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setLearnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test208() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var9, var20);
    boolean var25 = var23.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var26 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var23);
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var29 = var28.pop();
    org.sat4j.core.ReadOnlyVecInt var30 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var28);
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    org.sat4j.minisat.core.IOrder var37 = var32.getOrder();
    java.lang.String var38 = var32.toString();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    var32.setTimeoutOnConflicts(var42);
    org.sat4j.tools.ModelIterator var45 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var31, var42);
    boolean var47 = var45.isSatisfiable(true);
    boolean var48 = var45.isVerbose();
    boolean var49 = var23.isSatisfiable((org.sat4j.specs.IVecInt)var30, var48);
    boolean var50 = var30.isEmpty();
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    int var53 = var52.size();
    java.lang.String var54 = var52.toString();
    org.sat4j.core.VecInt var56 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var57 = var56.pop();
    org.sat4j.core.ReadOnlyVecInt var58 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var56);
    org.sat4j.minisat.constraints.cnf.UnitClause var60 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var61 = var58.indexOf((-1));
    boolean var62 = var52.contains((-1));
    org.sat4j.specs.IConstr var63 = var0.addAtLeast((org.sat4j.specs.IVecInt)var30, (-1));
    int[] var67 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(var67);
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var69.expireTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeout(var72);
    var68.ensure(var72);
    boolean var75 = var30.contains(var72);
    org.sat4j.core.VecInt var77 = new org.sat4j.core.VecInt(100);
    int var78 = var77.size();
    var77.sort();
    org.sat4j.core.VecInt var81 = new org.sat4j.core.VecInt(100);
    int var82 = var81.size();
    java.lang.String var83 = var81.toString();
    org.sat4j.core.VecInt var85 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var86 = var85.pop();
    org.sat4j.core.ReadOnlyVecInt var87 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var85);
    org.sat4j.minisat.constraints.cnf.UnitClause var89 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var90 = var87.indexOf((-1));
    boolean var91 = var81.contains((-1));
    var77.pushAll((org.sat4j.specs.IVecInt)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.moveTo((org.sat4j.specs.IVecInt)var77);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139bf09\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139bf09\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16fbc47\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16fbc47\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@144e498\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var38.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@144e498\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test209() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.tools.SingleSolutionDetector var1 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    java.lang.String var5 = var3.toString();
    org.sat4j.core.VecInt var7 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var8 = var7.pop();
    org.sat4j.core.ReadOnlyVecInt var9 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var7);
    org.sat4j.minisat.constraints.cnf.UnitClause var11 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var12 = var9.indexOf((-1));
    boolean var13 = var3.contains((-1));
    var1.setDBSimplificationAllowed(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test210() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14);
    org.sat4j.minisat.constraints.cnf.UnitClause var20 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var14.removeConstr((org.sat4j.specs.IConstr)var20);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ac5c7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ac5c7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test211() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.tools.SingleSolutionDetector var7 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.SingleSolutionDetector var8 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var9, var20);
    boolean var25 = var23.isSatisfiable(true);
    boolean var26 = var23.isVerbose();
    org.sat4j.reader.InstanceReader var27 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var23);
    int var28 = var23.nConstraints();
    int[] var29 = var23.model();
    org.sat4j.tools.SolutionCounter var30 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var23);
    org.sat4j.core.VecInt var32 = new org.sat4j.core.VecInt(100);
    int[] var33 = var30.findModel((org.sat4j.specs.IVecInt)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var34 = var7.addBlockingClause((org.sat4j.specs.IVecInt)var32);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d3ca11\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d3ca11\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@daf20c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@daf20c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test212() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    org.sat4j.core.DefaultComparator var77 = new org.sat4j.core.DefaultComparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.sort((java.util.Comparator)var77);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@367995\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@367995\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@119d61b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@119d61b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@138f906\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@138f906\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6913d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6913d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);

  }

  public void test213() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    var3.reset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.discard();
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f5b7a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f5b7a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test214() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    int[] var25 = var0.findModel();
    int[] var26 = var0.findModel();
    int[] var27 = var0.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1394c94\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1394c94\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test215() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    int[] var10 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(var10);
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    int var14 = var13.size();
    var11.shrink(var14);
    var6.assignLiteral(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test216() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var23 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var26 = new org.sat4j.minisat.constraints.cnf.UnitClause(var25);
    var23.init(var25);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var28.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var30 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var28.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var30);
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.core.ReadOnlyVecInt var35 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var33);
    org.sat4j.core.VecInt var37 = new org.sat4j.core.VecInt(100);
    int var38 = var37.size();
    org.sat4j.minisat.core.Constr var39 = var30.createCardinalityConstraint((org.sat4j.specs.IVecInt)var33, var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.calcReason(var25, (org.sat4j.specs.IVecInt)var33);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test217() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    int var51 = var21.get(var50);
    int var53 = org.sat4j.core.LiteralsUtils.toInternal(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.remove(10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4ee358\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4ee358\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@224fcc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@224fcc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 20);

  }

  public void test218() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    java.lang.String var5 = org.sat4j.minisat.constraints.cnf.Lits.toString(var3);
    org.sat4j.specs.TimeoutException var7 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var8 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var7);
    org.sat4j.specs.TimeoutException var9 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.TimeoutException var10 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.ContradictionException var11 = new org.sat4j.specs.ContradictionException(var5, (java.lang.Throwable)var8);
    org.sat4j.reader.ParseFormatException var12 = new org.sat4j.reader.ParseFormatException((java.lang.Throwable)var8);
    org.sat4j.specs.ContradictionException var13 = new org.sat4j.specs.ContradictionException((java.lang.Throwable)var12);
    java.lang.String var14 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "-1073741"+ "'", var5.equals("-1073741"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "org.sat4j.specs.ContradictionException: org.sat4j.reader.ParseFormatException: org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var14.equals("org.sat4j.specs.ContradictionException: org.sat4j.reader.ParseFormatException: org.sat4j.reader.ParseFormatException: DIMACS Format error: "));

  }

  public void test219() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    java.lang.String var7 = var5.toString();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var10 = var9.pop();
    org.sat4j.core.ReadOnlyVecInt var11 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var9);
    org.sat4j.minisat.constraints.cnf.UnitClause var13 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var14 = var11.indexOf((-1));
    boolean var15 = var5.contains((-1));
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    int var21 = org.sat4j.core.LiteralsUtils.toInternal(var19);
    int var22 = var5.indexOf(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var23 = var3.varActivity(var19);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));

  }

  public void test220() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d40227\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d40227\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test221() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapRsatExpSimp();
    org.sat4j.tools.ExtendedDimacsArrayReader var1 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    int[] var5 = new int[] { (-1), 1, 100};
    java.lang.String var6 = var1.decode(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 1 100 0"+ "'", var6.equals("-1 1 100 0"));

  }

  public void test222() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.assignLiteral(var9);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.learning.PercentLengthLearning var16 = new org.sat4j.minisat.learning.PercentLengthLearning(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.updateVar(var14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);

  }

  public void test223() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var26 = new org.sat4j.minisat.orders.RandomWalkDecorator(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    var27.setTimeoutMs(0L);
    int var42 = var27.newVar();
    double var43 = var26.varActivity(var42);
    int var44 = var18.indexOf(var42);
    int[] var45 = var18.toArray();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    org.sat4j.reader.LecteurDimacs var48 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var46);
    org.sat4j.opt.MaxSatDecorator var49 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var59 = new org.sat4j.minisat.orders.RandomWalkDecorator(var58);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    var60.setTimeoutMs(0L);
    int var75 = var60.newVar();
    double var76 = var59.varActivity(var75);
    int var77 = var51.indexOf(var75);
    var49.setExpectedNumberOfClauses(var75);
    org.sat4j.specs.IConstr var79 = var7.addAtLeast((org.sat4j.specs.IVecInt)var18, var75);
    org.sat4j.minisat.core.Solver var80 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var81 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var80);
    org.sat4j.reader.LecteurDimacs var82 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var80);
    org.sat4j.tools.SolutionCounter var83 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var80);
    org.sat4j.core.VecInt var85 = new org.sat4j.core.VecInt(100);
    int var86 = var85.size();
    java.lang.String var87 = var85.toString();
    org.sat4j.core.VecInt var89 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var90 = var89.pop();
    org.sat4j.core.ReadOnlyVecInt var91 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var89);
    org.sat4j.minisat.constraints.cnf.UnitClause var93 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var94 = var91.indexOf((-1));
    boolean var95 = var85.contains((-1));
    int var96 = var80.newVar((-1));
    var7.setTimeout((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13d4287\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13d4287\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11397b9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11397b9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@337936\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@337936\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));

  }

  public void test224() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    org.sat4j.core.VecInt var15 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var16 = var15.pop();
    org.sat4j.core.ReadOnlyVecInt var17 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var15);
    org.sat4j.minisat.constraints.cnf.UnitClause var19 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var20 = var17.indexOf((-1));
    var13.assuming(var20);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var39 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var36);
    org.sat4j.core.VecInt var41 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var42 = var41.pop();
    org.sat4j.core.ReadOnlyVecInt var43 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var41);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    org.sat4j.minisat.core.IOrder var50 = var45.getOrder();
    java.lang.String var51 = var45.toString();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    var52.setTimeoutOnConflicts(var55);
    var45.setTimeoutOnConflicts(var55);
    org.sat4j.tools.ModelIterator var58 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var44, var55);
    boolean var60 = var58.isSatisfiable(true);
    boolean var61 = var58.isVerbose();
    boolean var62 = var36.isSatisfiable((org.sat4j.specs.IVecInt)var43, var61);
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    int var68 = org.sat4j.core.LiteralsUtils.toInternal(var66);
    int var69 = var43.indexOf(var68);
    org.sat4j.core.VecInt var71 = new org.sat4j.core.VecInt(100);
    int var72 = var71.size();
    int var73 = var43.get(var72);
    var13.backjump(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f1b363\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f1b363\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d6c355\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var51.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d6c355\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test225() throws Throwable {

    double[] var2 = new double[] { 1.0d, (-1.0d)};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.reader.LecteurDimacs var6 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var4);
    org.sat4j.tools.ExtendedDimacsArrayReader var7 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    var9.setTimeoutOnConflicts(var19);
    org.sat4j.tools.ModelIterator var22 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var8, var19);
    boolean var24 = var22.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var25 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var22);
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.core.ReadOnlyVecInt var29 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var27);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    org.sat4j.minisat.core.IOrder var36 = var31.getOrder();
    java.lang.String var37 = var31.toString();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    var31.setTimeoutOnConflicts(var41);
    org.sat4j.tools.ModelIterator var44 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var30, var41);
    boolean var46 = var44.isSatisfiable(true);
    boolean var47 = var44.isVerbose();
    boolean var48 = var22.isSatisfiable((org.sat4j.specs.IVecInt)var29, var47);
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    int var54 = org.sat4j.core.LiteralsUtils.toInternal(var52);
    int var55 = var29.indexOf(var54);
    org.sat4j.tools.ModelIterator var56 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var55);
    org.sat4j.minisat.learning.PercentLengthLearning var57 = new org.sat4j.minisat.learning.PercentLengthLearning(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.increase(var55);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1737ff3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1737ff3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17f54f3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var37.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17f54f3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));

  }

  public void test226() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielHT var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielHT();
    int[] var4 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var6.expireTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeout(var9);
    var5.ensure(var9);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var13 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var12);
    var5.pushAll(var13);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var15 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var17 = var15.select(100);
    int var19 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var15.assignLiteral(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var21 = var0.createCardinalityConstraint((org.sat4j.specs.IVecInt)var5, var19);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 20);

  }

  public void test227() throws Throwable {

    org.sat4j.minisat.core.SolverStats var0 = new org.sat4j.minisat.core.SolverStats();
    var0.reset();

  }

  public void test228() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    var21.setExpectedNumberOfClauses(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4a755a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4a755a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test229() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    java.lang.String var5 = org.sat4j.minisat.constraints.cnf.Lits.toString(var3);
    org.sat4j.specs.TimeoutException var7 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var8 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var7);
    org.sat4j.specs.TimeoutException var9 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.TimeoutException var10 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.ContradictionException var11 = new org.sat4j.specs.ContradictionException(var5, (java.lang.Throwable)var8);
    org.sat4j.reader.ParseFormatException var12 = new org.sat4j.reader.ParseFormatException((java.lang.Throwable)var8);
    org.sat4j.reader.ParseFormatException var13 = new org.sat4j.reader.ParseFormatException((java.lang.Throwable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "-1073741"+ "'", var5.equals("-1073741"));

  }

  public void test230() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    int[] var38 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeout(var43);
    var39.ensure(var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    var39.pushAll(var47);
    int[] var49 = var33.findModel((org.sat4j.specs.IVecInt)var39);
    var39.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@871741\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@871741\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test231() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    var0.setSimplifier("");
    org.sat4j.tools.DecisionTracing var3 = new org.sat4j.tools.DecisionTracing("");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test232() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.minisat.core.SearchParams var33 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    int var36 = var35.size();
    var33.setInitConflictBound(var36);
    var3.setExpectedNumberOfClauses(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.discardCurrentSolution();
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bf08ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bf08ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test233() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    var0.updateVar(var4);
    java.lang.String var7 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "negative phase selection"+ "'", var7.equals("negative phase selection"));

  }

  public void test234() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var26 = new org.sat4j.minisat.orders.RandomWalkDecorator(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    var27.setTimeoutMs(0L);
    int var42 = var27.newVar();
    double var43 = var26.varActivity(var42);
    int var44 = var18.indexOf(var42);
    int[] var45 = var18.toArray();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    org.sat4j.reader.LecteurDimacs var48 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var46);
    org.sat4j.opt.MaxSatDecorator var49 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var59 = new org.sat4j.minisat.orders.RandomWalkDecorator(var58);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    var60.setTimeoutMs(0L);
    int var75 = var60.newVar();
    double var76 = var59.varActivity(var75);
    int var77 = var51.indexOf(var75);
    var49.setExpectedNumberOfClauses(var75);
    org.sat4j.specs.IConstr var79 = var7.addAtLeast((org.sat4j.specs.IVecInt)var18, var75);
    var7.clearLearntClauses();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var81 = var7.unsatExplanation();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1991440\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1991440\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a6e654\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a6e654\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16b8d48\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16b8d48\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);

  }

  public void test235() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var9, var20);
    boolean var25 = var23.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var26 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var23);
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var29 = var28.pop();
    org.sat4j.core.ReadOnlyVecInt var30 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var28);
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    org.sat4j.minisat.core.IOrder var37 = var32.getOrder();
    java.lang.String var38 = var32.toString();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    var32.setTimeoutOnConflicts(var42);
    org.sat4j.tools.ModelIterator var45 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var31, var42);
    boolean var47 = var45.isSatisfiable(true);
    boolean var48 = var45.isVerbose();
    boolean var49 = var23.isSatisfiable((org.sat4j.specs.IVecInt)var30, var48);
    boolean var50 = var30.isEmpty();
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    int var53 = var52.size();
    java.lang.String var54 = var52.toString();
    org.sat4j.core.VecInt var56 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var57 = var56.pop();
    org.sat4j.core.ReadOnlyVecInt var58 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var56);
    org.sat4j.minisat.constraints.cnf.UnitClause var60 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var61 = var58.indexOf((-1));
    boolean var62 = var52.contains((-1));
    org.sat4j.specs.IConstr var63 = var0.addAtLeast((org.sat4j.specs.IVecInt)var30, (-1));
    int[] var67 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(var67);
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var69.expireTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeout(var72);
    var68.ensure(var72);
    boolean var75 = var30.contains(var72);
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var77 = var76.getTimeout();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var79 = var78.getTimeout();
    var76.setTimeoutOnConflicts(var79);
    int var81 = org.sat4j.core.LiteralsUtils.toInternal(var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var82 = var30.delete(var79);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@169e2d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@169e2d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17a5bf7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17a5bf7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@127bd4b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var38.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@127bd4b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 4294966);

  }

  public void test236() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setLearnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);

  }

  public void test237() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.learning.MiniSATLearning var2 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var3 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var2.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = var5.getTimeout();
    var3.setLearner((org.sat4j.minisat.core.Learner)var5);
    org.sat4j.minisat.core.ILits var12 = var3.getVocabulary();
    org.sat4j.minisat.learning.FixedLengthLearning var13 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var13.setSolver(var14);
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var16.expireTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeout(var19);
    var13.setSolver(var16);
    org.sat4j.specs.IVecInt var22 = var16.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var23 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var16);
    org.sat4j.tools.GateTranslator var24 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var16);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    org.sat4j.tools.ModelIterator var39 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var25, var36);
    boolean var41 = var39.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var42 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var39);
    org.sat4j.core.VecInt var44 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var45 = var44.pop();
    org.sat4j.core.ReadOnlyVecInt var46 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var44);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    org.sat4j.tools.ModelIterator var61 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var47, var58);
    boolean var63 = var61.isSatisfiable(true);
    boolean var64 = var61.isVerbose();
    boolean var65 = var39.isSatisfiable((org.sat4j.specs.IVecInt)var46, var64);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    int var71 = org.sat4j.core.LiteralsUtils.toInternal(var69);
    int var72 = var46.indexOf(var71);
    int[] var76 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var77 = new org.sat4j.core.VecInt(var76);
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var78.expireTimeout();
    org.sat4j.minisat.core.Solver var80 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var81 = var80.getTimeout();
    var78.setTimeout(var81);
    var77.ensure(var81);
    org.sat4j.specs.IConstr[] var84 = var24.and(var71, (org.sat4j.specs.IVecInt)var77);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      org.sat4j.minisat.constraints.cnf.OriginalHTClause var85 = org.sat4j.minisat.constraints.cnf.OriginalHTClause.brandNewClause((org.sat4j.minisat.core.UnitPropagationListener)var0, var12, (org.sat4j.specs.IVecInt)var77);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test238() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var2 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var1);
    var0.setSolver(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test239() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    org.sat4j.tools.TextOutputTracing var31 = new org.sat4j.tools.TextOutputTracing(var29);
    org.sat4j.minisat.constraints.ClausalDataStructureCB var32 = new org.sat4j.minisat.constraints.ClausalDataStructureCB();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var39 = new org.sat4j.minisat.orders.RandomWalkDecorator(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    var40.setTimeoutMs(0L);
    int var55 = var40.newVar();
    double var56 = var39.varActivity(var55);
    org.sat4j.specs.IVec var57 = var32.getWatchesFor(var55);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    int var60 = var59.size();
    var59.sort();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    int var67 = org.sat4j.core.LiteralsUtils.toInternal(var65);
    org.sat4j.specs.IVecInt var68 = var59.push(var67);
    org.sat4j.minisat.core.Constr var69 = var32.createUnregisteredClause((org.sat4j.specs.IVecInt)var59);
    var31.learn((org.sat4j.specs.IConstr)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8e47d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8e47d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@844bb8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@844bb8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test240() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    java.lang.String var17 = var7.toString();
    org.sat4j.tools.ConstrGroup var18 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var19 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var19.setSolver(var20);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var22.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var24 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var22.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var24);
    var19.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var22);
    var18.removeFrom((org.sat4j.specs.ISolver)var22);
    org.sat4j.minisat.restarts.MiniSATRestarts var28 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var29 = var28.toString();
    var22.setLogPrefix(var29);
    org.sat4j.tools.DecisionTracing var31 = new org.sat4j.tools.DecisionTracing(var29);
    var31.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var34 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var35 = var34.size();
    var34.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    java.lang.String var64 = var58.toString();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    var58.setTimeoutOnConflicts(var68);
    org.sat4j.tools.ModelIterator var71 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var57, var68);
    boolean var73 = var71.isSatisfiable(true);
    boolean var74 = var71.isVerbose();
    org.sat4j.reader.InstanceReader var75 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var71);
    int var76 = var71.nConstraints();
    boolean var77 = var71.isVerbose();
    boolean var78 = var71.isDBSimplificationAllowed();
    int var79 = var53.nextFreeVarId(var78);
    var31.conflictFound((org.sat4j.specs.IConstr)var34, (-1), var79);
    boolean var81 = var7.removeSubsumedConstr((org.sat4j.specs.IConstr)var34);
    java.lang.StringBuffer var82 = var7.getOut();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1961d73\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1961d73\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "        p cnf 0 1            \n0\n"+ "'", var17.equals("        p cnf 0 1            \n0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "MiniSAT restarts strategy"+ "'", var29.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@834885\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@834885\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139b7bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var64.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139b7bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);

  }

  public void test241() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var34 = var33.last();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@580d5b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@580d5b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13b232b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13b232b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test242() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    var1.setSolver(var4);
    org.sat4j.specs.IVecInt var10 = var4.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var11 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var4);
    org.sat4j.specs.IVecInt var12 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var13 = var0.createClause(var12);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test243() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.core.ReadOnlyVecInt var20 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var18);
    org.sat4j.minisat.constraints.cnf.UnitClause var22 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var23 = var20.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var24 = var7.findModel((org.sat4j.specs.IVecInt)var20);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1881d7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1881d7e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));

  }

  public void test244() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var33.isSatisfiable(false);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@89828b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@89828b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test245() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var26 = new org.sat4j.minisat.orders.RandomWalkDecorator(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    var27.setTimeoutMs(0L);
    int var42 = var27.newVar();
    double var43 = var26.varActivity(var42);
    int var44 = var18.indexOf(var42);
    int[] var45 = var18.toArray();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    org.sat4j.reader.LecteurDimacs var48 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var46);
    org.sat4j.opt.MaxSatDecorator var49 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var59 = new org.sat4j.minisat.orders.RandomWalkDecorator(var58);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    var60.setTimeoutMs(0L);
    int var75 = var60.newVar();
    double var76 = var59.varActivity(var75);
    int var77 = var51.indexOf(var75);
    var49.setExpectedNumberOfClauses(var75);
    org.sat4j.specs.IConstr var79 = var7.addAtLeast((org.sat4j.specs.IVecInt)var18, var75);
    var7.clearLearntClauses();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var81 = var7.isSatisfiable();
      fail("Expected exception of type org.sat4j.specs.TimeoutException");
    } catch (org.sat4j.specs.TimeoutException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@129d4f8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@129d4f8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17b6ad4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17b6ad4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19a92d1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19a92d1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);

  }

  public void test246() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.ReadOnlyVec var34 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var35 = var34.last();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1319f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1319f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f86333\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f86333\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test247() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapRsatExpSimpLuby();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var3 = var2.pop();
    org.sat4j.core.ReadOnlyVecInt var4 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.constraints.cnf.UnitClause var6 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var7 = var4.indexOf((-1));
    org.sat4j.tools.ModelIterator var8 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, (-1));
    int var9 = var8.nVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test248() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.reader.InstanceReader var12 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var11);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    int var26 = org.sat4j.core.LiteralsUtils.posLit(var23);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    int var32 = var27.nVars();
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var33 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    var34.setTimeoutOnConflicts(0);
    var33.assignLiteral(0);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    int var49 = var44.nVars();
    org.sat4j.minisat.orders.PureOrder var50 = new org.sat4j.minisat.orders.PureOrder(var49);
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    int var53 = var52.size();
    var50.assignLiteral(var53);
    var33.assignLiteral(var53);
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var56.expireTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeout(var59);
    org.sat4j.minisat.constraints.cnf.UnitClause var61 = new org.sat4j.minisat.constraints.cnf.UnitClause(var59);
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var62.expireTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeout(var65);
    boolean var67 = var62.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var68 = var62.getOrder();
    org.sat4j.tools.SolutionCounter var69 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var62);
    int var70 = var62.nVars();
    int var71 = var61.get(var70);
    org.sat4j.specs.IConstr[] var72 = var11.ite(var26, var32, var53, var70);
    long var73 = var11.getTimeoutMs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4ad6f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4ad6f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6d1ac3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6d1ac3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483000L);

  }

  public void test249() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    var25.expireTimeout();
    java.lang.String var27 = var25.getLogPrefix();
    boolean var28 = var25.isDBSimplificationAllowed();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    boolean var45 = var43.isSatisfiable(true);
    boolean var46 = var43.isVerbose();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    org.sat4j.tools.ModelIterator var61 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var47, var58);
    boolean var63 = var61.isSatisfiable(true);
    boolean var64 = var61.isVerbose();
    org.sat4j.reader.InstanceReader var65 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var61);
    int var66 = var61.nConstraints();
    boolean var67 = var61.isVerbose();
    boolean var68 = var61.isDBSimplificationAllowed();
    int var69 = var43.nextFreeVarId(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var25.unset(var69);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f530f1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f530f1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "c "+ "'", var27.equals("c "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c8edce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c8edce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13fd92e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13fd92e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);

  }

  public void test250() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    org.sat4j.minisat.core.SearchParams var77 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var79 = new org.sat4j.core.VecInt(100);
    int var80 = var79.size();
    var77.setInitConflictBound(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.shrinkTo(var80);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1148f1d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1148f1d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139c302\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139c302\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@49c09e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@49c09e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ee4a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ee4a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);

  }

  public void test251() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    var30.start();
    var30.start();
    org.sat4j.tools.ConstrGroup var34 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var36 = new org.sat4j.tools.ConstrGroup(true);
    var34.add((org.sat4j.specs.IConstr)var36);
    boolean var38 = var34.learnt();
    var30.learn((org.sat4j.specs.IConstr)var34);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    org.sat4j.reader.InstanceReader var59 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var55);
    int var60 = var55.nConstraints();
    boolean var61 = var55.isVerbose();
    int var62 = var40.nextFreeVarId(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var34.get(var62);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@db97c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@db97c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3fb859\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3fb859\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);

  }

  public void test252() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.constraints.cnf.UnitClause var9 = new org.sat4j.minisat.constraints.cnf.UnitClause(var7);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var10.expireTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeout(var13);
    boolean var15 = var10.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var16 = var10.getOrder();
    org.sat4j.tools.SolutionCounter var17 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var10);
    int var18 = var10.nVars();
    int var19 = var9.get(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    var20.setTimeoutOnConflicts(var30);
    int var33 = org.sat4j.core.LiteralsUtils.posLit(var30);
    int var34 = org.sat4j.core.LiteralsUtils.var(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.set(var19, var34);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@edea70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@edea70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);

  }

  public void test253() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    org.sat4j.minisat.core.IOrder var68 = var63.getOrder();
    java.lang.String var69 = var63.toString();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeoutOnConflicts(var73);
    var63.setTimeoutOnConflicts(var73);
    org.sat4j.tools.ModelIterator var76 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var62, var73);
    boolean var78 = var76.isSatisfiable(true);
    boolean var79 = var76.isVerbose();
    org.sat4j.reader.InstanceReader var80 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var76);
    int var81 = var76.nConstraints();
    boolean var82 = var76.isVerbose();
    int var83 = var61.nextFreeVarId(var82);
    org.sat4j.minisat.core.Solver var84 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var85 = var84.getTimeout();
    org.sat4j.minisat.core.Solver var86 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var87 = var86.getTimeout();
    var84.setTimeoutOnConflicts(var87);
    int var89 = var84.nVars();
    org.sat4j.minisat.orders.PureOrder var90 = new org.sat4j.minisat.orders.PureOrder(var89);
    org.sat4j.tools.DimacsStringSolver var91 = new org.sat4j.tools.DimacsStringSolver(var89);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var92 = var60.propagate((org.sat4j.minisat.core.UnitPropagationListener)var61, var89);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test254() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    java.lang.String var5 = org.sat4j.minisat.constraints.cnf.Lits.toString(var3);
    org.sat4j.specs.TimeoutException var7 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var8 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var7);
    org.sat4j.specs.TimeoutException var9 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.TimeoutException var10 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var8);
    org.sat4j.specs.ContradictionException var11 = new org.sat4j.specs.ContradictionException(var5, (java.lang.Throwable)var8);
    java.lang.String var12 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "-1073741"+ "'", var5.equals("-1073741"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var12.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));

  }

  public void test255() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var13 = var2.toArray();
    var2.sort();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test256() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14);
    int[] var22 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(var22);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var24.expireTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeout(var27);
    var23.ensure(var27);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var31 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var30);
    var23.pushAll(var31);
    org.sat4j.tools.ConstrGroup var34 = new org.sat4j.tools.ConstrGroup(true);
    boolean var35 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var23, true);
    org.sat4j.tools.ConstrGroup var36 = new org.sat4j.tools.ConstrGroup(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f23e72\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f23e72\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test257() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.ReadOnlyVec var34 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var35 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var37 = var35.select(100);
    org.sat4j.minisat.orders.PureOrder var38 = new org.sat4j.minisat.orders.PureOrder(var37);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    org.sat4j.minisat.core.IOrder var44 = var39.getOrder();
    java.lang.String var45 = var39.toString();
    var39.setTimeoutOnConflicts(0);
    int var48 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var49 = new org.sat4j.minisat.learning.PercentLengthLearning(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.moveTo(var37, var48);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f8421f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f8421f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1436088\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1436088\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@168221f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var45.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@168221f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test258() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    java.lang.Object[] var34 = var33.toArray();
    java.util.Iterator var35 = var33.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.clear();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f9295\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f9295\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1650c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1650c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test259() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    boolean var3 = var1.isSatisfiable();
    java.util.Collection var4 = var1.getConstraints();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var22 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var19);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    org.sat4j.core.ReadOnlyVecInt var26 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var24);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    org.sat4j.tools.ModelIterator var41 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var27, var38);
    boolean var43 = var41.isSatisfiable(true);
    boolean var44 = var41.isVerbose();
    boolean var45 = var19.isSatisfiable((org.sat4j.specs.IVecInt)var26, var44);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    int var51 = org.sat4j.core.LiteralsUtils.toInternal(var49);
    int var52 = var26.indexOf(var51);
    org.sat4j.core.VecInt var54 = new org.sat4j.core.VecInt(100);
    int var55 = var54.size();
    int var56 = var26.get(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var57 = var1.findModel((org.sat4j.specs.IVecInt)var26);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19a6441\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19a6441\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@145502b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@145502b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test260() throws Throwable {

    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var0 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.reader.LecteurDimacs var5 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.ExtendedDimacsArrayReader var6 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var3);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var18);
    boolean var23 = var21.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var24 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var21);
    org.sat4j.core.VecInt var26 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var27 = var26.pop();
    org.sat4j.core.ReadOnlyVecInt var28 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var26);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    boolean var45 = var43.isSatisfiable(true);
    boolean var46 = var43.isVerbose();
    boolean var47 = var21.isSatisfiable((org.sat4j.specs.IVecInt)var28, var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    int var53 = org.sat4j.core.LiteralsUtils.toInternal(var51);
    int var54 = var28.indexOf(var53);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var54);
    org.sat4j.minisat.learning.PercentLengthLearning var56 = new org.sat4j.minisat.learning.PercentLengthLearning(var54);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.updateVar(var54);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test261() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.ReadOnlyVec var34 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var35.expireTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeout(var38);
    org.sat4j.minisat.constraints.cnf.UnitClause var40 = new org.sat4j.minisat.constraints.cnf.UnitClause(var38);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var41.expireTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeout(var44);
    boolean var46 = var41.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var47 = var41.getOrder();
    org.sat4j.tools.SolutionCounter var48 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var41);
    int var49 = var41.nVars();
    int var50 = var40.get(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var51 = var34.delete(var50);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9d650\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9d650\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b37537\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b37537\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);

  }

  public void test262() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    org.sat4j.minisat.restarts.ArminRestarts var25 = new org.sat4j.minisat.restarts.ArminRestarts();
    java.lang.String var26 = var25.toString();
    org.sat4j.minisat.core.SearchParams var27 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    var28.setTimeoutMs(0L);
    int var43 = var28.newVar();
    var27.setInitConflictBound(var43);
    var25.init(var27);
    var0.setRestartStrategy((org.sat4j.minisat.core.RestartStrategy)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@124e012\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@124e012\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Armin Biere (Picosat) restarts strategy"+ "'", var26.equals("Armin Biere (Picosat) restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@849f4d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@849f4d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);

  }

  public void test263() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    java.util.Collection var2 = var1.getConstraints();
    org.sat4j.core.VecInt var4 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var5 = var4.pop();
    org.sat4j.core.ReadOnlyVecInt var6 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var4);
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var6.indexOf((-1));
    org.sat4j.core.ReadOnlyVecInt var10 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test264() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    boolean var3 = var1.isSatisfiable();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.util.Collection var4 = var1.explain();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test265() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ConstrGroup var4 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var5 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var5.setSolver(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var10 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var8.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var10);
    var5.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var8);
    var4.removeFrom((org.sat4j.specs.ISolver)var8);
    org.sat4j.minisat.restarts.MiniSATRestarts var14 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var15 = var14.toString();
    var8.setLogPrefix(var15);
    org.sat4j.tools.DecisionTracing var17 = new org.sat4j.tools.DecisionTracing(var15);
    var17.beginLoop();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    int var24 = var19.getTimeout();
    var17.backtracking(var24);
    org.sat4j.tools.ConstrGroup var26 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var27 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var27.setSolver(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var32 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var30.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var32);
    var27.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var30);
    var26.removeFrom((org.sat4j.specs.ISolver)var30);
    org.sat4j.minisat.restarts.MiniSATRestarts var36 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var37 = var36.toString();
    var30.setLogPrefix(var37);
    org.sat4j.tools.DecisionTracing var39 = new org.sat4j.tools.DecisionTracing(var37);
    var39.beginLoop();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = var41.getTimeout();
    var39.backtracking(var46);
    var39.solutionFound();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var51 = new org.sat4j.minisat.constraints.cnf.UnitClause(var50);
    var39.assuming(var50);
    var17.conflictFound(var50);
    org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(100);
    int var56 = var55.size();
    var55.sort();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    int var63 = org.sat4j.core.LiteralsUtils.toInternal(var61);
    org.sat4j.specs.IVecInt var64 = var55.push(var63);
    var17.backjump(var63);
    org.sat4j.core.VecInt var67 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var68 = var67.pop();
    org.sat4j.core.ReadOnlyVecInt var69 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var67);
    org.sat4j.minisat.constraints.cnf.UnitClause var71 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var72 = var69.indexOf((-1));
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var75 = new org.sat4j.minisat.constraints.cnf.UnitClause(var74);
    var75.incActivity(10.0d);
    var17.propagating((-1), (org.sat4j.specs.IConstr)var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var79 = var3.removeConstr((org.sat4j.specs.IConstr)var75);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "MiniSAT restarts strategy"+ "'", var15.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "MiniSAT restarts strategy"+ "'", var37.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);

  }

  public void test266() throws Throwable {

    org.sat4j.tools.ConstrGroup var1 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup(true);
    var1.add((org.sat4j.specs.IConstr)var3);
    boolean var5 = var1.learnt();
    boolean var6 = var1.learnt();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test267() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.tools.ConstrGroup var24 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var26 = new org.sat4j.tools.ConstrGroup(true);
    var24.add((org.sat4j.specs.IConstr)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.unsafePush((java.lang.Object)var26);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1207db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1207db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test268() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int[] var24 = var21.findModel((org.sat4j.specs.IVecInt)var23);
    int[] var26 = new int[] { 10};
    var23.moveTo(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cee08e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cee08e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test269() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    java.lang.String var12 = var0.toString(var11);
    org.sat4j.core.VecInt var14 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    org.sat4j.minisat.core.IOrder var20 = var15.getOrder();
    java.lang.String var21 = var15.toString();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    var15.setTimeoutOnConflicts(var25);
    int var28 = org.sat4j.core.LiteralsUtils.posLit(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var29 = var0.addAtLeast((org.sat4j.specs.IVecInt)var14, var28);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@12bbb19\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@12bbb19\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11475db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1427db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var21.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1427db\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 4294966);

  }

  public void test270() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var6.expireTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeout(var9);
    boolean var11 = var6.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var12 = var6.getOrder();
    org.sat4j.tools.SolutionCounter var13 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var6);
    int var14 = var6.nVars();
    int var15 = var5.get(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var5.learnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);

  }

  public void test271() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Constr var5 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    org.sat4j.core.VecInt var7 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var8 = var7.pop();
    org.sat4j.core.ReadOnlyVecInt var9 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var7);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var10 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    org.sat4j.minisat.core.IOrder var17 = var12.getOrder();
    java.lang.String var18 = var12.toString();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    var12.setTimeoutOnConflicts(var22);
    org.sat4j.tools.ModelIterator var25 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var11, var22);
    var11.setTimeoutOnConflicts(0);
    var10.updateVar(0);
    int var29 = var9.unsafeGet(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var30 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var9);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@120eaa5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var18.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@120eaa5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test272() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b6f5c4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b6f5c4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1645d10\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1645d10\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@40eeac\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@40eeac\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12c59a3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12c59a3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);

  }

  public void test273() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    var3.varDecayActivity();
    int var5 = var3.numberOfInterestingVariables();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test274() throws Throwable {

    org.sat4j.specs.ISolver var0 = org.sat4j.minisat.SolverFactory.newDimacsOutput();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test275() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var35 = var33.isSatisfiable();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1419632\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1419632\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test276() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    var0.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);

  }

  public void test277() throws Throwable {

    org.sat4j.minisat.restarts.LubyRestarts var0 = new org.sat4j.minisat.restarts.LubyRestarts();

  }

  public void test278() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.specs.IteratorInt var41 = var21.iterator();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    boolean var63 = var57.isVerbose();
    int var64 = var42.nextFreeVarId(var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.shrink(var64);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1676c8e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1676c8e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1dcce8b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1dcce8b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@122e5be\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@122e5be\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);

  }

  public void test279() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    var3.setDBSimplificationAllowed(false);
    int[] var6 = var3.findModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test280() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    int var20 = var15.getTimeout();
    var13.backtracking(var20);
    var13.solutionFound();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var25 = new org.sat4j.minisat.constraints.cnf.UnitClause(var24);
    var13.assuming(var24);
    int[] var30 = new int[] { 0, 100, 1};
    var13.delete(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test281() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var1 = var0.isSatisfiable();
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var4 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var3);
    org.sat4j.specs.TimeoutException var5 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var4);
    java.lang.String var6 = var4.toString();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var7.expireTimeout();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var11 = var10.pop();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    boolean var29 = var26.isVerbose();
    boolean var30 = var7.isSatisfiable((org.sat4j.specs.IVecInt)var10, var29);
    java.util.Map var31 = var7.getStat();
    org.sat4j.tools.DotSearchTracing var32 = new org.sat4j.tools.DotSearchTracing(var6, var31);
    org.sat4j.tools.TextOutputTracing var33 = new org.sat4j.tools.TextOutputTracing(var31);
    var33.restarting();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var35.expireTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeout(var38);
    boolean var40 = var35.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var41 = var35.getOrder();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    org.sat4j.minisat.core.IOrder var48 = var43.getOrder();
    java.lang.String var49 = var43.toString();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    var43.setTimeoutOnConflicts(var53);
    org.sat4j.tools.ModelIterator var56 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var42, var53);
    var42.setTimeoutOnConflicts(0);
    var35.setExpectedNumberOfClauses(0);
    var33.backjump(0);
    int var61 = var0.newVar(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var6.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f95ccd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f95ccd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4adda9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var49.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4adda9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test282() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var23 = var22.learnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test283() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    org.sat4j.minisat.core.IOrder var21 = var16.getOrder();
    java.lang.String var22 = var16.toString();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    var16.setTimeoutOnConflicts(var26);
    org.sat4j.tools.ModelIterator var29 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var15, var26);
    boolean var31 = var29.isSatisfiable(true);
    boolean var32 = var29.isVerbose();
    org.sat4j.reader.InstanceReader var33 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var29);
    int var34 = var29.nConstraints();
    int[] var35 = var29.model();
    org.sat4j.tools.SolutionCounter var36 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var29);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    int[] var39 = var36.findModel((org.sat4j.specs.IVecInt)var38);
    int[] var40 = var0.findModel((org.sat4j.specs.IVecInt)var38);
    var38.sortUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15cf502\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15cf502\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ed6669\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ed6669\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test284() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var6 = var5.learnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);

  }

  public void test285() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var9, var20);
    boolean var25 = var23.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var26 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var23);
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var29 = var28.pop();
    org.sat4j.core.ReadOnlyVecInt var30 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var28);
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    org.sat4j.minisat.core.IOrder var37 = var32.getOrder();
    java.lang.String var38 = var32.toString();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    var32.setTimeoutOnConflicts(var42);
    org.sat4j.tools.ModelIterator var45 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var31, var42);
    boolean var47 = var45.isSatisfiable(true);
    boolean var48 = var45.isVerbose();
    boolean var49 = var23.isSatisfiable((org.sat4j.specs.IVecInt)var30, var48);
    boolean var50 = var30.isEmpty();
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    int var53 = var52.size();
    java.lang.String var54 = var52.toString();
    org.sat4j.core.VecInt var56 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var57 = var56.pop();
    org.sat4j.core.ReadOnlyVecInt var58 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var56);
    org.sat4j.minisat.constraints.cnf.UnitClause var60 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var61 = var58.indexOf((-1));
    boolean var62 = var52.contains((-1));
    org.sat4j.specs.IConstr var63 = var0.addAtLeast((org.sat4j.specs.IVecInt)var30, (-1));
    int[] var67 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(var67);
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var69.expireTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeout(var72);
    var68.ensure(var72);
    boolean var75 = var30.contains(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var76 = var30.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4eb05\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f4eb05\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1664e06\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1664e06\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f9a4f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var38.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f9a4f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test286() throws Throwable {

    org.sat4j.minisat.restarts.NoRestarts var0 = new org.sat4j.minisat.restarts.NoRestarts();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    var0.init(var1);
    long var7 = var0.nextRestartNumberOfConflict();
    var0.onRestart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9223372036854775807L);

  }

  public void test287() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    java.lang.String var1 = var0.toString();
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var4 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var3);
    org.sat4j.specs.TimeoutException var5 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var4);
    org.sat4j.specs.ContradictionException var6 = new org.sat4j.specs.ContradictionException(var1, (java.lang.Throwable)var4);
    org.sat4j.specs.TimeoutException var7 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Limit learning to clauses of size smaller or equal to 3"+ "'", var1.equals("Limit learning to clauses of size smaller or equal to 3"));

  }

  public void test288() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    org.sat4j.specs.SearchListener var25 = var0.getSearchListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ec731e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ec731e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test289() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    int var9 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.orders.PureOrder var10 = new org.sat4j.minisat.orders.PureOrder(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd858f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd858f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test290() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var26 = new org.sat4j.minisat.orders.RandomWalkDecorator(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    var27.setTimeoutMs(0L);
    int var42 = var27.newVar();
    double var43 = var26.varActivity(var42);
    int var44 = var18.indexOf(var42);
    int[] var45 = var18.toArray();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    org.sat4j.reader.LecteurDimacs var48 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var46);
    org.sat4j.opt.MaxSatDecorator var49 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var59 = new org.sat4j.minisat.orders.RandomWalkDecorator(var58);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    var60.setTimeoutMs(0L);
    int var75 = var60.newVar();
    double var76 = var59.varActivity(var75);
    int var77 = var51.indexOf(var75);
    var49.setExpectedNumberOfClauses(var75);
    org.sat4j.specs.IConstr var79 = var7.addAtLeast((org.sat4j.specs.IVecInt)var18, var75);
    var7.clearLearntClauses();
    java.lang.StringBuffer var81 = var7.getOut();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9f45d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c9f45d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@66d388\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@66d388\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1395fc5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1395fc5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test291() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    long var63 = var62.nextRestartNumberOfConflict();
    java.lang.String var64 = var62.toString();
    java.lang.String var65 = var62.toString();
    int var66 = var62.getFactor();
    var62.onRestart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1990848\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1990848\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b71c17\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b71c17\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "luby style (SATZ_rand, TiniSAT) restarts strategy with factor 0"+ "'", var64.equals("luby style (SATZ_rand, TiniSAT) restarts strategy with factor 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "luby style (SATZ_rand, TiniSAT) restarts strategy with factor 0"+ "'", var65.equals("luby style (SATZ_rand, TiniSAT) restarts strategy with factor 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test292() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var4 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    var5.setTimeoutOnConflicts(0);
    var4.updateVar(0);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var23 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var25 = var23.select(100);
    int var27 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var23.assignLiteral(var27);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.reader.LecteurDimacs var31 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var29);
    org.sat4j.tools.ExtendedDimacsArrayReader var32 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var29);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    var34.setTimeoutOnConflicts(var44);
    org.sat4j.tools.ModelIterator var47 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var33, var44);
    boolean var49 = var47.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var50 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var47);
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var53 = var52.pop();
    org.sat4j.core.ReadOnlyVecInt var54 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var52);
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeoutOnConflicts(var59);
    org.sat4j.minisat.core.IOrder var61 = var56.getOrder();
    java.lang.String var62 = var56.toString();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    var56.setTimeoutOnConflicts(var66);
    org.sat4j.tools.ModelIterator var69 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var55, var66);
    boolean var71 = var69.isSatisfiable(true);
    boolean var72 = var69.isVerbose();
    boolean var73 = var47.isSatisfiable((org.sat4j.specs.IVecInt)var54, var72);
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var77 = var76.getTimeout();
    var74.setTimeoutOnConflicts(var77);
    int var79 = org.sat4j.core.LiteralsUtils.toInternal(var77);
    int var80 = var54.indexOf(var79);
    org.sat4j.tools.ModelIterator var81 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var80);
    var4.init(var27, var80);
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    var83.setTimeoutOnConflicts(var86);
    int var88 = var83.nVars();
    org.sat4j.minisat.orders.PureOrder var89 = new org.sat4j.minisat.orders.PureOrder(var88);
    int var90 = var89.numberOfInterestingVariables();
    int var91 = var3.containsAt(var27, var90);
    int[] var94 = new int[] { (-1), 0};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.moveTo(var94);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bbaf0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@bbaf0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a1ac96\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a1ac96\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18e435a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var62.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18e435a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);

  }

  public void test293() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var19 = var18.pop();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var26 = new org.sat4j.minisat.orders.RandomWalkDecorator(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    var27.setTimeoutMs(0L);
    int var42 = var27.newVar();
    double var43 = var26.varActivity(var42);
    int var44 = var18.indexOf(var42);
    int[] var45 = var18.toArray();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    org.sat4j.reader.LecteurDimacs var48 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var46);
    org.sat4j.opt.MaxSatDecorator var49 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var59 = new org.sat4j.minisat.orders.RandomWalkDecorator(var58);
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    var60.setTimeoutMs(0L);
    int var75 = var60.newVar();
    double var76 = var59.varActivity(var75);
    int var77 = var51.indexOf(var75);
    var49.setExpectedNumberOfClauses(var75);
    org.sat4j.specs.IConstr var79 = var7.addAtLeast((org.sat4j.specs.IVecInt)var18, var75);
    var7.clearLearntClauses();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var81 = var7.findModel();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3bc0f5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3bc0f5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f951e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f951e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13489cb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13489cb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);

  }

  public void test294() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeout(var8);
    org.sat4j.minisat.constraints.cnf.UnitClause var10 = new org.sat4j.minisat.constraints.cnf.UnitClause(var8);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var11.expireTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeout(var14);
    boolean var16 = var11.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var17 = var11.getOrder();
    org.sat4j.tools.SolutionCounter var18 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var11);
    int var19 = var11.nVars();
    int var20 = var10.get(var19);
    org.sat4j.minisat.core.Pair var21 = new org.sat4j.minisat.core.Pair();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze((org.sat4j.minisat.core.Constr)var10, var21);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);

  }

  public void test295() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    java.lang.Object[] var34 = var33.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var35 = var33.last();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@513fe9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@513fe9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15adbd1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15adbd1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);

  }

  public void test296() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    var21.expireTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@140d129\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@140d129\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);

  }

  public void test297() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.tools.ConstrGroup var17 = new org.sat4j.tools.ConstrGroup();
    boolean var18 = var17.learnt();
    var7.setVerbose(var18);
    org.sat4j.tools.ConstrGroup var21 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var23 = new org.sat4j.tools.ConstrGroup(true);
    var21.add((org.sat4j.specs.IConstr)var23);
    boolean var25 = var21.learnt();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var7.isSatisfiable(var25);
      fail("Expected exception of type org.sat4j.specs.TimeoutException");
    } catch (org.sat4j.specs.TimeoutException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@207e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@207e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test298() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var22 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var22.setLearner((org.sat4j.minisat.core.Learner)var23);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var27 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var26);
    org.sat4j.reader.LecteurDimacs var28 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var26);
    org.sat4j.opt.MaxSatDecorator var29 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var26);
    var22.setUnitPropagationListener((org.sat4j.minisat.core.UnitPropagationListener)var26);
    var1.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test299() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    int var3 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var1.setInitConflictBound(10);
    var0.init(var1);
    var0.onRestart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 20);

  }

  public void test300() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var1 = var0.isSatisfiable();
    org.sat4j.reader.InstanceReader var2 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var0);
    int[] var5 = new int[] { 10, 10};
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var6 = var2.decode(var5);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test301() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var3 = var2.pop();
    org.sat4j.core.ReadOnlyVecInt var4 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.constraints.cnf.UnitClause var6 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var7 = var4.indexOf((-1));
    org.sat4j.core.ReadOnlyVecInt var8 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var9 = var0.createClause((org.sat4j.specs.IVecInt)var8);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test302() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.core.DefaultComparator var23 = new org.sat4j.core.DefaultComparator();
    var1.sort((java.util.Comparator)var23);
    java.lang.Object[] var25 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@28d052\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@28d052\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test303() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapRsatExpSimpLuby();
    org.sat4j.minisat.core.SolverStats var1 = var0.getStats();
    java.util.Map var2 = var1.toMap();
    var1.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test304() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    int var28 = var23.nVars();
    org.sat4j.minisat.orders.PureOrder var29 = new org.sat4j.minisat.orders.PureOrder(var28);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    var29.assignLiteral(var32);
    org.sat4j.minisat.core.ILits var34 = var29.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var35 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var29.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var38 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var37);
    org.sat4j.reader.LecteurDimacs var39 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var37);
    org.sat4j.opt.MaxSatDecorator var40 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var37);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var43 = var42.pop();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var50 = new org.sat4j.minisat.orders.RandomWalkDecorator(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    var51.setTimeoutOnConflicts(var61);
    var51.setTimeoutMs(0L);
    int var66 = var51.newVar();
    double var67 = var50.varActivity(var66);
    int var68 = var42.indexOf(var66);
    var40.setExpectedNumberOfClauses(var66);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var40.setExpectedNumberOfClauses(var73);
    double var76 = var29.varActivity(var73);
    var22.forwardActivity(var76);
    org.sat4j.minisat.constraints.cnf.UnitClause var79 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.SearchParams var80 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var82 = new org.sat4j.core.VecInt(100);
    int var83 = var82.size();
    var80.setInitConflictBound(var83);
    var80.setClaDecay(1.0d);
    var79.incActivity(1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.rescaleBy(1.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8fc2b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c8fc2b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);

  }

  public void test305() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    int var51 = var21.get(var50);
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var54 = new org.sat4j.minisat.constraints.cnf.UnitClause(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var55 = var21.unsafeGet(var53);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15035de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15035de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c18a89\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c18a89\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);

  }

  public void test306() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    org.sat4j.tools.TextOutputTracing var25 = new org.sat4j.tools.TextOutputTracing(var24);
    var25.start();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2f680b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2f680b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test307() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.String var76 = var74.toString();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var77.expireTimeout();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    var77.setTimeout(var80);
    org.sat4j.reader.DimacsReader var82 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var77);
    boolean var83 = var74.contains((java.lang.Object)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b36227\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b36227\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fda35c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fda35c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@41c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@41c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c2e08a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c2e08a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test308() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    boolean var3 = var1.isSatisfiable();
    java.util.Map var4 = var1.getStat();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test309() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.tools.SingleSolutionDetector var7 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.Vec var9 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    org.sat4j.reader.InstanceReader var28 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var24);
    int var29 = var24.nConstraints();
    var9.ensure(var29);
    org.sat4j.core.VecInt var32 = new org.sat4j.core.VecInt(100);
    int var33 = var32.size();
    java.lang.String var34 = var32.toString();
    org.sat4j.core.VecInt var36 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var37 = var36.pop();
    org.sat4j.core.ReadOnlyVecInt var38 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var36);
    org.sat4j.minisat.constraints.cnf.UnitClause var40 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var41 = var38.indexOf((-1));
    boolean var42 = var32.contains((-1));
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    int var48 = org.sat4j.core.LiteralsUtils.toInternal(var46);
    int var49 = var32.indexOf(var46);
    boolean var50 = var32.isEmpty();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var51 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    java.lang.String var59 = var53.toString();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    var53.setTimeoutOnConflicts(var63);
    org.sat4j.tools.ModelIterator var66 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var52, var63);
    var52.setTimeoutOnConflicts(0);
    var51.updateVar(0);
    var32.shrinkTo(0);
    var9.shrink(0);
    var7.setTimeoutOnConflicts(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f18565\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f18565\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10dc6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10dc6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1065f96\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var59.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1065f96\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);

  }

  public void test310() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    int[] var38 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeout(var43);
    var39.ensure(var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    var39.pushAll(var47);
    int[] var49 = var33.findModel((org.sat4j.specs.IVecInt)var39);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.core.ReadOnlyVecInt var53 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var51);
    org.sat4j.minisat.constraints.cnf.UnitClause var55 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var56 = var53.indexOf((-1));
    org.sat4j.core.VecInt var58 = new org.sat4j.core.VecInt(100);
    int var59 = var58.size();
    var58.sort();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeoutOnConflicts(var64);
    int var66 = org.sat4j.core.LiteralsUtils.toInternal(var64);
    org.sat4j.specs.IVecInt var67 = var58.push(var66);
    boolean var68 = var53.contains(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var69 = var33.isSatisfiable(var68);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1060f37\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1060f37\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test311() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var16 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var17 = var16.size();
    var16.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    org.sat4j.minisat.core.IOrder var27 = var22.getOrder();
    java.lang.String var28 = var22.toString();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    var22.setTimeoutOnConflicts(var32);
    org.sat4j.tools.ModelIterator var35 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var21, var32);
    boolean var37 = var35.isSatisfiable(true);
    boolean var38 = var35.isVerbose();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    org.sat4j.reader.InstanceReader var57 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var53);
    int var58 = var53.nConstraints();
    boolean var59 = var53.isVerbose();
    boolean var60 = var53.isDBSimplificationAllowed();
    int var61 = var35.nextFreeVarId(var60);
    var13.conflictFound((org.sat4j.specs.IConstr)var16, (-1), var61);
    org.sat4j.minisat.restarts.NoRestarts var63 = new org.sat4j.minisat.restarts.NoRestarts();
    org.sat4j.minisat.core.SearchParams var64 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var66 = new org.sat4j.core.VecInt(100);
    int var67 = var66.size();
    var64.setInitConflictBound(var67);
    var63.init(var64);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var70.setClaDecay(1.0d);
    var64.setVarDecay(1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.rescaleBy(1.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1da267c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var28.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1da267c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@31c2df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@31c2df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test312() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    org.sat4j.tools.TextOutputTracing var25 = new org.sat4j.tools.TextOutputTracing(var24);
    var25.beginLoop();
    int[] var30 = new int[] { 10, 1, (-1)};
    var25.delete(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18ff913\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18ff913\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test313() throws Throwable {

    org.sat4j.tools.xplain.QuickXplainStrategy var0 = new org.sat4j.tools.xplain.QuickXplainStrategy();
    var0.cancelExplanationComputation();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var2.setLearner((org.sat4j.minisat.core.Learner)var3);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    var6.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, 0);
    var3.clearLearntClauses();
    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var25 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var32 = new org.sat4j.minisat.orders.RandomWalkDecorator(var31);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    var33.setTimeoutMs(0L);
    int var48 = var33.newVar();
    double var49 = var32.varActivity(var48);
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var25, (org.sat4j.minisat.core.IOrder)var32);
    var50.expireTimeout();
    java.util.Map var52 = var50.getStat();
    org.sat4j.core.VecInt var54 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var55 = var54.pop();
    org.sat4j.core.ReadOnlyVecInt var56 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var54);
    org.sat4j.minisat.constraints.cnf.UnitClause var58 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var59 = var56.indexOf((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var60 = var0.explain((org.sat4j.specs.ISolver)var3, var52, (org.sat4j.specs.IVecInt)var56);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1270693\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1270693\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1449255\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1449255\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));

  }

  public void test314() throws Throwable {

    org.sat4j.LightFactory var0 = org.sat4j.LightFactory.instance();
    org.sat4j.specs.ISolver var1 = var0.defaultSolver();
    java.lang.String[] var2 = var0.solverNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test315() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    int var3 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var1.setInitConflictBound(10);
    var0.init(var1);
    double var6 = var1.getVarDecay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.95d);

  }

  public void test316() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    int[] var38 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeout(var43);
    var39.ensure(var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    var39.pushAll(var47);
    int[] var49 = var33.findModel((org.sat4j.specs.IVecInt)var39);
    org.sat4j.opt.MinOneDecorator var50 = new org.sat4j.opt.MinOneDecorator((org.sat4j.specs.ISolver)var33);
    int[] var51 = var33.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d0fa91\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d0fa91\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test317() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimpNoRestarts();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var1 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var2.expireTimeout();
    var1.setLearner((org.sat4j.minisat.core.Learner)var2);
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    int var7 = var6.size();
    var6.sort();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    int var11 = var10.size();
    java.lang.String var12 = var10.toString();
    org.sat4j.core.VecInt var14 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var15 = var14.pop();
    org.sat4j.core.ReadOnlyVecInt var16 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var14);
    org.sat4j.minisat.constraints.cnf.UnitClause var18 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var19 = var16.indexOf((-1));
    boolean var20 = var10.contains((-1));
    var6.pushAll((org.sat4j.specs.IVecInt)var10);
    boolean var22 = var2.isSatisfiable((org.sat4j.specs.IVecInt)var6);
    org.sat4j.minisat.constraints.cnf.UnitClauses var23 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var6);
    org.sat4j.minisat.core.Pair var24 = new org.sat4j.minisat.core.Pair();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze((org.sat4j.minisat.core.Constr)var23, var24);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test318() throws Throwable {

    org.sat4j.minisat.orders.PureOrder var0 = new org.sat4j.minisat.orders.PureOrder();

  }

  public void test319() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.core.VecInt var63 = new org.sat4j.core.VecInt(100);
    var0.updateVar(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12e0cf3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12e0cf3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3d2891\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3d2891\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);

  }

  public void test320() throws Throwable {

    double[] var2 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.core.Vec var5 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    boolean var22 = var20.isSatisfiable(true);
    boolean var23 = var20.isVerbose();
    org.sat4j.reader.InstanceReader var24 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var20);
    int var25 = var20.nConstraints();
    var5.ensure(var25);
    boolean var27 = var3.inHeap(var25);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.tools.DimacsArrayReader var29 = new org.sat4j.tools.DimacsArrayReader((org.sat4j.specs.ISolver)var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeout(var33);
    boolean var35 = var30.isDBSimplificationAllowed();
    int var36 = var28.nextFreeVarId(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.increase(var36);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bfc832\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1bfc832\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);

  }

  public void test321() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.tools.ConstrGroup var17 = new org.sat4j.tools.ConstrGroup();
    boolean var18 = var17.learnt();
    var7.setVerbose(var18);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var20 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var21 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int var24 = var23.size();
    var21.setInitConflictBound(var24);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var28 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var29 = var28.size();
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    org.sat4j.tools.ModelIterator var46 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var32, var43);
    boolean var48 = var46.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var49 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.core.ReadOnlyVecInt var53 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var51);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    org.sat4j.minisat.core.IOrder var60 = var55.getOrder();
    java.lang.String var61 = var55.toString();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    var55.setTimeoutOnConflicts(var65);
    org.sat4j.tools.ModelIterator var68 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var54, var65);
    boolean var70 = var68.isSatisfiable(true);
    boolean var71 = var68.isVerbose();
    boolean var72 = var46.isSatisfiable((org.sat4j.specs.IVecInt)var53, var71);
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    var73.setTimeoutOnConflicts(var76);
    int var78 = org.sat4j.core.LiteralsUtils.toInternal(var76);
    int var79 = var53.indexOf(var78);
    org.sat4j.specs.IVecInt var80 = var26.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var28, (org.sat4j.specs.IVecInt)var31, var79);
    var20.init(var24, var79);
    int var82 = var7.newVar(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@db8e99\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@db8e99\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1019b35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1019b35\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ff0d0c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var61.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ff0d0c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));

  }

  public void test322() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var2 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var2);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var5 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var6 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.setInitConflictBound(var9);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var13 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var14 = var13.size();
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    org.sat4j.minisat.core.IOrder var23 = var18.getOrder();
    java.lang.String var24 = var18.toString();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    var18.setTimeoutOnConflicts(var28);
    org.sat4j.tools.ModelIterator var31 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var17, var28);
    boolean var33 = var31.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var34 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var31);
    org.sat4j.core.VecInt var36 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var37 = var36.pop();
    org.sat4j.core.ReadOnlyVecInt var38 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var36);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    boolean var57 = var31.isSatisfiable((org.sat4j.specs.IVecInt)var38, var56);
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    int var63 = org.sat4j.core.LiteralsUtils.toInternal(var61);
    int var64 = var38.indexOf(var63);
    org.sat4j.specs.IVecInt var65 = var11.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var13, (org.sat4j.specs.IVecInt)var16, var64);
    var5.init(var9, var64);
    org.sat4j.minisat.restarts.LubyRestarts var67 = new org.sat4j.minisat.restarts.LubyRestarts(var9);
    var2.conflictDetectedInWatchesFor(100, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@31a24a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var24.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@31a24a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d63d6a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d63d6a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);

  }

  public void test323() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    boolean var61 = var60.simplify();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a852f0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a852f0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test324() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.tools.SingleSolutionDetector var1 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    var2.setTimeoutMs(0L);
    var1.setTimeoutMs(0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var1.hasASingleSolution();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19b6698\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19b6698\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);

  }

  public void test325() throws Throwable {

    org.sat4j.LightFactory var0 = new org.sat4j.LightFactory();

  }

  public void test326() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.reader.DimacsReader var5 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var0);
    int[] var7 = new int[] { (-1)};
    java.lang.String var8 = var5.decode(var7);
    var5.disableNumberOfConstraintCheck();
    var5.disableNumberOfConstraintCheck();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.tools.DimacsArrayReader var12 = new org.sat4j.tools.DimacsArrayReader((org.sat4j.specs.ISolver)var11);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var13.expireTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeout(var16);
    boolean var18 = var13.isDBSimplificationAllowed();
    int var19 = var11.nextFreeVarId(var18);
    var5.setVerbosity(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "-1 0"+ "'", var8.equals("-1 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test327() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.setTimeoutOnConflicts(var17);
    int[] var19 = var14.findModel();
    org.sat4j.core.VecInt var21 = new org.sat4j.core.VecInt(100);
    int var22 = var21.size();
    var21.sort();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    int var29 = org.sat4j.core.LiteralsUtils.toInternal(var27);
    org.sat4j.specs.IVecInt var30 = var21.push(var29);
    double[] var33 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var34 = new org.sat4j.minisat.core.Heap(var33);
    org.sat4j.core.Vec var36 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    org.sat4j.minisat.core.IOrder var43 = var38.getOrder();
    java.lang.String var44 = var38.toString();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    var38.setTimeoutOnConflicts(var48);
    org.sat4j.tools.ModelIterator var51 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var37, var48);
    boolean var53 = var51.isSatisfiable(true);
    boolean var54 = var51.isVerbose();
    org.sat4j.reader.InstanceReader var55 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var51);
    int var56 = var51.nConstraints();
    var36.ensure(var56);
    boolean var58 = var34.inHeap(var56);
    org.sat4j.specs.IVecInt var59 = var21.push(var56);
    org.sat4j.specs.IConstr var60 = var14.addBlockingClause((org.sat4j.specs.IVecInt)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15aa6d9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15aa6d9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7e83df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var44.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7e83df\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);

  }

  public void test328() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var1 = var0.isSatisfiable();
    org.sat4j.reader.InstanceReader var2 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var0);
    int[] var5 = new int[] { 1, 10};
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var6 = var2.decode(var5);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test329() throws Throwable {

    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var0 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.sat4j.tools.ConflictLevelTracing var3 = new org.sat4j.tools.ConflictLevelTracing(var2);
    org.sat4j.minisat.learning.FixedLengthLearning var4 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var4.setSolver(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var7.expireTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeout(var10);
    var4.setSolver(var7);
    org.sat4j.specs.IVecInt var13 = var7.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var14 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var7);
    org.sat4j.tools.GateTranslator var15 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var7);
    org.sat4j.specs.SearchListener var16 = var15.getSearchListener();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var22 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var32 = new org.sat4j.minisat.orders.RandomWalkDecorator(var31);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    var33.setTimeoutMs(0L);
    int var48 = var33.newVar();
    double var49 = var32.varActivity(var48);
    int var50 = var24.indexOf(var48);
    var22.assignLiteral(var50);
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    var52.setTimeoutOnConflicts(var55);
    int var57 = org.sat4j.core.LiteralsUtils.toInternal(var55);
    var15.halfAdderSum(var20, var50, var55);
    var3.adding(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "phase appearing in latest learned clause"+ "'", var1.equals("phase appearing in latest learned clause"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "phase appearing in latest learned clause"+ "'", var2.equals("phase appearing in latest learned clause"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d181d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d181d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4294966);

  }

  public void test330() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.reader.LecteurDimacs var4 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var2);
    org.sat4j.tools.ExtendedDimacsArrayReader var5 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var2);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    boolean var22 = var20.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var23 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var20);
    org.sat4j.core.VecInt var25 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var26 = var25.pop();
    org.sat4j.core.ReadOnlyVecInt var27 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var25);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    org.sat4j.tools.ModelIterator var42 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var28, var39);
    boolean var44 = var42.isSatisfiable(true);
    boolean var45 = var42.isVerbose();
    boolean var46 = var20.isSatisfiable((org.sat4j.specs.IVecInt)var27, var45);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    int var52 = org.sat4j.core.LiteralsUtils.toInternal(var50);
    int var53 = var27.indexOf(var52);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var53);
    org.sat4j.minisat.learning.PercentLengthLearning var55 = new org.sat4j.minisat.learning.PercentLengthLearning(var53);
    var0.setLearner((org.sat4j.minisat.core.LearningStrategy)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@69e8bc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@69e8bc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1474776\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1474776\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));

  }

  public void test331() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    int var2 = var1.size();
    var1.sort();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    boolean var9 = var4.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var10 = var4.getOrder();
    org.sat4j.tools.SolutionCounter var11 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var4);
    int var12 = var4.nVars();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var13 = var1.delete(var12);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test332() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var42 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var41);
    org.sat4j.core.VecInt var44 = new org.sat4j.core.VecInt(100);
    int var45 = var44.size();
    var44.sort();
    int[] var47 = var44.toArray();
    int[] var48 = var41.findModel((org.sat4j.specs.IVecInt)var44);
    double[] var51 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var52 = new org.sat4j.minisat.core.Heap(var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    org.sat4j.minisat.core.IOrder var58 = var53.getOrder();
    java.lang.String var59 = var53.toString();
    var53.setTimeoutOnConflicts(0);
    int var62 = org.sat4j.core.LiteralsUtils.posLit(0);
    var52.insert(0);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    org.sat4j.minisat.core.IOrder var70 = var65.getOrder();
    java.lang.String var71 = var65.toString();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeoutOnConflicts(var75);
    var65.setTimeoutOnConflicts(var75);
    org.sat4j.tools.ModelIterator var78 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var64, var75);
    var64.setTimeoutOnConflicts(0);
    int var81 = var44.containsAt(0, 0);
    boolean var82 = var40.isSatisfiable((org.sat4j.specs.IVecInt)var44);
    org.sat4j.minisat.core.Constr var83 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b37ac1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b37ac1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ac1194\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ac1194\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6e17bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var59.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6e17bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f74da2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var71.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f74da2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);

  }

  public void test333() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    var1.clearLearntClauses();
    var1.clearLearntClauses();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e43847\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e43847\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);

  }

  public void test334() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    var7.setTimeoutMs(0L);
    int var22 = var7.newVar();
    double var23 = var6.varActivity(var22);
    var6.setVarDecay(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a1a551\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a1a551\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);

  }

  public void test335() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    var13.beginLoop();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));

  }

  public void test336() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    var60.register();
    var60.register();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var63 = var60.locked();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@32ec1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@32ec1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);

  }

  public void test337() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    boolean var3 = var1.isSatisfiable();
    boolean var4 = var1.isSatisfiable();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = var5.nVars();
    org.sat4j.minisat.orders.PureOrder var11 = new org.sat4j.minisat.orders.PureOrder(var10);
    org.sat4j.tools.DimacsStringSolver var12 = new org.sat4j.tools.DimacsStringSolver(var10);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.specs.IVecInt var20 = var13.getOutLearnt();
    org.sat4j.specs.IConstr var21 = var12.addClause(var20);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var24 = var23.pop();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    org.sat4j.minisat.core.IOrder var30 = var25.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var31 = new org.sat4j.minisat.orders.RandomWalkDecorator(var30);
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    org.sat4j.minisat.core.IOrder var37 = var32.getOrder();
    java.lang.String var38 = var32.toString();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    var32.setTimeoutOnConflicts(var42);
    var32.setTimeoutMs(0L);
    int var47 = var32.newVar();
    double var48 = var31.varActivity(var47);
    int var49 = var23.indexOf(var47);
    int[] var50 = var23.toArray();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var52 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var51);
    org.sat4j.reader.LecteurDimacs var53 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var51);
    org.sat4j.opt.MaxSatDecorator var54 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var51);
    org.sat4j.core.VecInt var56 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var57 = var56.pop();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var64 = new org.sat4j.minisat.orders.RandomWalkDecorator(var63);
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    org.sat4j.minisat.core.IOrder var70 = var65.getOrder();
    java.lang.String var71 = var65.toString();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeoutOnConflicts(var75);
    var65.setTimeoutOnConflicts(var75);
    var65.setTimeoutMs(0L);
    int var80 = var65.newVar();
    double var81 = var64.varActivity(var80);
    int var82 = var56.indexOf(var80);
    var54.setExpectedNumberOfClauses(var80);
    org.sat4j.specs.IConstr var84 = var12.addAtLeast((org.sat4j.specs.IVecInt)var23, var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var85 = var1.addClause((org.sat4j.specs.IVecInt)var23);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e227dd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e227dd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@56bdfe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var38.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@56bdfe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@76827\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var71.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@76827\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);

  }

  public void test338() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    int var7 = var6.size();
    var6.sort();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    int var14 = org.sat4j.core.LiteralsUtils.toInternal(var12);
    org.sat4j.specs.IVecInt var15 = var6.push(var14);
    double[] var18 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var19 = new org.sat4j.minisat.core.Heap(var18);
    org.sat4j.core.Vec var21 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    org.sat4j.reader.InstanceReader var40 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var36);
    int var41 = var36.nConstraints();
    var21.ensure(var41);
    boolean var43 = var19.inHeap(var41);
    org.sat4j.specs.IVecInt var44 = var6.push(var41);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    org.sat4j.minisat.core.IOrder var51 = var46.getOrder();
    java.lang.String var52 = var46.toString();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    var46.setTimeoutOnConflicts(var56);
    org.sat4j.tools.ModelIterator var59 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var45, var56);
    boolean var61 = var59.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var62 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var59);
    org.sat4j.core.VecInt var64 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var65 = var64.pop();
    org.sat4j.core.ReadOnlyVecInt var66 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var64);
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    org.sat4j.minisat.core.IOrder var73 = var68.getOrder();
    java.lang.String var74 = var68.toString();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    var75.setTimeoutOnConflicts(var78);
    var68.setTimeoutOnConflicts(var78);
    org.sat4j.tools.ModelIterator var81 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var67, var78);
    boolean var83 = var81.isSatisfiable(true);
    boolean var84 = var81.isVerbose();
    boolean var85 = var59.isSatisfiable((org.sat4j.specs.IVecInt)var66, var84);
    org.sat4j.minisat.core.Solver var86 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var87 = var86.getTimeout();
    org.sat4j.minisat.core.Solver var88 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var89 = var88.getTimeout();
    var86.setTimeoutOnConflicts(var89);
    int var91 = org.sat4j.core.LiteralsUtils.toInternal(var89);
    int var92 = var66.indexOf(var91);
    org.sat4j.core.VecInt var94 = new org.sat4j.core.VecInt(100);
    int var95 = var94.size();
    int var96 = var66.get(var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.growTo(var41, var96);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a092d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a092d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1441cd4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var52.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1441cd4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@532db4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var74.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@532db4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test339() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    org.sat4j.core.ReadOnlyVecInt var7 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var3);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    var9.setTimeoutOnConflicts(var19);
    org.sat4j.tools.ModelIterator var22 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var8, var19);
    boolean var24 = var22.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var25 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var22);
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.core.ReadOnlyVecInt var29 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var27);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    org.sat4j.minisat.core.IOrder var36 = var31.getOrder();
    java.lang.String var37 = var31.toString();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    var31.setTimeoutOnConflicts(var41);
    org.sat4j.tools.ModelIterator var44 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var30, var41);
    boolean var46 = var44.isSatisfiable(true);
    boolean var47 = var44.isVerbose();
    boolean var48 = var22.isSatisfiable((org.sat4j.specs.IVecInt)var29, var47);
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    int var54 = org.sat4j.core.LiteralsUtils.toInternal(var52);
    int var55 = var29.indexOf(var54);
    int var56 = var3.containsAt(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10a437b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10a437b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@152ca9f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var37.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@152ca9f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));

  }

  public void test340() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    var60.register();
    int var62 = var60.size();
    boolean var63 = var60.simplify();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a0f8bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a0f8bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test341() throws Throwable {

    org.sat4j.core.DefaultComparator var0 = new org.sat4j.core.DefaultComparator();
    org.sat4j.core.Vec var2 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    var4.setTimeoutOnConflicts(var14);
    org.sat4j.tools.ModelIterator var17 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var14);
    boolean var19 = var17.isSatisfiable(true);
    boolean var20 = var17.isVerbose();
    org.sat4j.reader.InstanceReader var21 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var17);
    int var22 = var17.nConstraints();
    var2.ensure(var22);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    org.sat4j.minisat.core.IOrder var29 = var24.getOrder();
    java.lang.String var30 = var24.toString();
    var24.setTimeoutOnConflicts(0);
    var2.shrink(0);
    org.sat4j.core.ReadOnlyVec var34 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var2);
    java.lang.Object[] var35 = var34.toArray();
    boolean var36 = var34.isEmpty();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var37 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var37.setLearner((org.sat4j.minisat.core.Learner)var38);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    var41.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var58 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var38, 0);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var59 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var60.expireTimeout();
    var59.setLearner((org.sat4j.minisat.core.Learner)var60);
    org.sat4j.core.VecInt var64 = new org.sat4j.core.VecInt(100);
    int var65 = var64.size();
    var64.sort();
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(100);
    int var69 = var68.size();
    java.lang.String var70 = var68.toString();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var73 = var72.pop();
    org.sat4j.core.ReadOnlyVecInt var74 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var72);
    org.sat4j.minisat.constraints.cnf.UnitClause var76 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var77 = var74.indexOf((-1));
    boolean var78 = var68.contains((-1));
    var64.pushAll((org.sat4j.specs.IVecInt)var68);
    boolean var80 = var60.isSatisfiable((org.sat4j.specs.IVecInt)var64);
    boolean var81 = var58.isSatisfiable((org.sat4j.specs.IVecInt)var64);
    int var82 = var0.compare((java.lang.Comparable)var36, (java.lang.Comparable)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c3ef0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c3ef0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@301f6d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var30.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@301f6d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@88e624\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@88e624\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);

  }

  public void test342() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    var62.onRestart();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var64.expireTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeout(var67);
    var62.setFactor(var67);
    var62.onRestart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@236bdc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@236bdc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14d1739\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14d1739\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);

  }

  public void test343() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    var0.setTimeoutOnConflicts(var10);
    var0.setTimeoutMs(0L);
    int var15 = var0.newVar();
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var18 = var17.pop();
    org.sat4j.core.ReadOnlyVecInt var19 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.constraints.cnf.UnitClause var21 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var22 = var19.indexOf((-1));
    org.sat4j.specs.IConstr var24 = var0.addAtLeast((org.sat4j.specs.IVecInt)var19, 0);
    org.sat4j.core.VecInt var26 = new org.sat4j.core.VecInt(100);
    int[] var27 = new int[] { };
    var26.moveTo(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.moveTo((org.sat4j.specs.IVecInt)var26);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15ec5e8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15ec5e8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test344() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    org.sat4j.core.VecInt var18 = new org.sat4j.core.VecInt(100);
    boolean var19 = var16.isSatisfiable((org.sat4j.specs.IVecInt)var18);
    var1.insertFirst((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b87f27\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b87f27\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test345() throws Throwable {

    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var3 = new org.sat4j.minisat.constraints.cnf.UnitClause(var2);
    var0.init(var2);
    java.lang.String var5 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "random phase selection"+ "'", var5.equals("random phase selection"));

  }

  public void test346() throws Throwable {

    org.sat4j.minisat.restarts.MiniSATRestarts var0 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var1 = var0.toString();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.onRestart();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test347() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    boolean var61 = var60.learnt();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4af9a6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4af9a6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test348() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var3 = var2.pop();
    org.sat4j.core.ReadOnlyVecInt var4 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.constraints.cnf.UnitClause var6 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var7 = var4.indexOf((-1));
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    int var13 = var8.nVars();
    org.sat4j.minisat.orders.PureOrder var14 = new org.sat4j.minisat.orders.PureOrder(var13);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.assignLiteral(var17);
    org.sat4j.minisat.core.ILits var19 = var14.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var20 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var14.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var20);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var23 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var22);
    org.sat4j.reader.LecteurDimacs var24 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var22);
    org.sat4j.opt.MaxSatDecorator var25 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var22);
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var35 = new org.sat4j.minisat.orders.RandomWalkDecorator(var34);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    var36.setTimeoutMs(0L);
    int var51 = var36.newVar();
    double var52 = var35.varActivity(var51);
    int var53 = var27.indexOf(var51);
    var25.setExpectedNumberOfClauses(var51);
    org.sat4j.minisat.core.SearchParams var55 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var57 = new org.sat4j.core.VecInt(100);
    int var58 = var57.size();
    var55.setInitConflictBound(var58);
    var25.setExpectedNumberOfClauses(var58);
    double var61 = var14.varActivity(var58);
    int var62 = var4.unsafeGet(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var63 = var0.createClause((org.sat4j.specs.IVecInt)var4);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e0247\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e0247\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test349() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    var34.setTimeoutOnConflicts(0);
    int var43 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var44 = new org.sat4j.minisat.learning.PercentLengthLearning(var43);
    int var45 = var44.getLimit();
    var3.setExpectedNumberOfClauses(var45);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var47.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var47.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var53 = var52.pop();
    org.sat4j.core.ReadOnlyVecInt var54 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var52);
    org.sat4j.core.VecInt var56 = new org.sat4j.core.VecInt(100);
    int var57 = var56.size();
    org.sat4j.minisat.core.Constr var58 = var49.createCardinalityConstraint((org.sat4j.specs.IVecInt)var52, var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var59 = var3.admitABetterSolution((org.sat4j.specs.IVecInt)var52);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11654e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11654e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@897d7d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@897d7d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test350() throws Throwable {

    double[] var2 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var3.getmin();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test351() throws Throwable {

    double[] var2 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    var3.insert(0);
    boolean var15 = var3.empty();
    boolean var16 = var3.empty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@55d128\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@55d128\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test352() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    int var7 = var6.numberOfInterestingVariables();
    int var8 = var6.numberOfInterestingVariables();
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var9 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var11 = var9.select(100);
    var6.setPeriod(var11);
    org.sat4j.minisat.learning.FixedLengthLearning var13 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var13.setSolver(var14);
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var16.expireTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeout(var19);
    var13.setSolver(var16);
    org.sat4j.specs.IVecInt var22 = var16.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var23 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var16);
    org.sat4j.tools.GateTranslator var24 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var16);
    org.sat4j.specs.SearchListener var25 = var24.getSearchListener();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var31 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var41 = new org.sat4j.minisat.orders.RandomWalkDecorator(var40);
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    var42.setTimeoutMs(0L);
    int var57 = var42.newVar();
    double var58 = var41.varActivity(var57);
    int var59 = var33.indexOf(var57);
    var31.assignLiteral(var59);
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeoutOnConflicts(var64);
    int var66 = org.sat4j.core.LiteralsUtils.toInternal(var64);
    var24.halfAdderSum(var29, var59, var64);
    org.sat4j.core.VecInt var68 = new org.sat4j.core.VecInt(var11, var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a7333c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a7333c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 4294966);

  }

  public void test353() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    java.lang.Object[] var34 = var33.toArray();
    boolean var35 = var33.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a8c6de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a8c6de\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e34498\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e34498\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test354() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    boolean var23 = var1.isEmpty();
    java.lang.String var24 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be83ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be83ae\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));

  }

  public void test355() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    java.lang.String var22 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60648\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60648\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f23fbc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f23fbc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nNo reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test356() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var35 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var34);
    org.sat4j.reader.LecteurDimacs var36 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var34);
    org.sat4j.opt.MaxSatDecorator var37 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var34);
    var37.setDBSimplificationAllowed(false);
    java.lang.Number var40 = var37.getObjectiveValue();
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var41 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var43 = var41.select(100);
    var37.forceObjectiveValueTo((java.lang.Number)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var45 = var33.get(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@155d7fc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@155d7fc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6ab79c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6ab79c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 0+ "'", var40.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 201);

  }

  public void test357() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var7 = new org.sat4j.minisat.orders.RandomWalkDecorator(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    var8.setTimeoutMs(0L);
    int var23 = var8.newVar();
    double var24 = var7.varActivity(var23);
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var0, (org.sat4j.minisat.core.IOrder)var7);
    var25.expireTimeout();
    java.lang.String var27 = var25.getLogPrefix();
    org.sat4j.specs.TimeoutException var28 = new org.sat4j.specs.TimeoutException(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@765b23\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@765b23\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "c "+ "'", var27.equals("c "));

  }

  public void test358() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    int var7 = var3.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var8 = var3.pop();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test359() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    org.sat4j.tools.ConstrGroup var17 = new org.sat4j.tools.ConstrGroup();
    boolean var18 = var17.learnt();
    var7.setVerbose(var18);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var20 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var21 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int var24 = var23.size();
    var21.setInitConflictBound(var24);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var28 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var29 = var28.size();
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    org.sat4j.tools.ModelIterator var46 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var32, var43);
    boolean var48 = var46.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var49 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.core.ReadOnlyVecInt var53 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var51);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    org.sat4j.minisat.core.IOrder var60 = var55.getOrder();
    java.lang.String var61 = var55.toString();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    var55.setTimeoutOnConflicts(var65);
    org.sat4j.tools.ModelIterator var68 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var54, var65);
    boolean var70 = var68.isSatisfiable(true);
    boolean var71 = var68.isVerbose();
    boolean var72 = var46.isSatisfiable((org.sat4j.specs.IVecInt)var53, var71);
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    var73.setTimeoutOnConflicts(var76);
    int var78 = org.sat4j.core.LiteralsUtils.toInternal(var76);
    int var79 = var53.indexOf(var78);
    org.sat4j.specs.IVecInt var80 = var26.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var28, (org.sat4j.specs.IVecInt)var31, var79);
    var20.init(var24, var79);
    var7.setExpectedNumberOfClauses(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a587da\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a587da\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1335902\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1335902\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1183fe3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var61.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1183fe3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test360() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    var7.setTimeoutMs(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1edaaef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1edaaef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test361() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var5 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var3.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var5);
    var0.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var3);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    var0.setSolver(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test362() throws Throwable {

    double[] var2 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    var3.insert(0);
    boolean var15 = var3.empty();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    int var21 = var16.nVars();
    org.sat4j.minisat.orders.PureOrder var22 = new org.sat4j.minisat.orders.PureOrder(var21);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    int var25 = var24.size();
    var22.assignLiteral(var25);
    org.sat4j.minisat.core.ILits var27 = var22.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var28 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var22.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var31 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var30);
    org.sat4j.reader.LecteurDimacs var32 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var30);
    org.sat4j.opt.MaxSatDecorator var33 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var30);
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var36 = var35.pop();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var43 = new org.sat4j.minisat.orders.RandomWalkDecorator(var42);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    var44.setTimeoutMs(0L);
    int var59 = var44.newVar();
    double var60 = var43.varActivity(var59);
    int var61 = var35.indexOf(var59);
    var33.setExpectedNumberOfClauses(var59);
    org.sat4j.minisat.core.SearchParams var63 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var65 = new org.sat4j.core.VecInt(100);
    int var66 = var65.size();
    var63.setInitConflictBound(var66);
    var33.setExpectedNumberOfClauses(var66);
    double var69 = var22.varActivity(var66);
    org.sat4j.tools.ConstrGroup var70 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var71 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var71.setSolver(var72);
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var74.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var76 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var74.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var76);
    var71.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var74);
    var70.removeFrom((org.sat4j.specs.ISolver)var74);
    org.sat4j.minisat.restarts.MiniSATRestarts var80 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var81 = var80.toString();
    var74.setLogPrefix(var81);
    org.sat4j.tools.DecisionTracing var83 = new org.sat4j.tools.DecisionTracing(var81);
    var83.beginLoop();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    org.sat4j.minisat.core.Solver var87 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var88 = var87.getTimeout();
    var85.setTimeoutOnConflicts(var88);
    int var90 = var85.getTimeout();
    var83.backtracking(var90);
    var22.setPeriod(var90);
    boolean var93 = var3.heapProperty(var90);
    org.sat4j.core.VecInt var95 = new org.sat4j.core.VecInt(100);
    boolean var96 = var3.heapProperty(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@164fa21\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@164fa21\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@123bd82\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@123bd82\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "MiniSAT restarts strategy"+ "'", var81.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test363() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int[] var24 = var21.findModel((org.sat4j.specs.IVecInt)var23);
    org.sat4j.specs.TimeoutException var26 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var27 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var26);
    org.sat4j.specs.TimeoutException var28 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var27);
    java.lang.String var29 = var27.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var30.isSatisfiable((org.sat4j.specs.IVecInt)var33, var52);
    java.util.Map var54 = var30.getStat();
    org.sat4j.tools.DotSearchTracing var55 = new org.sat4j.tools.DotSearchTracing(var29, var54);
    var55.start();
    var55.start();
    var21.setSearchListener((org.sat4j.specs.SearchListener)var55);
    var55.backjump((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@40db08\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@40db08\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var29.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c599fa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c599fa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);

  }

  public void test364() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.specs.IteratorInt var48 = var21.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d102ab\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d102ab\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@134014\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@134014\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test365() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    boolean var23 = var1.isEmpty();
    org.sat4j.core.Vec var25 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    boolean var43 = var40.isVerbose();
    org.sat4j.reader.InstanceReader var44 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var40);
    int var45 = var40.nConstraints();
    var25.ensure(var45);
    org.sat4j.core.DefaultComparator var47 = new org.sat4j.core.DefaultComparator();
    var25.sort((java.util.Comparator)var47);
    var1.sort((java.util.Comparator)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ff8839\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ff8839\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5bc9c8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5bc9c8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test366() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.tools.DimacsArrayReader var1 = new org.sat4j.tools.DimacsArrayReader((org.sat4j.specs.ISolver)var0);
    int[] var3 = new int[] { 0};
    int[] var6 = new int[] { (-1), 10};
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var8 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var7);
    org.sat4j.reader.LecteurDimacs var9 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var7);
    org.sat4j.opt.MaxSatDecorator var10 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var7);
    var10.setDBSimplificationAllowed(false);
    int[] var13 = var10.findModel();
    int[][] var14 = new int[][] { var13};
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var15 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    org.sat4j.minisat.core.IOrder var22 = var17.getOrder();
    java.lang.String var23 = var17.toString();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    var17.setTimeoutOnConflicts(var27);
    org.sat4j.tools.ModelIterator var30 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var16, var27);
    var16.setTimeoutOnConflicts(0);
    var15.updateVar(0);
    int var34 = org.sat4j.minisat.restarts.LubyRestarts.luby(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.ISolver var35 = var1.parseInstance(var3, var6, var14, var34);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5e0377\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var23.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5e0377\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test367() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.specs.IteratorInt var41 = var21.iterator();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    int var47 = var42.nVars();
    org.sat4j.minisat.orders.PureOrder var48 = new org.sat4j.minisat.orders.PureOrder(var47);
    java.lang.String var49 = var48.toString();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var50.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var52 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var50.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var52);
    org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var56 = var55.pop();
    org.sat4j.core.ReadOnlyVecInt var57 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var55);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    int var60 = var59.size();
    org.sat4j.minisat.core.Constr var61 = var52.createCardinalityConstraint((org.sat4j.specs.IVecInt)var55, var60);
    double var62 = var48.varActivity(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.shrink(var60);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d68014\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d68014\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13076b2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13076b2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"+ "'", var49.equals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.0d);

  }

  public void test368() throws Throwable {

    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var0 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    java.lang.String var1 = var0.toString();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var2 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    var4.setTimeoutOnConflicts(var14);
    org.sat4j.tools.ModelIterator var17 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var3, var14);
    var3.setTimeoutOnConflicts(0);
    var2.updateVar(0);
    var0.assignLiteral(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "phase appearing in latest learned clause"+ "'", var1.equals("phase appearing in latest learned clause"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f7336b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f7336b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);

  }

  public void test369() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    int[] var6 = var0.findModel();
    java.lang.String var7 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@71a991\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@71a991\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test370() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBackjumping();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test371() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.reset();

  }

  public void test372() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var14 = new org.sat4j.minisat.learning.PercentLengthLearning(var13);
    var3.assignLiteral(var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var16 = new org.sat4j.minisat.constraints.cnf.UnitClause(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = var16.locked();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f4fdf3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f4fdf3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test373() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var7 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    var7.setLearner((org.sat4j.minisat.core.Learner)var8);
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    int var13 = var12.size();
    var12.sort();
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    java.lang.String var18 = var16.toString();
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var21 = var20.pop();
    org.sat4j.core.ReadOnlyVecInt var22 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var20);
    org.sat4j.minisat.constraints.cnf.UnitClause var24 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var25 = var22.indexOf((-1));
    boolean var26 = var16.contains((-1));
    var12.pushAll((org.sat4j.specs.IVecInt)var16);
    boolean var28 = var8.isSatisfiable((org.sat4j.specs.IVecInt)var12);
    org.sat4j.minisat.constraints.cnf.UnitClauses var29 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var12);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var36 = new org.sat4j.minisat.orders.RandomWalkDecorator(var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    java.lang.String var43 = var37.toString();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    var37.setTimeoutOnConflicts(var47);
    var37.setTimeoutMs(0L);
    int var52 = var37.newVar();
    double var53 = var36.varActivity(var52);
    var36.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var55 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var56 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var55.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var56);
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    int var63 = var58.getTimeout();
    var56.setLearner((org.sat4j.minisat.core.Learner)var58);
    org.sat4j.minisat.core.ILits var65 = var56.getVocabulary();
    var36.setLits(var65);
    org.sat4j.minisat.constraints.cnf.CBClause var67 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var12, var65);
    org.sat4j.core.VecInt var69 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var70 = var69.pop();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.constraints.cnf.OriginalWLClause var71 = org.sat4j.minisat.constraints.cnf.OriginalWLClause.brandNewClause((org.sat4j.minisat.core.UnitPropagationListener)var0, var65, var70);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@869825\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@869825\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9c4adf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var43.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9c4adf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);

  }

  public void test374() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    org.sat4j.minisat.core.IPhaseSelectionStrategy var7 = var6.getPhaseSelectionStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test375() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    var17.disableNumberOfConstraintCheck();
    var17.disableNumberOfConstraintCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139fb7f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@139fb7f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test376() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    var2.setTimeoutOnConflicts(var5);
    org.sat4j.minisat.core.IOrder var7 = var2.getOrder();
    java.lang.String var8 = var2.toString();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    var2.setTimeoutOnConflicts(var12);
    org.sat4j.tools.ModelIterator var15 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var12);
    boolean var17 = var15.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var18 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var15);
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var21 = var20.pop();
    org.sat4j.core.ReadOnlyVecInt var22 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var20);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeoutOnConflicts(var27);
    org.sat4j.minisat.core.IOrder var29 = var24.getOrder();
    java.lang.String var30 = var24.toString();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    var24.setTimeoutOnConflicts(var34);
    org.sat4j.tools.ModelIterator var37 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var23, var34);
    boolean var39 = var37.isSatisfiable(true);
    boolean var40 = var37.isVerbose();
    boolean var41 = var15.isSatisfiable((org.sat4j.specs.IVecInt)var22, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var42 = var0.createClause((org.sat4j.specs.IVecInt)var22);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f530fc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var8.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f530fc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d23893\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var30.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d23893\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test377() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.tools.ModelIterator var2 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var4 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var4.setSolver(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var7.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var9 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var7.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var9);
    var4.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var7);
    var3.removeFrom((org.sat4j.specs.ISolver)var7);
    org.sat4j.minisat.restarts.MiniSATRestarts var13 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var14 = var13.toString();
    var7.setLogPrefix(var14);
    org.sat4j.tools.DecisionTracing var16 = new org.sat4j.tools.DecisionTracing(var14);
    var16.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var19 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var20 = var19.size();
    var19.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    org.sat4j.minisat.core.IOrder var30 = var25.getOrder();
    java.lang.String var31 = var25.toString();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    var25.setTimeoutOnConflicts(var35);
    org.sat4j.tools.ModelIterator var38 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var24, var35);
    boolean var40 = var38.isSatisfiable(true);
    boolean var41 = var38.isVerbose();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    org.sat4j.minisat.core.IOrder var48 = var43.getOrder();
    java.lang.String var49 = var43.toString();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    var43.setTimeoutOnConflicts(var53);
    org.sat4j.tools.ModelIterator var56 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var42, var53);
    boolean var58 = var56.isSatisfiable(true);
    boolean var59 = var56.isVerbose();
    org.sat4j.reader.InstanceReader var60 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var56);
    int var61 = var56.nConstraints();
    boolean var62 = var56.isVerbose();
    boolean var63 = var56.isDBSimplificationAllowed();
    int var64 = var38.nextFreeVarId(var63);
    var16.conflictFound((org.sat4j.specs.IConstr)var19, (-1), var64);
    var2.setSearchListener((org.sat4j.specs.SearchListener)var16);
    org.sat4j.tools.ConstrGroup var68 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var70 = new org.sat4j.tools.ConstrGroup(true);
    var68.add((org.sat4j.specs.IConstr)var70);
    boolean var72 = var68.learnt();
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var73.expireTimeout();
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    var73.setTimeout(var76);
    org.sat4j.minisat.constraints.cnf.UnitClause var78 = new org.sat4j.minisat.constraints.cnf.UnitClause(var76);
    var68.add((org.sat4j.specs.IConstr)var78);
    var16.learn((org.sat4j.specs.IConstr)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "MiniSAT restarts strategy"+ "'", var14.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@920dc8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var31.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@920dc8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@daa854\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var49.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@daa854\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);

  }

  public void test378() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    int var17 = var16.size();
    var14.setTimeoutOnConflicts(var17);
    int[] var19 = var14.findModel();
    org.sat4j.core.VecInt var21 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var22 = var21.pop();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    int var47 = var21.indexOf(var45);
    int[] var48 = var21.toArray();
    boolean var49 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var52 = var51.pop();
    org.sat4j.core.ReadOnlyVecInt var53 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var51);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var54.expireTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeout(var57);
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    var59.setTimeoutOnConflicts(var62);
    org.sat4j.minisat.core.IOrder var64 = var59.getOrder();
    java.lang.String var65 = var59.toString();
    java.lang.String var66 = var54.toString(var65);
    boolean var67 = var51.equals((java.lang.Object)var54);
    int var68 = var54.nConstraints();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    int var71 = var54.newVar(var70);
    var14.setExpectedNumberOfClauses(var71);
    int[] var73 = var14.findModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2ce0ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2ce0ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a1cfa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15a1cfa\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var65.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@185d161\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@185d161\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e669a5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);

  }

  public void test379() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    int var28 = var23.nVars();
    org.sat4j.minisat.orders.PureOrder var29 = new org.sat4j.minisat.orders.PureOrder(var28);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    var29.assignLiteral(var32);
    org.sat4j.minisat.core.ILits var34 = var29.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var35 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var29.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var38 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var37);
    org.sat4j.reader.LecteurDimacs var39 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var37);
    org.sat4j.opt.MaxSatDecorator var40 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var37);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var43 = var42.pop();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var50 = new org.sat4j.minisat.orders.RandomWalkDecorator(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    var51.setTimeoutOnConflicts(var61);
    var51.setTimeoutMs(0L);
    int var66 = var51.newVar();
    double var67 = var50.varActivity(var66);
    int var68 = var42.indexOf(var66);
    var40.setExpectedNumberOfClauses(var66);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var40.setExpectedNumberOfClauses(var73);
    double var76 = var29.varActivity(var73);
    var22.forwardActivity(var76);
    var22.incActivity((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var22.learnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18fe664\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18fe664\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);

  }

  public void test380() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = org.sat4j.core.LiteralsUtils.toInternal(var44);
    int var47 = var21.indexOf(var46);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    int var51 = var21.get(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var52 = var21.last();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@80e3c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@80e3c0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b16eba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b16eba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test381() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    org.sat4j.reader.DimacsReader var5 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var0);
    int[] var7 = new int[] { 1};
    java.lang.String var8 = var5.decode(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var9.expireTimeout();
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var13 = var12.pop();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    org.sat4j.minisat.core.IOrder var20 = var15.getOrder();
    java.lang.String var21 = var15.toString();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    var15.setTimeoutOnConflicts(var25);
    org.sat4j.tools.ModelIterator var28 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14, var25);
    boolean var30 = var28.isSatisfiable(true);
    boolean var31 = var28.isVerbose();
    boolean var32 = var9.isSatisfiable((org.sat4j.specs.IVecInt)var12, var31);
    java.util.Map var33 = var9.getStat();
    org.sat4j.tools.TextOutputTracing var34 = new org.sat4j.tools.TextOutputTracing(var33);
    org.sat4j.tools.DotSearchTracing var35 = new org.sat4j.tools.DotSearchTracing(var8, var33);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    java.lang.String var43 = var37.toString();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    var37.setTimeoutOnConflicts(var47);
    org.sat4j.tools.ModelIterator var50 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var36, var47);
    boolean var52 = var50.isSatisfiable(true);
    boolean var53 = var50.isVerbose();
    org.sat4j.reader.InstanceReader var54 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var50);
    int var55 = var50.nConstraints();
    int[] var56 = var50.model();
    org.sat4j.tools.SolutionCounter var57 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var50);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    int[] var60 = var57.findModel((org.sat4j.specs.IVecInt)var59);
    org.sat4j.specs.TimeoutException var62 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var63 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var62);
    org.sat4j.specs.TimeoutException var64 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var63);
    java.lang.String var65 = var63.toString();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var66.expireTimeout();
    org.sat4j.core.VecInt var69 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var70 = var69.pop();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeoutOnConflicts(var75);
    org.sat4j.minisat.core.IOrder var77 = var72.getOrder();
    java.lang.String var78 = var72.toString();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    var79.setTimeoutOnConflicts(var82);
    var72.setTimeoutOnConflicts(var82);
    org.sat4j.tools.ModelIterator var85 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var71, var82);
    boolean var87 = var85.isSatisfiable(true);
    boolean var88 = var85.isVerbose();
    boolean var89 = var66.isSatisfiable((org.sat4j.specs.IVecInt)var69, var88);
    java.util.Map var90 = var66.getStat();
    org.sat4j.tools.DotSearchTracing var91 = new org.sat4j.tools.DotSearchTracing(var65, var90);
    var91.start();
    var91.start();
    var57.setSearchListener((org.sat4j.specs.SearchListener)var91);
    int var95 = var57.getTimeout();
    var35.adding(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "1 0"+ "'", var8.equals("1 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f66ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var21.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f66ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ac3a34\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var43.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ac3a34\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var65.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4b03fe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var78.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4b03fe\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 2147483);

  }

  public void test382() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    int var7 = var6.numberOfInterestingVariables();
    org.sat4j.tools.ConstrGroup var8 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var9 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var9.setSolver(var10);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var12.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var14 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var12.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var14);
    var9.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var12);
    var8.removeFrom((org.sat4j.specs.ISolver)var12);
    org.sat4j.minisat.restarts.MiniSATRestarts var18 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var19 = var18.toString();
    var12.setLogPrefix(var19);
    org.sat4j.tools.DecisionTracing var21 = new org.sat4j.tools.DecisionTracing(var19);
    var21.beginLoop();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    int var28 = var23.getTimeout();
    var21.backtracking(var28);
    org.sat4j.tools.ConstrGroup var30 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var31 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var31.setSolver(var32);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var34.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var36 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var34.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var36);
    var31.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var34);
    var30.removeFrom((org.sat4j.specs.ISolver)var34);
    org.sat4j.minisat.restarts.MiniSATRestarts var40 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var41 = var40.toString();
    var34.setLogPrefix(var41);
    org.sat4j.tools.DecisionTracing var43 = new org.sat4j.tools.DecisionTracing(var41);
    var43.beginLoop();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    int var50 = var45.getTimeout();
    var43.backtracking(var50);
    var43.solutionFound();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var55 = new org.sat4j.minisat.constraints.cnf.UnitClause(var54);
    var43.assuming(var54);
    var21.conflictFound(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.updateVar(var54);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "MiniSAT restarts strategy"+ "'", var19.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "MiniSAT restarts strategy"+ "'", var41.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);

  }

  public void test383() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    org.sat4j.minisat.learning.PercentLengthLearning var14 = new org.sat4j.minisat.learning.PercentLengthLearning(var13);
    var3.assignLiteral(var13);
    java.lang.String var16 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a5d6f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a5d6f9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"+ "'", var16.equals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT"));

  }

  public void test384() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    int[] var63 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var64 = new org.sat4j.core.VecInt(var63);
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var65.expireTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeout(var68);
    var64.ensure(var68);
    org.sat4j.specs.IConstr[] var71 = var11.and(var58, (org.sat4j.specs.IVecInt)var64);
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var72.expireTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeout(var75);
    boolean var77 = var72.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var78 = var72.getOrder();
    org.sat4j.tools.SolutionCounter var79 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var72);
    int var80 = var72.nVars();
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    var81.setTimeoutOnConflicts(var84);
    int var86 = org.sat4j.core.LiteralsUtils.toInternal(var84);
    org.sat4j.minisat.core.Solver var87 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var88 = var87.getTimeout();
    org.sat4j.minisat.core.Solver var89 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var90 = var89.getTimeout();
    var87.setTimeoutOnConflicts(var90);
    var11.halfAdderCarry(var80, var84, var90);
    boolean var93 = var11.isDBSimplificationAllowed();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b896e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b896e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d53ce4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d53ce4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test385() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    var3.setDBSimplificationAllowed(false);
    org.sat4j.core.VecInt var7 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var8 = var7.pop();
    org.sat4j.core.ReadOnlyVecInt var9 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var7);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var10.expireTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeout(var13);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    org.sat4j.minisat.core.IOrder var20 = var15.getOrder();
    java.lang.String var21 = var15.toString();
    java.lang.String var22 = var10.toString(var21);
    boolean var23 = var7.equals((java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var24 = var3.addBlockingClause((org.sat4j.specs.IVecInt)var7);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var21.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@fb21af\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@fb21af\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1914c67\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test386() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.specs.SearchListener var12 = var11.getSearchListener();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    int var18 = org.sat4j.core.LiteralsUtils.toInternal(var16);
    var11.setExpectedNumberOfClauses(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4294966);

  }

  public void test387() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    int var28 = var23.nVars();
    org.sat4j.minisat.orders.PureOrder var29 = new org.sat4j.minisat.orders.PureOrder(var28);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    var29.assignLiteral(var32);
    org.sat4j.minisat.core.ILits var34 = var29.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var35 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var29.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var38 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var37);
    org.sat4j.reader.LecteurDimacs var39 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var37);
    org.sat4j.opt.MaxSatDecorator var40 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var37);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var43 = var42.pop();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var50 = new org.sat4j.minisat.orders.RandomWalkDecorator(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    var51.setTimeoutOnConflicts(var61);
    var51.setTimeoutMs(0L);
    int var66 = var51.newVar();
    double var67 = var50.varActivity(var66);
    int var68 = var42.indexOf(var66);
    var40.setExpectedNumberOfClauses(var66);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var40.setExpectedNumberOfClauses(var73);
    double var76 = var29.varActivity(var73);
    var22.forwardActivity(var76);
    var22.incActivity((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setLearnt();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12c5678\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12c5678\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);

  }

  public void test388() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningPure();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    int var6 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var18);
    boolean var23 = var21.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var24 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var21);
    org.sat4j.core.VecInt var26 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var27 = var26.pop();
    org.sat4j.core.ReadOnlyVecInt var28 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var26);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    org.sat4j.tools.ModelIterator var43 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var29, var40);
    boolean var45 = var43.isSatisfiable(true);
    boolean var46 = var43.isVerbose();
    boolean var47 = var21.isSatisfiable((org.sat4j.specs.IVecInt)var28, var46);
    var1.setDBSimplificationAllowed(var47);
    var0.setDBSimplificationAllowed(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var50 = var0.model();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c7bcc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c7bcc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@113cfd1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@113cfd1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test389() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    var7.setTimeoutMs(0L);
    int var22 = var7.newVar();
    double var23 = var6.varActivity(var22);
    var6.varDecayActivity();
    var6.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd6bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd6bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);

  }

  public void test390() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.clear();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17e5186\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17e5186\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fc3932\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1fc3932\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c08144\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c08144\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13cbf2f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13cbf2f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test391() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    boolean var3 = var1.isSatisfiable();
    boolean var4 = var1.isSatisfiable();
    long var5 = var1.getTimeoutMs();
    boolean var6 = var1.isSatisfiable();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.core.ReadOnlyVecInt var10 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var8);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var11.expireTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeout(var14);
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    org.sat4j.minisat.core.IOrder var21 = var16.getOrder();
    java.lang.String var22 = var16.toString();
    java.lang.String var23 = var11.toString(var22);
    boolean var24 = var8.equals((java.lang.Object)var11);
    org.sat4j.tools.ConstrGroup var25 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var26 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var26.setSolver(var27);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var29.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var31 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var29.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var31);
    var26.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var29);
    var25.removeFrom((org.sat4j.specs.ISolver)var29);
    org.sat4j.minisat.restarts.MiniSATRestarts var35 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var36 = var35.toString();
    var29.setLogPrefix(var36);
    org.sat4j.tools.DecisionTracing var38 = new org.sat4j.tools.DecisionTracing(var36);
    var38.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var41 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var42 = var41.size();
    var41.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    org.sat4j.minisat.core.IOrder var52 = var47.getOrder();
    java.lang.String var53 = var47.toString();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    var47.setTimeoutOnConflicts(var57);
    org.sat4j.tools.ModelIterator var60 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var46, var57);
    boolean var62 = var60.isSatisfiable(true);
    boolean var63 = var60.isVerbose();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    org.sat4j.minisat.core.IOrder var70 = var65.getOrder();
    java.lang.String var71 = var65.toString();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeoutOnConflicts(var75);
    var65.setTimeoutOnConflicts(var75);
    org.sat4j.tools.ModelIterator var78 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var64, var75);
    boolean var80 = var78.isSatisfiable(true);
    boolean var81 = var78.isVerbose();
    org.sat4j.reader.InstanceReader var82 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var78);
    int var83 = var78.nConstraints();
    boolean var84 = var78.isVerbose();
    boolean var85 = var78.isDBSimplificationAllowed();
    int var86 = var60.nextFreeVarId(var85);
    var38.conflictFound((org.sat4j.specs.IConstr)var41, (-1), var86);
    org.sat4j.core.VecInt var88 = new org.sat4j.core.VecInt(var86);
    boolean var89 = var88.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var8, var89);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483647L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@8389d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var23.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@8389d8\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@60a3d5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "MiniSAT restarts strategy"+ "'", var36.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ca1a0c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var53.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ca1a0c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@137ced7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var71.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@137ced7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test392() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    int[] var4 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var6.expireTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeout(var9);
    var5.ensure(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var12 = var0.createClause((org.sat4j.specs.IVecInt)var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);

  }

  public void test393() throws Throwable {

    double[] var3 = new double[] { 100.0d, 0.0d, 1.0d};
    org.sat4j.minisat.core.Heap var4 = new org.sat4j.minisat.core.Heap(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test394() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    boolean var22 = var20.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var23 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var20);
    org.sat4j.core.VecInt var25 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var26 = var25.pop();
    org.sat4j.core.ReadOnlyVecInt var27 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var25);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    org.sat4j.tools.ModelIterator var42 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var28, var39);
    boolean var44 = var42.isSatisfiable(true);
    boolean var45 = var42.isVerbose();
    boolean var46 = var20.isSatisfiable((org.sat4j.specs.IVecInt)var27, var45);
    var0.setDBSimplificationAllowed(var46);
    org.sat4j.specs.IVecInt var48 = var0.getOutLearnt();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1373569\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1373569\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14b50c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@14b50c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test395() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    var0.init((-1));
    org.sat4j.tools.ConstrGroup var4 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var5 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var5.setSolver(var6);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var10 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var8.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var10);
    var5.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var8);
    var4.removeFrom((org.sat4j.specs.ISolver)var8);
    org.sat4j.minisat.restarts.MiniSATRestarts var14 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var15 = var14.toString();
    var8.setLogPrefix(var15);
    org.sat4j.tools.DecisionTracing var17 = new org.sat4j.tools.DecisionTracing(var15);
    var17.beginLoop();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    int var24 = var19.getTimeout();
    var17.backtracking(var24);
    org.sat4j.tools.ConstrGroup var26 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var27 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var27.setSolver(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var32 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var30.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var32);
    var27.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var30);
    var26.removeFrom((org.sat4j.specs.ISolver)var30);
    org.sat4j.minisat.restarts.MiniSATRestarts var36 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var37 = var36.toString();
    var30.setLogPrefix(var37);
    org.sat4j.tools.DecisionTracing var39 = new org.sat4j.tools.DecisionTracing(var37);
    var39.beginLoop();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    int var46 = var41.getTimeout();
    var39.backtracking(var46);
    var39.solutionFound();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var51 = new org.sat4j.minisat.constraints.cnf.UnitClause(var50);
    var39.assuming(var50);
    var17.conflictFound(var50);
    var0.init(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "MiniSAT restarts strategy"+ "'", var15.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "MiniSAT restarts strategy"+ "'", var37.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);

  }

  public void test396() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    int[] var6 = var0.findModel();
    java.util.Map var7 = var0.getStat();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test397() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    int var9 = var8.size();
    var6.assignLiteral(var9);
    org.sat4j.core.VecInt var12 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var13 = var12.pop();
    org.sat4j.core.ReadOnlyVecInt var14 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var12);
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var15.expireTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeout(var18);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    java.lang.String var27 = var15.toString(var26);
    boolean var28 = var12.equals((java.lang.Object)var15);
    int var29 = var15.nConstraints();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    int var32 = var15.newVar(var31);
    var6.assignLiteral(var32);
    var6.varDecayActivity();
    int var35 = var6.getPeriod();
    org.sat4j.minisat.core.IPhaseSelectionStrategy var36 = var6.getPhaseSelectionStrategy();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var38 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var37);
    org.sat4j.reader.LecteurDimacs var39 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var37);
    org.sat4j.opt.MaxSatDecorator var40 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var37);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var43 = var42.pop();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var50 = new org.sat4j.minisat.orders.RandomWalkDecorator(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    var51.setTimeoutOnConflicts(var61);
    var51.setTimeoutMs(0L);
    int var66 = var51.newVar();
    double var67 = var50.varActivity(var66);
    int var68 = var42.indexOf(var66);
    var40.setExpectedNumberOfClauses(var66);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var40.setExpectedNumberOfClauses(var73);
    var6.setPeriod(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@208e15\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var27.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@208e15\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5f701b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10891c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10891c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test398() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    int[] var5 = new int[] { 1};
    int[] var7 = new int[] { 10};
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    var9.setTimeoutOnConflicts(var19);
    org.sat4j.tools.ModelIterator var22 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var8, var19);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    int var25 = var24.size();
    var22.setTimeoutOnConflicts(var25);
    int[] var27 = var22.findModel();
    org.sat4j.core.VecInt var29 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var30 = var29.pop();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    org.sat4j.minisat.core.IOrder var36 = var31.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var37 = new org.sat4j.minisat.orders.RandomWalkDecorator(var36);
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    var38.setTimeoutOnConflicts(var41);
    org.sat4j.minisat.core.IOrder var43 = var38.getOrder();
    java.lang.String var44 = var38.toString();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    var38.setTimeoutOnConflicts(var48);
    var38.setTimeoutMs(0L);
    int var53 = var38.newVar();
    double var54 = var37.varActivity(var53);
    int var55 = var29.indexOf(var53);
    int[] var56 = var29.toArray();
    boolean var57 = var22.isSatisfiable((org.sat4j.specs.IVecInt)var29);
    org.sat4j.core.VecInt var59 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var60 = var59.pop();
    org.sat4j.core.ReadOnlyVecInt var61 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var59);
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var62.expireTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeout(var65);
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    org.sat4j.minisat.core.IOrder var72 = var67.getOrder();
    java.lang.String var73 = var67.toString();
    java.lang.String var74 = var62.toString(var73);
    boolean var75 = var59.equals((java.lang.Object)var62);
    int var76 = var62.nConstraints();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    int var79 = var62.newVar(var78);
    var22.setExpectedNumberOfClauses(var79);
    int[] var81 = var22.findModel();
    int[][] var82 = new int[][] { var81};
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var83 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var84 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var85 = var84.getTimeout();
    org.sat4j.minisat.core.Solver var86 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var87 = var86.getTimeout();
    var84.setTimeoutOnConflicts(var87);
    org.sat4j.minisat.core.IOrder var89 = var84.getOrder();
    java.lang.String var90 = var84.toString();
    var84.setTimeoutOnConflicts(0);
    var83.assignLiteral(0);
    org.sat4j.specs.ISolver var94 = var3.parseInstance(var5, var7, var82, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12f38bc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12f38bc\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@111f35a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var44.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@111f35a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var73.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b05cdc\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var74.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b05cdc\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16c3ff8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9cd85b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var90.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9cd85b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);

  }

  public void test399() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    var3.setDBSimplificationAllowed(false);
    java.lang.Number var6 = var3.getObjectiveValue();
    org.sat4j.minisat.learning.FixedLengthLearning var7 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var7.setSolver(var8);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var10.expireTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeout(var13);
    var7.setSolver(var10);
    org.sat4j.specs.IVecInt var16 = var10.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var17 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var10);
    org.sat4j.tools.GateTranslator var18 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var10);
    org.sat4j.specs.SearchListener var19 = var18.getSearchListener();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var25 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var35 = new org.sat4j.minisat.orders.RandomWalkDecorator(var34);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    var36.setTimeoutMs(0L);
    int var51 = var36.newVar();
    double var52 = var35.varActivity(var51);
    int var53 = var27.indexOf(var51);
    var25.assignLiteral(var53);
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    int var60 = org.sat4j.core.LiteralsUtils.toInternal(var58);
    var18.halfAdderSum(var23, var53, var58);
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    int var67 = org.sat4j.core.LiteralsUtils.toInternal(var65);
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    int var73 = var68.nVars();
    org.sat4j.specs.IConstr[] var74 = var18.not(var65, var73);
    var3.setExpectedNumberOfClauses(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.discard();
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 0+ "'", var6.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4a0d98\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4a0d98\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test400() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int[] var24 = var21.findModel((org.sat4j.specs.IVecInt)var23);
    org.sat4j.specs.TimeoutException var26 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var27 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var26);
    org.sat4j.specs.TimeoutException var28 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var27);
    java.lang.String var29 = var27.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var30.isSatisfiable((org.sat4j.specs.IVecInt)var33, var52);
    java.util.Map var54 = var30.getStat();
    org.sat4j.tools.DotSearchTracing var55 = new org.sat4j.tools.DotSearchTracing(var29, var54);
    var55.start();
    var55.start();
    var21.setSearchListener((org.sat4j.specs.SearchListener)var55);
    var55.solutionFound();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c28c1a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c28c1a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var29.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ab555a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@ab555a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);

  }

  public void test401() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    org.sat4j.tools.xplain.Xplain var22 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var1);
    int[] var23 = var22.findModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@74bec5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@74bec5\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);

  }

  public void test402() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    boolean var76 = var74.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1543e84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1543e84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b7b195\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b7b195\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd45d9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd45d9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2438f3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2438f3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test403() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    java.lang.String var1 = var0.toString();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var3 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var2);
    org.sat4j.reader.LecteurDimacs var4 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var2);
    int var5 = var2.nVars();
    var0.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Limit learning to clauses of size smaller or equal to 3"+ "'", var1.equals("Limit learning to clauses of size smaller or equal to 3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test404() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    java.lang.String var17 = var7.toString();
    org.sat4j.tools.ConstrGroup var18 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var19 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var19.setSolver(var20);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var22.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var24 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var22.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var24);
    var19.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var22);
    var18.removeFrom((org.sat4j.specs.ISolver)var22);
    org.sat4j.minisat.restarts.MiniSATRestarts var28 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var29 = var28.toString();
    var22.setLogPrefix(var29);
    org.sat4j.tools.DecisionTracing var31 = new org.sat4j.tools.DecisionTracing(var29);
    var31.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var34 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var35 = var34.size();
    var34.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    java.lang.String var64 = var58.toString();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    var58.setTimeoutOnConflicts(var68);
    org.sat4j.tools.ModelIterator var71 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var57, var68);
    boolean var73 = var71.isSatisfiable(true);
    boolean var74 = var71.isVerbose();
    org.sat4j.reader.InstanceReader var75 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var71);
    int var76 = var71.nConstraints();
    boolean var77 = var71.isVerbose();
    boolean var78 = var71.isDBSimplificationAllowed();
    int var79 = var53.nextFreeVarId(var78);
    var31.conflictFound((org.sat4j.specs.IConstr)var34, (-1), var79);
    boolean var81 = var7.removeSubsumedConstr((org.sat4j.specs.IConstr)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var82 = var34.simplify();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c56cde\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c56cde\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "        p cnf 0 1            \n0\n"+ "'", var17.equals("        p cnf 0 1            \n0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "MiniSAT restarts strategy"+ "'", var29.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c557e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c557e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f2efe4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var64.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f2efe4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test405() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    boolean var41 = var21.isEmpty();
    java.lang.String var42 = var21.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    int var48 = var43.nVars();
    org.sat4j.minisat.orders.PureOrder var49 = new org.sat4j.minisat.orders.PureOrder(var48);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    int var52 = var51.size();
    var49.assignLiteral(var52);
    org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var56 = var55.pop();
    org.sat4j.core.ReadOnlyVecInt var57 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var55);
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var58.expireTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeout(var61);
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    org.sat4j.minisat.core.IOrder var68 = var63.getOrder();
    java.lang.String var69 = var63.toString();
    java.lang.String var70 = var58.toString(var69);
    boolean var71 = var55.equals((java.lang.Object)var58);
    int var72 = var58.nConstraints();
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    int var75 = var58.newVar(var74);
    var49.assignLiteral(var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IVecInt var77 = var21.push(var75);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@86f8eb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@86f8eb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1904573\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1904573\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var69.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1873c96\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1873c96\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12b0760\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);

  }

  public void test406() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    java.lang.Object[] var34 = var33.toArray();
    java.util.Iterator var35 = var33.iterator();
    java.lang.Object[] var36 = var33.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3dc9d6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3dc9d6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f0f43\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f0f43\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test407() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var1 = var0.isSatisfiable();
    org.sat4j.reader.InstanceReader var2 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.learning.MiniSATLearning var3 = new org.sat4j.minisat.learning.MiniSATLearning();
    java.lang.String var4 = var3.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IProblem var5 = var2.parseInstance(var4);
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Learn all clauses as in MiniSAT"+ "'", var4.equals("Learn all clauses as in MiniSAT"));

  }

  public void test408() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var16 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var17 = var16.size();
    var16.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    org.sat4j.minisat.core.IOrder var27 = var22.getOrder();
    java.lang.String var28 = var22.toString();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    var22.setTimeoutOnConflicts(var32);
    org.sat4j.tools.ModelIterator var35 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var21, var32);
    boolean var37 = var35.isSatisfiable(true);
    boolean var38 = var35.isVerbose();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    org.sat4j.reader.InstanceReader var57 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var53);
    int var58 = var53.nConstraints();
    boolean var59 = var53.isVerbose();
    boolean var60 = var53.isDBSimplificationAllowed();
    int var61 = var35.nextFreeVarId(var60);
    var13.conflictFound((org.sat4j.specs.IConstr)var16, (-1), var61);
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    org.sat4j.minisat.core.IOrder var68 = var63.getOrder();
    java.lang.String var69 = var63.toString();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeoutOnConflicts(var73);
    var63.setTimeoutOnConflicts(var73);
    var63.setTimeoutMs(0L);
    int var78 = var63.newVar();
    var13.assuming(var78);
    org.sat4j.minisat.constraints.cnf.UnitClause var80 = new org.sat4j.minisat.constraints.cnf.UnitClause(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13fe041\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var28.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13fe041\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ec5dc0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ec5dc0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17dfcc1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var69.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17dfcc1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);

  }

  public void test409() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    int var28 = var23.nVars();
    org.sat4j.minisat.orders.PureOrder var29 = new org.sat4j.minisat.orders.PureOrder(var28);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    int var32 = var31.size();
    var29.assignLiteral(var32);
    org.sat4j.minisat.core.ILits var34 = var29.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var35 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var29.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var38 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var37);
    org.sat4j.reader.LecteurDimacs var39 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var37);
    org.sat4j.opt.MaxSatDecorator var40 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var37);
    org.sat4j.core.VecInt var42 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var43 = var42.pop();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var50 = new org.sat4j.minisat.orders.RandomWalkDecorator(var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    org.sat4j.minisat.core.IOrder var56 = var51.getOrder();
    java.lang.String var57 = var51.toString();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    var51.setTimeoutOnConflicts(var61);
    var51.setTimeoutMs(0L);
    int var66 = var51.newVar();
    double var67 = var50.varActivity(var66);
    int var68 = var42.indexOf(var66);
    var40.setExpectedNumberOfClauses(var66);
    org.sat4j.minisat.core.SearchParams var70 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var72 = new org.sat4j.core.VecInt(100);
    int var73 = var72.size();
    var70.setInitConflictBound(var73);
    var40.setExpectedNumberOfClauses(var73);
    double var76 = var29.varActivity(var73);
    var22.forwardActivity(var76);
    var22.forwardActivity(10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var22.locked();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1885d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var57.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1885d0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);

  }

  public void test410() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.constraints.cnf.UnitClause var5 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var6 = var3.indexOf((-1));
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var7 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    var7.setLearner((org.sat4j.minisat.core.Learner)var8);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var11.expireTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeout(var14);
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    org.sat4j.minisat.core.IOrder var21 = var16.getOrder();
    java.lang.String var22 = var16.toString();
    java.lang.String var23 = var11.toString(var22);
    int var24 = var11.nVars();
    var7.setLearner((org.sat4j.minisat.core.Learner)var11);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var43 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var40);
    org.sat4j.core.VecInt var45 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var46 = var45.pop();
    org.sat4j.core.ReadOnlyVecInt var47 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var45);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    org.sat4j.minisat.core.IOrder var54 = var49.getOrder();
    java.lang.String var55 = var49.toString();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeoutOnConflicts(var59);
    var49.setTimeoutOnConflicts(var59);
    org.sat4j.tools.ModelIterator var62 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var48, var59);
    boolean var64 = var62.isSatisfiable(true);
    boolean var65 = var62.isVerbose();
    boolean var66 = var40.isSatisfiable((org.sat4j.specs.IVecInt)var47, var65);
    org.sat4j.core.ReadOnlyVecInt var67 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var47);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var68 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeoutOnConflicts(var72);
    var68.updateVar(var72);
    org.sat4j.minisat.core.SearchParams var75 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var77 = new org.sat4j.core.VecInt(100);
    int var78 = var77.size();
    var75.setInitConflictBound(var78);
    int var80 = var68.select(var78);
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    var81.setTimeoutOnConflicts(var84);
    int var86 = var81.nVars();
    org.sat4j.minisat.orders.PureOrder var87 = new org.sat4j.minisat.orders.PureOrder(var86);
    var68.updateVar(var86);
    org.sat4j.minisat.core.Constr var89 = var7.createCardinalityConstraint((org.sat4j.specs.IVecInt)var47, var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.insertFirst(var86);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var22.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1207699\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var23.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@1207699\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5aae04\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@143e15\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@143e15\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1aacb97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var55.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1aacb97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test411() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    int[] var17 = var14.model();
    boolean var18 = var14.isSatisfiable();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c8a44\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3c8a44\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test412() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    int var20 = var15.getTimeout();
    var13.backtracking(var20);
    org.sat4j.tools.ConstrGroup var22 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var23 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var23.setSolver(var24);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var26.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var28 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var26.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var28);
    var23.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var26);
    var22.removeFrom((org.sat4j.specs.ISolver)var26);
    org.sat4j.minisat.restarts.MiniSATRestarts var32 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var33 = var32.toString();
    var26.setLogPrefix(var33);
    org.sat4j.tools.DecisionTracing var35 = new org.sat4j.tools.DecisionTracing(var33);
    var35.beginLoop();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    int var42 = var37.getTimeout();
    var35.backtracking(var42);
    var35.solutionFound();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var47 = new org.sat4j.minisat.constraints.cnf.UnitClause(var46);
    var35.assuming(var46);
    var13.conflictFound(var46);
    org.sat4j.core.VecInt var51 = new org.sat4j.core.VecInt(100);
    int var52 = var51.size();
    var51.sort();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    int var59 = org.sat4j.core.LiteralsUtils.toInternal(var57);
    org.sat4j.specs.IVecInt var60 = var51.push(var59);
    var13.backjump(var59);
    org.sat4j.core.VecInt var63 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var64 = var63.pop();
    org.sat4j.core.ReadOnlyVecInt var65 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var63);
    org.sat4j.minisat.constraints.cnf.UnitClause var67 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var68 = var65.indexOf((-1));
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var71 = new org.sat4j.minisat.constraints.cnf.UnitClause(var70);
    var71.incActivity(10.0d);
    var13.propagating((-1), (org.sat4j.specs.IConstr)var71);
    var13.restarting();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "MiniSAT restarts strategy"+ "'", var33.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);

  }

  public void test413() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int[] var24 = var21.findModel((org.sat4j.specs.IVecInt)var23);
    org.sat4j.specs.TimeoutException var26 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var27 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var26);
    org.sat4j.specs.TimeoutException var28 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var27);
    java.lang.String var29 = var27.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var30.isSatisfiable((org.sat4j.specs.IVecInt)var33, var52);
    java.util.Map var54 = var30.getStat();
    org.sat4j.tools.DotSearchTracing var55 = new org.sat4j.tools.DotSearchTracing(var29, var54);
    var55.start();
    var55.start();
    var21.setSearchListener((org.sat4j.specs.SearchListener)var55);
    var55.beginLoop();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a2e69d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@a2e69d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var29.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d9711b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d9711b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);

  }

  public void test414() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var14);
    int[] var22 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(var22);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var24.expireTimeout();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    var24.setTimeout(var27);
    var23.ensure(var27);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var31 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var30);
    var23.pushAll(var31);
    org.sat4j.tools.ConstrGroup var34 = new org.sat4j.tools.ConstrGroup(true);
    boolean var35 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var23, true);
    java.lang.String var36 = var14.getLogPrefix();
    int[] var37 = var14.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16ae709\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16ae709\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "c "+ "'", var36.equals("c "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test415() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    int var7 = var6.numberOfInterestingVariables();
    int var8 = var6.numberOfInterestingVariables();
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var9 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var11 = var9.select(100);
    var6.setPeriod(var11);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    org.sat4j.tools.ModelIterator var27 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var13, var24);
    boolean var29 = var27.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var30 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var27);
    org.sat4j.core.VecInt var32 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var33 = var32.pop();
    org.sat4j.core.ReadOnlyVecInt var34 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var32);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var27.isSatisfiable((org.sat4j.specs.IVecInt)var34, var52);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    int var59 = org.sat4j.core.LiteralsUtils.toInternal(var57);
    int var60 = var34.indexOf(var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.updateVar(var59);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@85f7d2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@85f7d2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c03c01\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c03c01\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));

  }

  public void test416() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var31 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    org.sat4j.minisat.core.IOrder var38 = var33.getOrder();
    java.lang.String var39 = var33.toString();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    var33.setTimeoutOnConflicts(var43);
    org.sat4j.tools.ModelIterator var46 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var32, var43);
    var32.setTimeoutOnConflicts(0);
    var31.updateVar(0);
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var51 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var50);
    org.sat4j.reader.LecteurDimacs var52 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var50);
    org.sat4j.opt.MaxSatDecorator var53 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var50);
    org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var56 = var55.pop();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    org.sat4j.minisat.core.IOrder var62 = var57.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var63 = new org.sat4j.minisat.orders.RandomWalkDecorator(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var74 = var73.getTimeout();
    var71.setTimeoutOnConflicts(var74);
    var64.setTimeoutOnConflicts(var74);
    var64.setTimeoutMs(0L);
    int var79 = var64.newVar();
    double var80 = var63.varActivity(var79);
    int var81 = var55.indexOf(var79);
    var53.setExpectedNumberOfClauses(var79);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var83 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var85 = var83.select(100);
    var31.init(var79, var85);
    var30.assuming(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7560f0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@7560f0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18bf2b6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var39.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@18bf2b6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1872841\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1872841\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 201);

  }

  public void test417() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    int var19 = var14.nConstraints();
    int[] var20 = var14.model();
    org.sat4j.tools.SolutionCounter var21 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int[] var24 = var21.findModel((org.sat4j.specs.IVecInt)var23);
    org.sat4j.specs.TimeoutException var26 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var27 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var26);
    org.sat4j.specs.TimeoutException var28 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var27);
    java.lang.String var29 = var27.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var30.expireTimeout();
    org.sat4j.core.VecInt var33 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var34 = var33.pop();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var30.isSatisfiable((org.sat4j.specs.IVecInt)var33, var52);
    java.util.Map var54 = var30.getStat();
    org.sat4j.tools.DotSearchTracing var55 = new org.sat4j.tools.DotSearchTracing(var29, var54);
    var55.start();
    var55.start();
    var21.setSearchListener((org.sat4j.specs.SearchListener)var55);
    org.sat4j.minisat.constraints.cnf.UnitClause var60 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var61.expireTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeout(var64);
    org.sat4j.minisat.constraints.cnf.UnitClause var66 = new org.sat4j.minisat.constraints.cnf.UnitClause(var64);
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var67.expireTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeout(var70);
    boolean var72 = var67.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var73 = var67.getOrder();
    org.sat4j.tools.SolutionCounter var74 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var67);
    int var75 = var67.nVars();
    int var76 = var66.get(var75);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var77 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var79 = var78.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var80 = new org.sat4j.minisat.constraints.cnf.UnitClause(var79);
    var77.init(var79);
    var55.conflictFound((org.sat4j.specs.IConstr)var60, var75, var79);
    org.sat4j.minisat.core.Solver var83 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var84 = var83.getTimeout();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    var83.setTimeoutOnConflicts(var86);
    java.lang.String var88 = org.sat4j.minisat.constraints.cnf.Lits.toString(var86);
    var55.conflictFound(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c34bef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c34bef\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var29.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15e4cd9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15e4cd9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "-1073741"+ "'", var88.equals("-1073741"));

  }

  public void test418() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var6 = new org.sat4j.minisat.orders.RandomWalkDecorator(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    var8.setTimeoutOnConflicts(var18);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var7, var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    int var24 = var23.size();
    var21.setTimeoutOnConflicts(var24);
    int[] var26 = var21.findModel();
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var29 = var28.pop();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var36 = new org.sat4j.minisat.orders.RandomWalkDecorator(var35);
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    java.lang.String var43 = var37.toString();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    var37.setTimeoutOnConflicts(var47);
    var37.setTimeoutMs(0L);
    int var52 = var37.newVar();
    double var53 = var36.varActivity(var52);
    int var54 = var28.indexOf(var52);
    int[] var55 = var28.toArray();
    boolean var56 = var21.isSatisfiable((org.sat4j.specs.IVecInt)var28);
    org.sat4j.core.VecInt var58 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var59 = var58.pop();
    org.sat4j.core.ReadOnlyVecInt var60 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var58);
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var61.expireTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeout(var64);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    org.sat4j.minisat.core.IOrder var71 = var66.getOrder();
    java.lang.String var72 = var66.toString();
    java.lang.String var73 = var61.toString(var72);
    boolean var74 = var58.equals((java.lang.Object)var61);
    int var75 = var61.nConstraints();
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var77 = var76.getTimeout();
    int var78 = var61.newVar(var77);
    var21.setExpectedNumberOfClauses(var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.updateVar(var78);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@50e17c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@50e17c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1b7f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var43.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1b7f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var72.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@75825e\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var73.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@75825e\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@82f416\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);

  }

  public void test419() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    java.lang.String var16 = var4.toString(var15);
    boolean var17 = var1.equals((java.lang.Object)var4);
    org.sat4j.minisat.learning.ClauseOnlyLearning var18 = new org.sat4j.minisat.learning.ClauseOnlyLearning();
    java.lang.String var19 = var18.toString();
    var4.setLearner((org.sat4j.minisat.core.LearningStrategy)var18);
    var4.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@cdad37\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@cdad37\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@5d1d45\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Limit learning to clauses using watched literals only"+ "'", var19.equals("Limit learning to clauses using watched literals only"));

  }

  public void test420() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    java.lang.String var17 = var7.toString();
    org.sat4j.tools.ConstrGroup var18 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var19 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var19.setSolver(var20);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var22.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var24 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var22.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var24);
    var19.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var22);
    var18.removeFrom((org.sat4j.specs.ISolver)var22);
    org.sat4j.minisat.restarts.MiniSATRestarts var28 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var29 = var28.toString();
    var22.setLogPrefix(var29);
    org.sat4j.tools.DecisionTracing var31 = new org.sat4j.tools.DecisionTracing(var29);
    var31.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var34 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var35 = var34.size();
    var34.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var41 = var40.getTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeoutOnConflicts(var43);
    org.sat4j.minisat.core.IOrder var45 = var40.getOrder();
    java.lang.String var46 = var40.toString();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    var47.setTimeoutOnConflicts(var50);
    var40.setTimeoutOnConflicts(var50);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var39, var50);
    boolean var55 = var53.isSatisfiable(true);
    boolean var56 = var53.isVerbose();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    var58.setTimeoutOnConflicts(var61);
    org.sat4j.minisat.core.IOrder var63 = var58.getOrder();
    java.lang.String var64 = var58.toString();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    var65.setTimeoutOnConflicts(var68);
    var58.setTimeoutOnConflicts(var68);
    org.sat4j.tools.ModelIterator var71 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var57, var68);
    boolean var73 = var71.isSatisfiable(true);
    boolean var74 = var71.isVerbose();
    org.sat4j.reader.InstanceReader var75 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var71);
    int var76 = var71.nConstraints();
    boolean var77 = var71.isVerbose();
    boolean var78 = var71.isDBSimplificationAllowed();
    int var79 = var53.nextFreeVarId(var78);
    var31.conflictFound((org.sat4j.specs.IConstr)var34, (-1), var79);
    boolean var81 = var7.removeSubsumedConstr((org.sat4j.specs.IConstr)var34);
    var7.setDBSimplificationAllowed(false);
    int var84 = var7.nVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2ba1f1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2ba1f1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "        p cnf 0 1            \n0\n"+ "'", var17.equals("        p cnf 0 1            \n0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "MiniSAT restarts strategy"+ "'", var29.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1090dbb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var46.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1090dbb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d70eb3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var64.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d70eb3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);

  }

  public void test421() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var2 = var0.select(100);
    org.sat4j.minisat.orders.PureOrder var3 = new org.sat4j.minisat.orders.PureOrder(var2);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var4 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = var5.nVars();
    org.sat4j.minisat.orders.PureOrder var11 = new org.sat4j.minisat.orders.PureOrder(var10);
    int var12 = var11.numberOfInterestingVariables();
    int var13 = var4.select(var12);
    var3.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 201);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);

  }

  public void test422() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeout(var3);
    boolean var5 = var0.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var6 = var0.getOrder();
    org.sat4j.tools.SolutionCounter var7 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var0);
    var7.setTimeoutMs(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test423() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.specs.IteratorInt var41 = var21.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var42 = var21.toArray();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1506f6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1506f6c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@512035\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@512035\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);

  }

  public void test424() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    var60.register();
    int var62 = var60.size();
    org.sat4j.minisat.constraints.cnf.UnitClause var64 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var67 = new org.sat4j.minisat.constraints.cnf.UnitClause(var66);
    var67.incActivity(10.0d);
    var64.forwardActivity(10.0d);
    var60.incActivity(10.0d);
    boolean var72 = var60.simplify();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c73d6b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c73d6b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test425() throws Throwable {

    org.sat4j.minisat.core.Counter var0 = new org.sat4j.minisat.core.Counter();
    java.lang.String var1 = var0.toString();
    var0.dec();
    var0.inc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "1"+ "'", var1.equals("1"));

  }

  public void test426() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.sat4j.minisat.restarts.ArminRestarts var3 = new org.sat4j.minisat.restarts.ArminRestarts();
    java.lang.String var4 = var3.toString();
    org.sat4j.minisat.core.SearchParams var5 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    var6.setTimeoutMs(0L);
    int var21 = var6.newVar();
    var5.setInitConflictBound(var21);
    var3.init(var5);
    var0.init(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Armin Biere (Picosat) restarts strategy"+ "'", var1.equals("Armin Biere (Picosat) restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Armin Biere (Picosat) restarts strategy"+ "'", var2.equals("Armin Biere (Picosat) restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Armin Biere (Picosat) restarts strategy"+ "'", var4.equals("Armin Biere (Picosat) restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b53376\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b53376\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test427() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.ReadOnlyVec var34 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.core.ReadOnlyVec var35 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var37 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var36);
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(100);
    int var40 = var39.size();
    var39.sort();
    int[] var42 = var39.toArray();
    int[] var43 = var36.findModel((org.sat4j.specs.IVecInt)var39);
    double[] var46 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var47 = new org.sat4j.minisat.core.Heap(var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    var48.setTimeoutOnConflicts(0);
    int var57 = org.sat4j.core.LiteralsUtils.posLit(0);
    var47.insert(0);
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var60 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var61 = var60.getTimeout();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    var60.setTimeoutOnConflicts(var63);
    org.sat4j.minisat.core.IOrder var65 = var60.getOrder();
    java.lang.String var66 = var60.toString();
    org.sat4j.minisat.core.Solver var67 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var68 = var67.getTimeout();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    var67.setTimeoutOnConflicts(var70);
    var60.setTimeoutOnConflicts(var70);
    org.sat4j.tools.ModelIterator var73 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var59, var70);
    var59.setTimeoutOnConflicts(0);
    int var76 = var39.containsAt(0, 0);
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    var77.setTimeoutOnConflicts(var80);
    org.sat4j.minisat.core.IOrder var82 = var77.getOrder();
    java.lang.String var83 = var77.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set(var76, (java.lang.Object)var77);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dfd4cd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dfd4cd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f53a64\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f53a64\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12bcedd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@12bcedd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e36242\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var66.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1e36242\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19169d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var83.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19169d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test428() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var13 = var2.toArray();
    org.sat4j.core.VecInt var15 = new org.sat4j.core.VecInt(100);
    int var16 = var15.size();
    java.lang.String var17 = var15.toString();
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.constraints.cnf.UnitClause var23 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var24 = var21.indexOf((-1));
    boolean var25 = var15.contains((-1));
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    int var31 = org.sat4j.core.LiteralsUtils.toInternal(var29);
    int var32 = var15.indexOf(var29);
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    int var38 = var33.nVars();
    org.sat4j.minisat.orders.PureOrder var39 = new org.sat4j.minisat.orders.PureOrder(var38);
    org.sat4j.core.VecInt var41 = new org.sat4j.core.VecInt(100);
    int var42 = var41.size();
    var39.assignLiteral(var42);
    org.sat4j.minisat.core.ILits var44 = var39.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var45 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var39.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var45);
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var48 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var47);
    org.sat4j.reader.LecteurDimacs var49 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var47);
    org.sat4j.opt.MaxSatDecorator var50 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var47);
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var53 = var52.pop();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    org.sat4j.minisat.core.IOrder var59 = var54.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var60 = new org.sat4j.minisat.orders.RandomWalkDecorator(var59);
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    var61.setTimeoutOnConflicts(var64);
    org.sat4j.minisat.core.IOrder var66 = var61.getOrder();
    java.lang.String var67 = var61.toString();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    var68.setTimeoutOnConflicts(var71);
    var61.setTimeoutOnConflicts(var71);
    var61.setTimeoutMs(0L);
    int var76 = var61.newVar();
    double var77 = var60.varActivity(var76);
    int var78 = var52.indexOf(var76);
    var50.setExpectedNumberOfClauses(var76);
    org.sat4j.minisat.core.SearchParams var80 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var82 = new org.sat4j.core.VecInt(100);
    int var83 = var82.size();
    var80.setInitConflictBound(var83);
    var50.setExpectedNumberOfClauses(var83);
    double var86 = var39.varActivity(var83);
    boolean var87 = var15.contains(var83);
    var2.moveTo2((org.sat4j.specs.IVecInt)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13bae09\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var67.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13bae09\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test429() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    org.sat4j.tools.DimacsStringSolver var7 = new org.sat4j.tools.DimacsStringSolver(var5);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    org.sat4j.minisat.core.IOrder var13 = var8.getOrder();
    java.lang.String var14 = var8.toString();
    org.sat4j.specs.IVecInt var15 = var8.getOutLearnt();
    org.sat4j.specs.IConstr var16 = var7.addClause(var15);
    java.lang.String var17 = var7.toString();
    org.sat4j.core.Vec var19 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    java.lang.String var27 = var21.toString();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    var21.setTimeoutOnConflicts(var31);
    org.sat4j.tools.ModelIterator var34 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var20, var31);
    boolean var36 = var34.isSatisfiable(true);
    boolean var37 = var34.isVerbose();
    org.sat4j.reader.InstanceReader var38 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var34);
    int var39 = var34.nConstraints();
    var19.ensure(var39);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    var41.setTimeoutOnConflicts(0);
    var19.shrink(0);
    org.sat4j.core.ReadOnlyVec var51 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var19);
    java.lang.Object[] var52 = var51.toArray();
    boolean var53 = var51.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var54 = var7.isSatisfiable(var53);
      fail("Expected exception of type org.sat4j.specs.TimeoutException");
    } catch (org.sat4j.specs.TimeoutException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15e0b9b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var14.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15e0b9b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "        p cnf 0 1            \n0\n"+ "'", var17.equals("        p cnf 0 1            \n0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19eef40\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var27.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19eef40\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@154ae8e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@154ae8e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test430() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    java.util.Map var24 = var0.getStat();
    long var25 = var0.getTimeoutMs();
    org.sat4j.specs.SearchListener var26 = var0.getSearchListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@143b527\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@143b527\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483647L);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test431() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    var1.setClaDecay(1.0d);
    var0.init(var1);
    long var9 = var0.nextRestartNumberOfConflict();
    long var10 = var0.nextRestartNumberOfConflict();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test432() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    var0.updateVar(var4);
    org.sat4j.minisat.core.SearchParams var7 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    var7.setInitConflictBound(var10);
    int var12 = var0.select(var10);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    int var18 = var13.nVars();
    org.sat4j.minisat.orders.PureOrder var19 = new org.sat4j.minisat.orders.PureOrder(var18);
    var0.updateVar(var18);
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var27 = new org.sat4j.minisat.orders.RandomWalkDecorator(var26);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    var28.setTimeoutMs(0L);
    int var43 = var28.newVar();
    double var44 = var27.varActivity(var43);
    org.sat4j.minisat.constraints.ClausalDataStructureWL var45 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    org.sat4j.core.VecInt var47 = new org.sat4j.core.VecInt(100);
    int var48 = var47.size();
    var47.sort();
    org.sat4j.minisat.core.Constr var50 = var45.createUnregisteredClause((org.sat4j.specs.IVecInt)var47);
    org.sat4j.core.Vec var51 = new org.sat4j.core.Vec(var43, (java.lang.Object)var45);
    var0.init(var43);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var53 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var54.expireTimeout();
    var53.setLearner((org.sat4j.minisat.core.Learner)var54);
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var57.expireTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeout(var60);
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    org.sat4j.minisat.core.IOrder var67 = var62.getOrder();
    java.lang.String var68 = var62.toString();
    java.lang.String var69 = var57.toString(var68);
    int var70 = var57.nVars();
    var53.setLearner((org.sat4j.minisat.core.Learner)var57);
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var72.expireTimeout();
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    var72.setTimeout(var75);
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    var77.setTimeoutOnConflicts(var80);
    org.sat4j.minisat.core.IOrder var82 = var77.getOrder();
    java.lang.String var83 = var77.toString();
    org.sat4j.minisat.core.Solver var84 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var85 = var84.getTimeout();
    org.sat4j.minisat.core.Solver var86 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var87 = var86.getTimeout();
    var84.setTimeoutOnConflicts(var87);
    var77.setTimeoutOnConflicts(var87);
    int var90 = org.sat4j.core.LiteralsUtils.posLit(var87);
    var53.conflictDetectedInWatchesFor(var75, var90);
    var0.assignLiteral(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@64585c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@64585c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var68.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@fca7d9\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var69.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@fca7d9\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@be843c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e24671\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var83.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e24671\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 4294966);

  }

  public void test433() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielHT var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielHT();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.reader.LecteurDimacs var3 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var1);
    org.sat4j.tools.ExtendedDimacsArrayReader var4 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var1);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var22 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var19);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    org.sat4j.core.ReadOnlyVecInt var26 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var24);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    org.sat4j.minisat.core.IOrder var33 = var28.getOrder();
    java.lang.String var34 = var28.toString();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    var28.setTimeoutOnConflicts(var38);
    org.sat4j.tools.ModelIterator var41 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var27, var38);
    boolean var43 = var41.isSatisfiable(true);
    boolean var44 = var41.isVerbose();
    boolean var45 = var19.isSatisfiable((org.sat4j.specs.IVecInt)var26, var44);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    int var51 = org.sat4j.core.LiteralsUtils.toInternal(var49);
    int var52 = var26.indexOf(var51);
    org.sat4j.tools.ModelIterator var53 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, var52);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    org.sat4j.minisat.core.IOrder var59 = var54.getOrder();
    java.lang.String var60 = var54.toString();
    var53.setLogPrefix(var60);
    org.sat4j.specs.IVecInt var62 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var53);
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var63.expireTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeout(var66);
    org.sat4j.minisat.constraints.cnf.UnitClause var68 = new org.sat4j.minisat.constraints.cnf.UnitClause(var66);
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var69.expireTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeout(var72);
    boolean var74 = var69.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var75 = var69.getOrder();
    org.sat4j.tools.SolutionCounter var76 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var69);
    int var77 = var69.nVars();
    int var78 = var68.get(var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var79 = var0.createCardinalityConstraint(var62, var78);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4b1f11\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4b1f11\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e07f70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var34.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e07f70\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1806f30\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var60.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1806f30\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);

  }

  public void test434() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.tools.ModelIterator var2 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ConstrGroup var3 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var4 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var4.setSolver(var5);
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var7.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var9 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var7.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var9);
    var4.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var7);
    var3.removeFrom((org.sat4j.specs.ISolver)var7);
    org.sat4j.minisat.restarts.MiniSATRestarts var13 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var14 = var13.toString();
    var7.setLogPrefix(var14);
    org.sat4j.tools.DecisionTracing var16 = new org.sat4j.tools.DecisionTracing(var14);
    var16.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var19 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var20 = var19.size();
    var19.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    var25.setTimeoutOnConflicts(var28);
    org.sat4j.minisat.core.IOrder var30 = var25.getOrder();
    java.lang.String var31 = var25.toString();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    var25.setTimeoutOnConflicts(var35);
    org.sat4j.tools.ModelIterator var38 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var24, var35);
    boolean var40 = var38.isSatisfiable(true);
    boolean var41 = var38.isVerbose();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    org.sat4j.minisat.core.IOrder var48 = var43.getOrder();
    java.lang.String var49 = var43.toString();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    var43.setTimeoutOnConflicts(var53);
    org.sat4j.tools.ModelIterator var56 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var42, var53);
    boolean var58 = var56.isSatisfiable(true);
    boolean var59 = var56.isVerbose();
    org.sat4j.reader.InstanceReader var60 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var56);
    int var61 = var56.nConstraints();
    boolean var62 = var56.isVerbose();
    boolean var63 = var56.isDBSimplificationAllowed();
    int var64 = var38.nextFreeVarId(var63);
    var16.conflictFound((org.sat4j.specs.IConstr)var19, (-1), var64);
    var2.setSearchListener((org.sat4j.specs.SearchListener)var16);
    java.lang.String var67 = var2.toString();
    org.sat4j.reader.ParseFormatException var68 = new org.sat4j.reader.ParseFormatException(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "MiniSAT restarts strategy"+ "'", var14.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1263ff4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var31.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1263ff4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2e6bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var49.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@2e6bf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16eea3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var67.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16eea3e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483s\nDB Simplification allowed=false\n--- End Solver configuration ---"));

  }

  public void test435() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    var30.start();
    var30.start();
    org.sat4j.tools.ConstrGroup var34 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var36 = new org.sat4j.tools.ConstrGroup(true);
    var34.add((org.sat4j.specs.IConstr)var36);
    boolean var38 = var34.learnt();
    var30.learn((org.sat4j.specs.IConstr)var34);
    org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL var40 = new org.sat4j.minisat.constraints.MixedDataStructureDanielCBWL();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var47 = new org.sat4j.minisat.orders.RandomWalkDecorator(var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    org.sat4j.minisat.core.IOrder var53 = var48.getOrder();
    java.lang.String var54 = var48.toString();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    var55.setTimeoutOnConflicts(var58);
    var48.setTimeoutOnConflicts(var58);
    var48.setTimeoutMs(0L);
    int var63 = var48.newVar();
    double var64 = var47.varActivity(var63);
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var40, (org.sat4j.minisat.core.IOrder)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.removeFrom((org.sat4j.specs.ISolver)var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1577bad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1577bad\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b2580c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var54.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b2580c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);

  }

  public void test436() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    int var7 = var6.size();
    java.lang.String var8 = var6.toString();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var11 = var10.pop();
    org.sat4j.core.ReadOnlyVecInt var12 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var10);
    org.sat4j.minisat.constraints.cnf.UnitClause var14 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var15 = var12.indexOf((-1));
    boolean var16 = var6.contains((-1));
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    int var22 = org.sat4j.core.LiteralsUtils.toInternal(var20);
    int var23 = var6.indexOf(var20);
    boolean var24 = var6.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.copyTo((org.sat4j.specs.IVecInt)var6);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test437() throws Throwable {

    org.sat4j.minisat.core.SearchParams var0 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    var1.setTimeoutMs(0L);
    int var16 = var1.newVar();
    var0.setInitConflictBound(var16);
    org.sat4j.minisat.constraints.cnf.UnitClause var19 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.SearchParams var20 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var22 = new org.sat4j.core.VecInt(100);
    int var23 = var22.size();
    var20.setInitConflictBound(var23);
    var20.setClaDecay(1.0d);
    var19.incActivity(1.0d);
    var0.setClaDecay(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4789e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@4789e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test438() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    var33.reset();
    org.sat4j.core.VecInt var36 = new org.sat4j.core.VecInt();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var33.isSatisfiable((org.sat4j.specs.IVecInt)var36);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15f92ce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@15f92ce\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test439() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    var62.onRestart();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var64.expireTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeout(var67);
    var62.setFactor(var67);
    int var70 = var62.getFactor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@41514b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@41514b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8c8315\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8c8315\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);

  }

  public void test440() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newDefaultAutoErasePhaseSaving();
    boolean var1 = var0.isDBSimplificationAllowed();
    org.sat4j.tools.Minimal4InclusionModel var2 = new org.sat4j.tools.Minimal4InclusionModel((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var3 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    var3.updateVar(0);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var23 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var22);
    org.sat4j.reader.LecteurDimacs var24 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var22);
    org.sat4j.opt.MaxSatDecorator var25 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var22);
    org.sat4j.core.VecInt var27 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var28 = var27.pop();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var35 = new org.sat4j.minisat.orders.RandomWalkDecorator(var34);
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    var36.setTimeoutMs(0L);
    int var51 = var36.newVar();
    double var52 = var35.varActivity(var51);
    int var53 = var27.indexOf(var51);
    var25.setExpectedNumberOfClauses(var51);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var55 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var57 = var55.select(100);
    var3.init(var51, var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var59 = var0.getIthConstr(var57);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1295825\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1295825\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@132f678\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@132f678\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 201);

  }

  public void test441() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.core.DefaultComparator var23 = new org.sat4j.core.DefaultComparator();
    var1.sort((java.util.Comparator)var23);
    boolean var25 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13de3a7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13de3a7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test442() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    var30.start();
    var30.start();
    org.sat4j.tools.ConstrGroup var34 = new org.sat4j.tools.ConstrGroup(true);
    org.sat4j.tools.ConstrGroup var36 = new org.sat4j.tools.ConstrGroup(true);
    var34.add((org.sat4j.specs.IConstr)var36);
    boolean var38 = var34.learnt();
    var30.learn((org.sat4j.specs.IConstr)var34);
    int var40 = var34.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1b96b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e1b96b\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);

  }

  public void test443() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    var33.reset();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    java.lang.String var43 = var37.toString();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    var37.setTimeoutOnConflicts(var47);
    org.sat4j.tools.ModelIterator var50 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var36, var47);
    boolean var52 = var50.isSatisfiable(true);
    boolean var53 = var50.isVerbose();
    org.sat4j.reader.InstanceReader var54 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var50);
    int var55 = var50.nConstraints();
    boolean var56 = var50.isVerbose();
    boolean var57 = var50.isDBSimplificationAllowed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var58 = var33.isSatisfiable(var57);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@177599f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@177599f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e86161\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var43.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@e86161\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test444() throws Throwable {

    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var3 = var2.pop();
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var10 = new org.sat4j.minisat.orders.RandomWalkDecorator(var9);
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    var11.setTimeoutMs(0L);
    int var26 = var11.newVar();
    double var27 = var10.varActivity(var26);
    int var28 = var2.indexOf(var26);
    var0.assignLiteral(var28);
    org.sat4j.tools.ConstrGroup var30 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var31 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var31.setSolver(var32);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var34.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var36 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var34.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var36);
    var31.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var34);
    var30.removeFrom((org.sat4j.specs.ISolver)var34);
    org.sat4j.minisat.restarts.MiniSATRestarts var40 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var41 = var40.toString();
    var34.setLogPrefix(var41);
    org.sat4j.tools.DecisionTracing var43 = new org.sat4j.tools.DecisionTracing(var41);
    var43.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var46 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var47 = var46.size();
    var46.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    var52.setTimeoutOnConflicts(var55);
    org.sat4j.minisat.core.IOrder var57 = var52.getOrder();
    java.lang.String var58 = var52.toString();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    var59.setTimeoutOnConflicts(var62);
    var52.setTimeoutOnConflicts(var62);
    org.sat4j.tools.ModelIterator var65 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var51, var62);
    boolean var67 = var65.isSatisfiable(true);
    boolean var68 = var65.isVerbose();
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var71 = var70.getTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeoutOnConflicts(var73);
    org.sat4j.minisat.core.IOrder var75 = var70.getOrder();
    java.lang.String var76 = var70.toString();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    var77.setTimeoutOnConflicts(var80);
    var70.setTimeoutOnConflicts(var80);
    org.sat4j.tools.ModelIterator var83 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var69, var80);
    boolean var85 = var83.isSatisfiable(true);
    boolean var86 = var83.isVerbose();
    org.sat4j.reader.InstanceReader var87 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var83);
    int var88 = var83.nConstraints();
    boolean var89 = var83.isVerbose();
    boolean var90 = var83.isDBSimplificationAllowed();
    int var91 = var65.nextFreeVarId(var90);
    var43.conflictFound((org.sat4j.specs.IConstr)var46, (-1), var91);
    org.sat4j.core.VecInt var93 = new org.sat4j.core.VecInt(var91);
    var0.assignLiteral(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19eb40d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19eb40d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "MiniSAT restarts strategy"+ "'", var41.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3df3bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var58.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@3df3bb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@168e8e6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var76.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@168e8e6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);

  }

  public void test445() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    int var5 = var0.nVars();
    org.sat4j.minisat.orders.PureOrder var6 = new org.sat4j.minisat.orders.PureOrder(var5);
    java.lang.String var7 = var6.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var8.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var10 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var8.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var10);
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(100);
    int var18 = var17.size();
    org.sat4j.minisat.core.Constr var19 = var10.createCardinalityConstraint((org.sat4j.specs.IVecInt)var13, var18);
    double var20 = var6.varActivity(var18);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var21 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    org.sat4j.minisat.core.IOrder var27 = var22.getOrder();
    java.lang.String var28 = var22.toString();
    var22.setTimeoutOnConflicts(0);
    var21.assignLiteral(0);
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    int var37 = var32.nVars();
    org.sat4j.minisat.orders.PureOrder var38 = new org.sat4j.minisat.orders.PureOrder(var37);
    org.sat4j.core.VecInt var40 = new org.sat4j.core.VecInt(100);
    int var41 = var40.size();
    var38.assignLiteral(var41);
    var21.assignLiteral(var41);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var6.updateVar(var41);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test446() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Constr var5 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    java.lang.String var13 = var7.toString();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    var7.setTimeoutOnConflicts(var17);
    org.sat4j.tools.ModelIterator var20 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var6, var17);
    boolean var22 = var20.isSatisfiable(true);
    boolean var23 = var20.isVerbose();
    org.sat4j.reader.InstanceReader var24 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var20);
    int var25 = var20.nConstraints();
    int[] var26 = var20.model();
    org.sat4j.tools.SolutionCounter var27 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var20);
    org.sat4j.core.VecInt var29 = new org.sat4j.core.VecInt(100);
    int[] var30 = var27.findModel((org.sat4j.specs.IVecInt)var29);
    org.sat4j.minisat.core.Constr var31 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ecc2a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var13.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1ecc2a8\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);

  }

  public void test447() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.Object[] var76 = var74.toArray();
    int var77 = var74.size();
    java.lang.String var78 = var74.toString();
    double[] var81 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var82 = new org.sat4j.minisat.core.Heap(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var74.remove((java.lang.Object)var82);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dacf15\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dacf15\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1586789\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1586789\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a4bb1a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a4bb1a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1959392\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1959392\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test448() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    org.sat4j.core.VecInt var16 = new org.sat4j.core.VecInt(100);
    boolean var17 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var35 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var32);
    org.sat4j.core.VecInt var37 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var38 = var37.pop();
    org.sat4j.core.ReadOnlyVecInt var39 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var37);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    var41.setTimeoutOnConflicts(var51);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var40, var51);
    boolean var56 = var54.isSatisfiable(true);
    boolean var57 = var54.isVerbose();
    boolean var58 = var32.isSatisfiable((org.sat4j.specs.IVecInt)var39, var57);
    boolean var59 = var39.isEmpty();
    org.sat4j.core.VecInt var61 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var62 = var61.pop();
    org.sat4j.core.ReadOnlyVecInt var63 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var61);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var64.expireTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeout(var67);
    org.sat4j.minisat.core.Solver var69 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var70 = var69.getTimeout();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var72 = var71.getTimeout();
    var69.setTimeoutOnConflicts(var72);
    org.sat4j.minisat.core.IOrder var74 = var69.getOrder();
    java.lang.String var75 = var69.toString();
    java.lang.String var76 = var64.toString(var75);
    boolean var77 = var61.equals((java.lang.Object)var64);
    boolean var78 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var39, var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a4e07\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a4e07\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1564a9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1564a9\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@87c8d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@87c8d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var75.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@18b99\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var76.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@18b99\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b62b97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test449() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    long var63 = var62.nextRestartNumberOfConflict();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var64.expireTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeout(var67);
    org.sat4j.minisat.constraints.cnf.UnitClause var69 = new org.sat4j.minisat.constraints.cnf.UnitClause(var67);
    org.sat4j.minisat.core.Solver var70 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var70.expireTimeout();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var73 = var72.getTimeout();
    var70.setTimeout(var73);
    boolean var75 = var70.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var76 = var70.getOrder();
    org.sat4j.tools.SolutionCounter var77 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var70);
    int var78 = var70.nVars();
    int var79 = var69.get(var78);
    var62.setFactor(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1418841\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1418841\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10505b1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@10505b1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);

  }

  public void test450() throws Throwable {

    double[] var2 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var3 = new org.sat4j.minisat.core.Heap(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var5 = var4.getTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeoutOnConflicts(var7);
    org.sat4j.minisat.core.IOrder var9 = var4.getOrder();
    java.lang.String var10 = var4.toString();
    var4.setTimeoutOnConflicts(0);
    int var13 = org.sat4j.core.LiteralsUtils.posLit(0);
    var3.insert(0);
    boolean var15 = var3.empty();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    int var21 = var16.nVars();
    org.sat4j.minisat.orders.PureOrder var22 = new org.sat4j.minisat.orders.PureOrder(var21);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    int var25 = var24.size();
    var22.assignLiteral(var25);
    org.sat4j.minisat.core.ILits var27 = var22.getVocabulary();
    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var28 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    var22.setPhaseSelectionStrategy((org.sat4j.minisat.core.IPhaseSelectionStrategy)var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var31 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var30);
    org.sat4j.reader.LecteurDimacs var32 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var30);
    org.sat4j.opt.MaxSatDecorator var33 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var30);
    org.sat4j.core.VecInt var35 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var36 = var35.pop();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    org.sat4j.minisat.core.IOrder var42 = var37.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var43 = new org.sat4j.minisat.orders.RandomWalkDecorator(var42);
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    var44.setTimeoutMs(0L);
    int var59 = var44.newVar();
    double var60 = var43.varActivity(var59);
    int var61 = var35.indexOf(var59);
    var33.setExpectedNumberOfClauses(var59);
    org.sat4j.minisat.core.SearchParams var63 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var65 = new org.sat4j.core.VecInt(100);
    int var66 = var65.size();
    var63.setInitConflictBound(var66);
    var33.setExpectedNumberOfClauses(var66);
    double var69 = var22.varActivity(var66);
    org.sat4j.tools.ConstrGroup var70 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var71 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var71.setSolver(var72);
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var74.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var76 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var74.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var76);
    var71.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var74);
    var70.removeFrom((org.sat4j.specs.ISolver)var74);
    org.sat4j.minisat.restarts.MiniSATRestarts var80 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var81 = var80.toString();
    var74.setLogPrefix(var81);
    org.sat4j.tools.DecisionTracing var83 = new org.sat4j.tools.DecisionTracing(var81);
    var83.beginLoop();
    org.sat4j.minisat.core.Solver var85 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var86 = var85.getTimeout();
    org.sat4j.minisat.core.Solver var87 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var88 = var87.getTimeout();
    var85.setTimeoutOnConflicts(var88);
    int var90 = var85.getTimeout();
    var83.backtracking(var90);
    var22.setPeriod(var90);
    boolean var93 = var3.heapProperty(var90);
    int var94 = var3.getmin();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b449c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var10.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b449c7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@233dc6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@233dc6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "MiniSAT restarts strategy"+ "'", var81.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test451() throws Throwable {

    org.sat4j.tools.ConstrGroup var0 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var6 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var4.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var6);
    var1.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var4);
    var0.removeFrom((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.restarts.MiniSATRestarts var10 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var11 = var10.toString();
    var4.setLogPrefix(var11);
    org.sat4j.tools.DecisionTracing var13 = new org.sat4j.tools.DecisionTracing(var11);
    var13.beginLoop();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    var15.setTimeoutOnConflicts(var18);
    int var20 = var15.getTimeout();
    var13.backtracking(var20);
    var13.solutionFound();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var25 = new org.sat4j.minisat.constraints.cnf.UnitClause(var24);
    var13.assuming(var24);
    org.sat4j.core.VecInt var28 = new org.sat4j.core.VecInt(100);
    int var29 = var28.size();
    java.lang.String var30 = var28.toString();
    org.sat4j.core.VecInt var32 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var33 = var32.pop();
    org.sat4j.core.ReadOnlyVecInt var34 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var32);
    org.sat4j.minisat.constraints.cnf.UnitClause var36 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var37 = var34.indexOf((-1));
    boolean var38 = var28.contains((-1));
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    var39.setTimeoutOnConflicts(var42);
    int var44 = org.sat4j.core.LiteralsUtils.toInternal(var42);
    int var45 = var28.indexOf(var42);
    boolean var46 = var28.isEmpty();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var47 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    org.sat4j.minisat.core.IOrder var54 = var49.getOrder();
    java.lang.String var55 = var49.toString();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeoutOnConflicts(var59);
    var49.setTimeoutOnConflicts(var59);
    org.sat4j.tools.ModelIterator var62 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var48, var59);
    var48.setTimeoutOnConflicts(0);
    var47.updateVar(0);
    var28.shrinkTo(0);
    var13.adding(0);
    var13.restarting();
    var13.start();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "MiniSAT restarts strategy"+ "'", var11.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a1238\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var55.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1a1238\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);

  }

  public void test452() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var1 = var0.isSatisfiable();
    org.sat4j.tools.ConstrGroup var2 = new org.sat4j.tools.ConstrGroup(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test453() throws Throwable {

    org.sat4j.minisat.learning.MiniSATLearning var0 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var1 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var0.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    int var8 = var3.getTimeout();
    var1.setLearner((org.sat4j.minisat.core.Learner)var3);
    java.lang.String var10 = var3.getLogPrefix();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "c "+ "'", var10.equals("c "));

  }

  public void test454() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    var9.setTimeoutOnConflicts(var12);
    org.sat4j.minisat.core.IOrder var14 = var9.getOrder();
    java.lang.String var15 = var9.toString();
    java.lang.String var16 = var4.toString(var15);
    int var17 = var4.nVars();
    var0.setLearner((org.sat4j.minisat.core.Learner)var4);
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    org.sat4j.minisat.core.IOrder var25 = var20.getOrder();
    java.lang.String var26 = var20.toString();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    var20.setTimeoutOnConflicts(var30);
    org.sat4j.tools.ModelIterator var33 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var19, var30);
    boolean var35 = var33.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var36 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var33);
    org.sat4j.core.VecInt var38 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var39 = var38.pop();
    org.sat4j.core.ReadOnlyVecInt var40 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var38);
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    org.sat4j.minisat.core.IOrder var47 = var42.getOrder();
    java.lang.String var48 = var42.toString();
    org.sat4j.minisat.core.Solver var49 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var50 = var49.getTimeout();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    var49.setTimeoutOnConflicts(var52);
    var42.setTimeoutOnConflicts(var52);
    org.sat4j.tools.ModelIterator var55 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var41, var52);
    boolean var57 = var55.isSatisfiable(true);
    boolean var58 = var55.isVerbose();
    boolean var59 = var33.isSatisfiable((org.sat4j.specs.IVecInt)var40, var58);
    org.sat4j.specs.IteratorInt var60 = var40.iterator();
    org.sat4j.minisat.core.Constr var61 = var0.createClause((org.sat4j.specs.IVecInt)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var15.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@88d5f2\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@88d5f2\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c18c84\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1afaaf7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var26.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1afaaf7\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1724981\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var48.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1724981\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);

  }

  public void test455() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    boolean var41 = var21.isEmpty();
    org.sat4j.tools.ConstrGroup var42 = new org.sat4j.tools.ConstrGroup(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@93ada3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@93ada3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b3774c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b3774c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test456() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.specs.TimeoutException var20 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var21 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var20);
    org.sat4j.specs.TimeoutException var22 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var21);
    java.lang.String var23 = var21.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IProblem var24 = var18.parseInstance(var23);
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8d5e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f8d5e0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var23.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));

  }

  public void test457() throws Throwable {

    org.sat4j.core.Vec var1 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeoutOnConflicts(var6);
    org.sat4j.minisat.core.IOrder var8 = var3.getOrder();
    java.lang.String var9 = var3.toString();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    var3.setTimeoutOnConflicts(var13);
    org.sat4j.tools.ModelIterator var16 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var2, var13);
    boolean var18 = var16.isSatisfiable(true);
    boolean var19 = var16.isVerbose();
    org.sat4j.reader.InstanceReader var20 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var16);
    int var21 = var16.nConstraints();
    var1.ensure(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    var23.setTimeoutOnConflicts(0);
    var1.shrink(0);
    org.sat4j.core.ReadOnlyVec var33 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var1);
    java.lang.Object[] var34 = var33.toArray();
    boolean var35 = var33.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.shrinkTo(0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@359f5e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var9.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@359f5e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17635fb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17635fb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test458() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    var0.setTimeoutOnConflicts(var3);
    org.sat4j.minisat.core.IOrder var5 = var0.getOrder();
    java.lang.String var6 = var0.toString();
    var0.setTimeoutOnConflicts(0);
    boolean var9 = var0.simplifyDB();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    boolean var11 = var10.isSatisfiable();
    boolean var12 = var10.isDBSimplificationAllowed();
    int var13 = var0.nextFreeVarId(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1500d63\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var6.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1500d63\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);

  }

  public void test459() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    java.lang.String var17 = var14.getLogPrefix();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1755225\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1755225\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "c "+ "'", var17.equals("c "));

  }

  public void test460() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    int var29 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var17.unsafePush(var29);
    var17.sortUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 20);

  }

  public void test461() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var31 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var32 = var31.size();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var34 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var33);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    var35.setTimeoutMs(0L);
    int var50 = var35.newVar();
    int var51 = var35.nVars();
    org.sat4j.specs.IVecInt var52 = var28.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var31, var34, var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var53 = var0.createClause(var34);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f2c505\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f2c505\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);

  }

  public void test462() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var13 = var2.toArray();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    var2.ensure(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dfc5fd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@dfc5fd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);

  }

  public void test463() throws Throwable {

    org.sat4j.minisat.restarts.ArminRestarts var0 = new org.sat4j.minisat.restarts.ArminRestarts();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    int var3 = org.sat4j.core.LiteralsUtils.toInternal(10);
    var1.setInitConflictBound(10);
    var0.init(var1);
    double var6 = var1.getConflictBoundIncFactor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.5d);

  }

  public void test464() throws Throwable {

    org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy var0 = new org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.sat4j.tools.ConflictLevelTracing var3 = new org.sat4j.tools.ConflictLevelTracing(var2);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var4 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    var4.updateVar(var8);
    org.sat4j.minisat.core.SearchParams var11 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    int var14 = var13.size();
    var11.setInitConflictBound(var14);
    int var16 = var4.select(var14);
    var3.adding(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "phase appearing in latest learned clause"+ "'", var1.equals("phase appearing in latest learned clause"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "phase appearing in latest learned clause"+ "'", var2.equals("phase appearing in latest learned clause"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);

  }

  public void test465() throws Throwable {

    org.sat4j.minisat.constraints.MixedDataStructureDanielWL var0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var1 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var2.expireTimeout();
    var1.setLearner((org.sat4j.minisat.core.Learner)var2);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeout(var8);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    java.lang.String var17 = var5.toString(var16);
    int var18 = var5.nVars();
    var1.setLearner((org.sat4j.minisat.core.Learner)var5);
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    org.sat4j.minisat.core.IOrder var26 = var21.getOrder();
    java.lang.String var27 = var21.toString();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    var28.setTimeoutOnConflicts(var31);
    var21.setTimeoutOnConflicts(var31);
    org.sat4j.tools.ModelIterator var34 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var20, var31);
    boolean var36 = var34.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var37 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var34);
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var40 = var39.pop();
    org.sat4j.core.ReadOnlyVecInt var41 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var39);
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    org.sat4j.minisat.core.IOrder var48 = var43.getOrder();
    java.lang.String var49 = var43.toString();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    var43.setTimeoutOnConflicts(var53);
    org.sat4j.tools.ModelIterator var56 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var42, var53);
    boolean var58 = var56.isSatisfiable(true);
    boolean var59 = var56.isVerbose();
    boolean var60 = var34.isSatisfiable((org.sat4j.specs.IVecInt)var41, var59);
    org.sat4j.core.ReadOnlyVecInt var61 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var41);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var62 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    var62.updateVar(var66);
    org.sat4j.minisat.core.SearchParams var69 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var71 = new org.sat4j.core.VecInt(100);
    int var72 = var71.size();
    var69.setInitConflictBound(var72);
    int var74 = var62.select(var72);
    org.sat4j.minisat.core.Solver var75 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var76 = var75.getTimeout();
    org.sat4j.minisat.core.Solver var77 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var78 = var77.getTimeout();
    var75.setTimeoutOnConflicts(var78);
    int var80 = var75.nVars();
    org.sat4j.minisat.orders.PureOrder var81 = new org.sat4j.minisat.orders.PureOrder(var80);
    var62.updateVar(var80);
    org.sat4j.minisat.core.Constr var83 = var1.createCardinalityConstraint((org.sat4j.specs.IVecInt)var41, var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var84 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var41);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@3e1b90\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ Begin Solver configuration ---\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Stops conflict analysis at the first Unique Implication Point\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---org.sat4j.minisat.constraints.MixedDataStructureDanielWL@3e1b90\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Learn all clauses as in MiniSAT\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---claDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Expensive reason simplification\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---MiniSAT restarts strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---Glucose learned constraints deletion strategy\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---timeout=2147483s\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---DB Simplification allowed=false\n--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17ac169\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ------ End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f683b0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var27.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@f683b0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19dab79\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var49.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19dab79\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);

  }

  public void test466() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    int[] var2 = var1.findModel();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.tools.DimacsArrayReader var4 = new org.sat4j.tools.DimacsArrayReader((org.sat4j.specs.ISolver)var3);
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeout(var8);
    boolean var10 = var5.isDBSimplificationAllowed();
    int var11 = var3.nextFreeVarId(var10);
    boolean var12 = var1.isSatisfiable(var10);
    int[] var13 = var1.findModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test467() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    int[] var2 = var1.findModel();
    int[] var3 = var1.model();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var32 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@120ff5e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@120ff5e\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test468() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.constraints.cnf.UnitClause var2 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    var0.init((-1));
    java.lang.String var4 = var0.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    java.lang.String var10 = org.sat4j.minisat.constraints.cnf.Lits.toString(var8);
    var0.assignLiteral(var8);
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var12 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var12.setLearner((org.sat4j.minisat.core.Learner)var13);
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    var16.setTimeoutOnConflicts(var19);
    int var21 = var16.nVars();
    org.sat4j.minisat.orders.PureOrder var22 = new org.sat4j.minisat.orders.PureOrder(var21);
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    int var25 = var24.size();
    var22.assignLiteral(var25);
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearning((org.sat4j.minisat.core.DataStructureFactory)var12, (org.sat4j.minisat.core.IOrder)var22);
    org.sat4j.core.VecInt var29 = new org.sat4j.core.VecInt(100);
    int var30 = var29.size();
    var29.sort();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    var32.setTimeoutOnConflicts(var35);
    int var37 = org.sat4j.core.LiteralsUtils.toInternal(var35);
    org.sat4j.specs.IVecInt var38 = var29.push(var37);
    double[] var41 = new double[] { 0.0d, 0.0d};
    org.sat4j.minisat.core.Heap var42 = new org.sat4j.minisat.core.Heap(var41);
    org.sat4j.core.Vec var44 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    var46.setTimeoutOnConflicts(var49);
    org.sat4j.minisat.core.IOrder var51 = var46.getOrder();
    java.lang.String var52 = var46.toString();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    var46.setTimeoutOnConflicts(var56);
    org.sat4j.tools.ModelIterator var59 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var45, var56);
    boolean var61 = var59.isSatisfiable(true);
    boolean var62 = var59.isVerbose();
    org.sat4j.reader.InstanceReader var63 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var59);
    int var64 = var59.nConstraints();
    var44.ensure(var64);
    boolean var66 = var42.inHeap(var64);
    org.sat4j.specs.IVecInt var67 = var29.push(var64);
    int var68 = var27.newVar(var64);
    org.sat4j.tools.ConstrGroup var69 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var70 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var71 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var70.setSolver(var71);
    org.sat4j.minisat.core.Solver var73 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var73.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var75 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var73.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var75);
    var70.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var73);
    var69.removeFrom((org.sat4j.specs.ISolver)var73);
    org.sat4j.minisat.restarts.MiniSATRestarts var79 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var80 = var79.toString();
    var73.setLogPrefix(var80);
    org.sat4j.tools.DecisionTracing var82 = new org.sat4j.tools.DecisionTracing(var80);
    org.sat4j.core.VecInt var84 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var85 = var84.pop();
    org.sat4j.core.ReadOnlyVecInt var86 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var84);
    org.sat4j.minisat.constraints.cnf.UnitClause var88 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var89 = var86.indexOf((-1));
    var82.assuming(var89);
    var0.init(var64, var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "positive phase selection"+ "'", var4.equals("positive phase selection"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "-1073741"+ "'", var10.equals("-1073741"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@faa473\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var52.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@faa473\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "MiniSAT restarts strategy"+ "'", var80.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));

  }

  public void test469() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    int var3 = var0.nVars();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var32 = var0.getIthConstr(var31);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f92fca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f92fca\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test470() throws Throwable {

    int[] var3 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var4 = new org.sat4j.core.VecInt(var3);
    int[] var8 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(var8);
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    int var12 = var11.size();
    var9.shrink(var12);
    var4.pushAll((org.sat4j.specs.IVecInt)var9);
    org.sat4j.minisat.core.SearchParams var15 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(100);
    int var18 = var17.size();
    var15.setInitConflictBound(var18);
    org.sat4j.specs.IVecInt var20 = var4.push(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test471() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.specs.IteratorInt var41 = var21.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.clear();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@189a966\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@189a966\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16d6dc3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@16d6dc3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);

  }

  public void test472() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    java.lang.String var1 = var0.toString();
    org.sat4j.specs.TimeoutException var2 = new org.sat4j.specs.TimeoutException(var1);
    org.sat4j.specs.ContradictionException var3 = new org.sat4j.specs.ContradictionException((java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Limit learning to clauses of size smaller or equal to 3"+ "'", var1.equals("Limit learning to clauses of size smaller or equal to 3"));

  }

  public void test473() throws Throwable {

    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    int var6 = var1.nVars();
    org.sat4j.minisat.orders.PureOrder var7 = new org.sat4j.minisat.orders.PureOrder(var6);
    int var8 = var7.numberOfInterestingVariables();
    int var9 = var0.select(var8);
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var15 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    var15.init((-1));
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var24 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    org.sat4j.minisat.core.IOrder var31 = var26.getOrder();
    java.lang.String var32 = var26.toString();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    var33.setTimeoutOnConflicts(var36);
    var26.setTimeoutOnConflicts(var36);
    org.sat4j.tools.ModelIterator var39 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var25, var36);
    var25.setTimeoutOnConflicts(0);
    var24.updateVar(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var44 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var43);
    org.sat4j.reader.LecteurDimacs var45 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var43);
    org.sat4j.opt.MaxSatDecorator var46 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var43);
    org.sat4j.core.VecInt var48 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var49 = var48.pop();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    org.sat4j.minisat.core.Solver var52 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var53 = var52.getTimeout();
    var50.setTimeoutOnConflicts(var53);
    org.sat4j.minisat.core.IOrder var55 = var50.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var56 = new org.sat4j.minisat.orders.RandomWalkDecorator(var55);
    org.sat4j.minisat.core.Solver var57 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var58 = var57.getTimeout();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    var57.setTimeoutOnConflicts(var60);
    org.sat4j.minisat.core.IOrder var62 = var57.getOrder();
    java.lang.String var63 = var57.toString();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    var57.setTimeoutOnConflicts(var67);
    var57.setTimeoutMs(0L);
    int var72 = var57.newVar();
    double var73 = var56.varActivity(var72);
    int var74 = var48.indexOf(var72);
    var46.setExpectedNumberOfClauses(var72);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var76 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    int var78 = var76.select(100);
    var24.init(var72, var78);
    var15.init(var22, var78);
    var10.setTimeout(var78);
    var0.assignLiteral(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17172bd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var32.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@17172bd\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fa3ebb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var63.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@fa3ebb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 201);

  }

  public void test474() throws Throwable {

    org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy var0 = new org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy();
    org.sat4j.minisat.core.SearchParams var1 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    int var4 = var3.size();
    var1.setInitConflictBound(var4);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.minisat.constraints.cnf.UnitClause var8 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var9 = var8.size();
    org.sat4j.core.VecInt var11 = new org.sat4j.core.VecInt(100);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.specs.IVecInt var60 = var6.analyzeFinalConflictInTermsOfAssumptions((org.sat4j.minisat.core.Constr)var8, (org.sat4j.specs.IVecInt)var11, var59);
    var0.init(var4, var59);
    org.sat4j.minisat.restarts.LubyRestarts var62 = new org.sat4j.minisat.restarts.LubyRestarts(var4);
    var62.onRestart();
    org.sat4j.minisat.core.SearchParams var64 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var66 = new org.sat4j.core.VecInt(100);
    int var67 = var66.size();
    var64.setInitConflictBound(var67);
    var62.init(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c95b1f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c95b1f\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8d753\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@8d753\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test475() throws Throwable {

    org.sat4j.minisat.constraints.ClausalDataStructureWL var0 = new org.sat4j.minisat.constraints.ClausalDataStructureWL();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Constr var5 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniSATHeap((org.sat4j.minisat.core.DataStructureFactory)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test476() throws Throwable {

    org.sat4j.minisat.constraints.cnf.UnitClause var1 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var3 = var2.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var4 = new org.sat4j.minisat.constraints.cnf.UnitClause(var3);
    var4.incActivity(10.0d);
    var1.forwardActivity(10.0d);
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.reader.LecteurDimacs var10 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var8);
    org.sat4j.tools.ExtendedDimacsArrayReader var11 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var8);
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.core.IOrder var18 = var13.getOrder();
    java.lang.String var19 = var13.toString();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    var20.setTimeoutOnConflicts(var23);
    var13.setTimeoutOnConflicts(var23);
    org.sat4j.tools.ModelIterator var26 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var12, var23);
    boolean var28 = var26.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var29 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var26);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.core.ReadOnlyVecInt var33 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var31);
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var36 = var35.getTimeout();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    var35.setTimeoutOnConflicts(var38);
    org.sat4j.minisat.core.IOrder var40 = var35.getOrder();
    java.lang.String var41 = var35.toString();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    var42.setTimeoutOnConflicts(var45);
    var35.setTimeoutOnConflicts(var45);
    org.sat4j.tools.ModelIterator var48 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var34, var45);
    boolean var50 = var48.isSatisfiable(true);
    boolean var51 = var48.isVerbose();
    boolean var52 = var26.isSatisfiable((org.sat4j.specs.IVecInt)var33, var51);
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var56 = var55.getTimeout();
    var53.setTimeoutOnConflicts(var56);
    int var58 = org.sat4j.core.LiteralsUtils.toInternal(var56);
    int var59 = var33.indexOf(var58);
    org.sat4j.tools.ModelIterator var60 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var8, var59);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var61 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var62 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var63 = var62.getTimeout();
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    var62.setTimeoutOnConflicts(var65);
    var61.updateVar(var65);
    org.sat4j.minisat.core.SearchParams var68 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var70 = new org.sat4j.core.VecInt(100);
    int var71 = var70.size();
    var68.setInitConflictBound(var71);
    int var73 = var61.select(var71);
    org.sat4j.minisat.core.Solver var74 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var75 = var74.getTimeout();
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var77 = var76.getTimeout();
    var74.setTimeoutOnConflicts(var77);
    int var79 = var74.nVars();
    org.sat4j.minisat.orders.PureOrder var80 = new org.sat4j.minisat.orders.PureOrder(var79);
    var61.updateVar(var79);
    org.sat4j.tools.ModelIterator var82 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var60, var79);
    org.sat4j.minisat.core.SearchParams var83 = new org.sat4j.minisat.core.SearchParams(10.0d, var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6742fb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var19.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6742fb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6efb5a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var41.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6efb5a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test477() throws Throwable {

    org.sat4j.specs.TimeoutException var1 = new org.sat4j.specs.TimeoutException();
    org.sat4j.reader.ParseFormatException var2 = new org.sat4j.reader.ParseFormatException("", (java.lang.Throwable)var1);
    org.sat4j.specs.TimeoutException var3 = new org.sat4j.specs.TimeoutException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.toString();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var5.expireTimeout();
    org.sat4j.core.VecInt var8 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var9 = var8.pop();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var11 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var12 = var11.getTimeout();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    var11.setTimeoutOnConflicts(var14);
    org.sat4j.minisat.core.IOrder var16 = var11.getOrder();
    java.lang.String var17 = var11.toString();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var19 = var18.getTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeoutOnConflicts(var21);
    var11.setTimeoutOnConflicts(var21);
    org.sat4j.tools.ModelIterator var24 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var10, var21);
    boolean var26 = var24.isSatisfiable(true);
    boolean var27 = var24.isVerbose();
    boolean var28 = var5.isSatisfiable((org.sat4j.specs.IVecInt)var8, var27);
    java.util.Map var29 = var5.getStat();
    org.sat4j.tools.DotSearchTracing var30 = new org.sat4j.tools.DotSearchTracing(var4, var29);
    org.sat4j.tools.TextOutputTracing var31 = new org.sat4j.tools.TextOutputTracing(var29);
    var31.restarting();
    var31.beginLoop();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.sat4j.reader.ParseFormatException: DIMACS Format error: "+ "'", var4.equals("org.sat4j.reader.ParseFormatException: DIMACS Format error: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13698c6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var17.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@13698c6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);

  }

  public void test478() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    var3.setDBSimplificationAllowed(false);
    java.lang.Number var6 = var3.getObjectiveValue();
    org.sat4j.core.Vec var8 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    var10.setTimeoutOnConflicts(var13);
    org.sat4j.minisat.core.IOrder var15 = var10.getOrder();
    java.lang.String var16 = var10.toString();
    org.sat4j.minisat.core.Solver var17 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var18 = var17.getTimeout();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    var17.setTimeoutOnConflicts(var20);
    var10.setTimeoutOnConflicts(var20);
    org.sat4j.tools.ModelIterator var23 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var9, var20);
    boolean var25 = var23.isSatisfiable(true);
    boolean var26 = var23.isVerbose();
    org.sat4j.reader.InstanceReader var27 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var23);
    int var28 = var23.nConstraints();
    var8.ensure(var28);
    var3.forceObjectiveValueTo((java.lang.Number)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 0+ "'", var6.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ac950\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var16.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9ac950\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test479() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    int[] var38 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeout(var43);
    var39.ensure(var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    var39.pushAll(var47);
    int[] var49 = var33.findModel((org.sat4j.specs.IVecInt)var39);
    var33.clearLearntClauses();
    var33.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd60ac\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1cd60ac\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test480() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.tools.ExtendedDimacsArrayReader var3 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var0);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    boolean var20 = var18.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var21 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var18);
    org.sat4j.core.VecInt var23 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var24 = var23.pop();
    org.sat4j.core.ReadOnlyVecInt var25 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var23);
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var27 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var28 = var27.getTimeout();
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    var27.setTimeoutOnConflicts(var30);
    org.sat4j.minisat.core.IOrder var32 = var27.getOrder();
    java.lang.String var33 = var27.toString();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    var27.setTimeoutOnConflicts(var37);
    org.sat4j.tools.ModelIterator var40 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var26, var37);
    boolean var42 = var40.isSatisfiable(true);
    boolean var43 = var40.isVerbose();
    boolean var44 = var18.isSatisfiable((org.sat4j.specs.IVecInt)var25, var43);
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    org.sat4j.minisat.core.Solver var47 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var48 = var47.getTimeout();
    var45.setTimeoutOnConflicts(var48);
    int var50 = org.sat4j.core.LiteralsUtils.toInternal(var48);
    int var51 = var25.indexOf(var50);
    org.sat4j.tools.ModelIterator var52 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var51);
    org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy var53 = new org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    var53.updateVar(var57);
    org.sat4j.minisat.core.SearchParams var60 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var62 = new org.sat4j.core.VecInt(100);
    int var63 = var62.size();
    var60.setInitConflictBound(var63);
    int var65 = var53.select(var63);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    int var71 = var66.nVars();
    org.sat4j.minisat.orders.PureOrder var72 = new org.sat4j.minisat.orders.PureOrder(var71);
    var53.updateVar(var71);
    org.sat4j.tools.ModelIterator var74 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var52, var71);
    var74.clearLearntClauses();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1015ce2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1015ce2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@66b522\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var33.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@66b522\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test481() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var19 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var20 = var19.getTimeout();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    var19.setTimeoutOnConflicts(var22);
    org.sat4j.minisat.core.IOrder var24 = var19.getOrder();
    java.lang.String var25 = var19.toString();
    org.sat4j.minisat.core.Solver var26 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var27 = var26.getTimeout();
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var29 = var28.getTimeout();
    var26.setTimeoutOnConflicts(var29);
    var19.setTimeoutOnConflicts(var29);
    org.sat4j.tools.ModelIterator var32 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var18, var29);
    boolean var34 = var32.isSatisfiable(true);
    boolean var35 = var32.isVerbose();
    org.sat4j.reader.InstanceReader var36 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var32);
    int var37 = var32.nConstraints();
    boolean var38 = var32.isVerbose();
    boolean var39 = var32.isDBSimplificationAllowed();
    int var40 = var14.nextFreeVarId(var39);
    org.sat4j.core.Vec var42 = new org.sat4j.core.Vec(0);
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var44 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var45 = var44.getTimeout();
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var47 = var46.getTimeout();
    var44.setTimeoutOnConflicts(var47);
    org.sat4j.minisat.core.IOrder var49 = var44.getOrder();
    java.lang.String var50 = var44.toString();
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    var44.setTimeoutOnConflicts(var54);
    org.sat4j.tools.ModelIterator var57 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var43, var54);
    boolean var59 = var57.isSatisfiable(true);
    boolean var60 = var57.isVerbose();
    org.sat4j.reader.InstanceReader var61 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var57);
    int var62 = var57.nConstraints();
    var42.ensure(var62);
    org.sat4j.minisat.core.Solver var64 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var65 = var64.getTimeout();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    var64.setTimeoutOnConflicts(var67);
    org.sat4j.minisat.core.IOrder var69 = var64.getOrder();
    java.lang.String var70 = var64.toString();
    var64.setTimeoutOnConflicts(0);
    var42.shrink(0);
    org.sat4j.core.ReadOnlyVec var74 = new org.sat4j.core.ReadOnlyVec((org.sat4j.specs.IVec)var42);
    var14.addAllClauses((org.sat4j.specs.IVec)var74);
    java.lang.String var76 = var74.toString();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var79 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var80 = var79.getTimeout();
    org.sat4j.minisat.core.Solver var81 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var82 = var81.getTimeout();
    var79.setTimeoutOnConflicts(var82);
    org.sat4j.minisat.core.IOrder var84 = var79.getOrder();
    java.lang.String var85 = var79.toString();
    org.sat4j.minisat.core.Solver var86 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var87 = var86.getTimeout();
    org.sat4j.minisat.core.Solver var88 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var89 = var88.getTimeout();
    var86.setTimeoutOnConflicts(var89);
    var79.setTimeoutOnConflicts(var89);
    org.sat4j.tools.ModelIterator var92 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var78, var89);
    boolean var94 = var92.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var95 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var92);
    org.sat4j.tools.ModelIterator var96 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var92);
    org.sat4j.core.Vec var97 = new org.sat4j.core.Vec(10, (java.lang.Object)var96);
    int var98 = var74.indexOf((java.lang.Object)10);
    boolean var99 = var74.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b262e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b262e2\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@150818a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var25.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@150818a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c00586\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var50.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@c00586\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b8053\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var70.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1b8053\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6d127c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var85.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6d127c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test482() throws Throwable {

    org.sat4j.core.VecInt var1 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var2 = var1.pop();
    org.sat4j.core.ReadOnlyVecInt var3 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var1);
    java.lang.String var4 = var3.toString();
    int[] var5 = new int[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.copyTo(var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test483() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestWL();
    org.sat4j.tools.xplain.Xplain var1 = new org.sat4j.tools.xplain.Xplain((org.sat4j.specs.ISolver)var0);
    boolean var2 = var1.isSatisfiable();
    int[] var3 = var1.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test484() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var0.expireTimeout();
    org.sat4j.core.VecInt var3 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var4 = var3.pop();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    var6.setTimeoutOnConflicts(var9);
    org.sat4j.minisat.core.IOrder var11 = var6.getOrder();
    java.lang.String var12 = var6.toString();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    var6.setTimeoutOnConflicts(var16);
    org.sat4j.tools.ModelIterator var19 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var5, var16);
    boolean var21 = var19.isSatisfiable(true);
    boolean var22 = var19.isVerbose();
    boolean var23 = var0.isSatisfiable((org.sat4j.specs.IVecInt)var3, var22);
    long var24 = var0.getTimeoutMs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cde2d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var12.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@cde2d3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483647L);

  }

  public void test485() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var17 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.core.VecInt var19 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var20 = var19.pop();
    org.sat4j.core.ReadOnlyVecInt var21 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var19);
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    java.lang.String var29 = var23.toString();
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    var23.setTimeoutOnConflicts(var33);
    org.sat4j.tools.ModelIterator var36 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var22, var33);
    boolean var38 = var36.isSatisfiable(true);
    boolean var39 = var36.isVerbose();
    boolean var40 = var14.isSatisfiable((org.sat4j.specs.IVecInt)var21, var39);
    org.sat4j.specs.IteratorInt var41 = var21.iterator();
    boolean var42 = var21.isEmpty();
    int[] var46 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var47 = new org.sat4j.core.VecInt(var46);
    org.sat4j.core.VecInt var49 = new org.sat4j.core.VecInt(100);
    int var50 = var49.size();
    var47.shrink(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.insertFirst(var50);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6500ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6500ba\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f3ae3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var29.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@11f3ae3\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test486() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var1 = var0.getTimeout();
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    int[] var4 = new int[] { 1};
    java.lang.String var5 = var2.decode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "1 0"+ "'", var5.equals("1 0"));

  }

  public void test487() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructure var0 = new org.sat4j.minisat.constraints.CardinalityDataStructure();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.core.VecInt var6 = new org.sat4j.core.VecInt(100);
    int var7 = var6.size();
    java.lang.String var8 = var6.toString();
    org.sat4j.core.VecInt var10 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var11 = var10.pop();
    org.sat4j.core.ReadOnlyVecInt var12 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var10);
    org.sat4j.minisat.constraints.cnf.UnitClause var14 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var15 = var12.indexOf((-1));
    boolean var16 = var6.contains((-1));
    var2.pushAll((org.sat4j.specs.IVecInt)var6);
    org.sat4j.minisat.core.Constr var18 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    int var21 = var20.size();
    java.lang.String var22 = var20.toString();
    org.sat4j.core.VecInt var24 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var25 = var24.pop();
    org.sat4j.core.ReadOnlyVecInt var26 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var24);
    org.sat4j.minisat.constraints.cnf.UnitClause var28 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var29 = var26.indexOf((-1));
    boolean var30 = var20.contains((-1));
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var34 = var33.getTimeout();
    var31.setTimeoutOnConflicts(var34);
    int var36 = org.sat4j.core.LiteralsUtils.toInternal(var34);
    int var37 = var20.indexOf(var34);
    boolean var38 = var20.isEmpty();
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var39 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    var41.setTimeoutOnConflicts(var51);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var40, var51);
    var40.setTimeoutOnConflicts(0);
    var39.updateVar(0);
    var20.shrinkTo(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var59 = var0.createClause((org.sat4j.specs.IVecInt)var20);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f42672\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1f42672\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);

  }

  public void test488() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var4 = var3.getTimeout();
    var1.setTimeoutOnConflicts(var4);
    org.sat4j.minisat.core.IOrder var6 = var1.getOrder();
    java.lang.String var7 = var1.toString();
    org.sat4j.minisat.core.Solver var8 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var9 = var8.getTimeout();
    org.sat4j.minisat.core.Solver var10 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var11 = var10.getTimeout();
    var8.setTimeoutOnConflicts(var11);
    var1.setTimeoutOnConflicts(var11);
    org.sat4j.tools.ModelIterator var14 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var0, var11);
    boolean var16 = var14.isSatisfiable(true);
    boolean var17 = var14.isVerbose();
    org.sat4j.reader.InstanceReader var18 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var14);
    org.sat4j.tools.ConstrGroup var19 = new org.sat4j.tools.ConstrGroup();
    org.sat4j.minisat.learning.FixedLengthLearning var20 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var20.setSolver(var21);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var23.expireTimeout();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var25 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var23.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var25);
    var20.setVarActivityListener((org.sat4j.minisat.core.VarActivityListener)var23);
    var19.removeFrom((org.sat4j.specs.ISolver)var23);
    org.sat4j.minisat.restarts.MiniSATRestarts var29 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var30 = var29.toString();
    var23.setLogPrefix(var30);
    org.sat4j.tools.DecisionTracing var32 = new org.sat4j.tools.DecisionTracing(var30);
    var32.beginLoop();
    org.sat4j.minisat.constraints.cnf.UnitClause var35 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var36 = var35.size();
    var35.forwardActivity(1.0d);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    org.sat4j.minisat.core.IOrder var46 = var41.getOrder();
    java.lang.String var47 = var41.toString();
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    var41.setTimeoutOnConflicts(var51);
    org.sat4j.tools.ModelIterator var54 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var40, var51);
    boolean var56 = var54.isSatisfiable(true);
    boolean var57 = var54.isVerbose();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var59 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var60 = var59.getTimeout();
    org.sat4j.minisat.core.Solver var61 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var62 = var61.getTimeout();
    var59.setTimeoutOnConflicts(var62);
    org.sat4j.minisat.core.IOrder var64 = var59.getOrder();
    java.lang.String var65 = var59.toString();
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var67 = var66.getTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeoutOnConflicts(var69);
    var59.setTimeoutOnConflicts(var69);
    org.sat4j.tools.ModelIterator var72 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var58, var69);
    boolean var74 = var72.isSatisfiable(true);
    boolean var75 = var72.isVerbose();
    org.sat4j.reader.InstanceReader var76 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var72);
    int var77 = var72.nConstraints();
    boolean var78 = var72.isVerbose();
    boolean var79 = var72.isDBSimplificationAllowed();
    int var80 = var54.nextFreeVarId(var79);
    var32.conflictFound((org.sat4j.specs.IConstr)var35, (-1), var80);
    org.sat4j.core.VecInt var82 = new org.sat4j.core.VecInt(var80);
    boolean var83 = var82.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var84 = var14.addBlockingClause((org.sat4j.specs.IVecInt)var82);
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d9eb97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var7.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@d9eb97\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "MiniSAT restarts strategy"+ "'", var30.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6837a1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var47.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@6837a1\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@53a3b6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var65.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@53a3b6\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test489() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.specs.SearchListener var12 = var11.getSearchListener();
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var14 = var13.getTimeout();
    org.sat4j.minisat.core.Solver var15 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var16 = var15.getTimeout();
    var13.setTimeoutOnConflicts(var16);
    org.sat4j.minisat.orders.RandomLiteralSelectionStrategy var18 = new org.sat4j.minisat.orders.RandomLiteralSelectionStrategy();
    org.sat4j.core.VecInt var20 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var21 = var20.pop();
    org.sat4j.minisat.core.Solver var22 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var23 = var22.getTimeout();
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var25 = var24.getTimeout();
    var22.setTimeoutOnConflicts(var25);
    org.sat4j.minisat.core.IOrder var27 = var22.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var28 = new org.sat4j.minisat.orders.RandomWalkDecorator(var27);
    org.sat4j.minisat.core.Solver var29 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var30 = var29.getTimeout();
    org.sat4j.minisat.core.Solver var31 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var32 = var31.getTimeout();
    var29.setTimeoutOnConflicts(var32);
    org.sat4j.minisat.core.IOrder var34 = var29.getOrder();
    java.lang.String var35 = var29.toString();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    var29.setTimeoutOnConflicts(var39);
    var29.setTimeoutMs(0L);
    int var44 = var29.newVar();
    double var45 = var28.varActivity(var44);
    int var46 = var20.indexOf(var44);
    var18.assignLiteral(var46);
    org.sat4j.minisat.core.Solver var48 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var49 = var48.getTimeout();
    org.sat4j.minisat.core.Solver var50 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var51 = var50.getTimeout();
    var48.setTimeoutOnConflicts(var51);
    int var53 = org.sat4j.core.LiteralsUtils.toInternal(var51);
    var11.halfAdderSum(var16, var46, var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.core.VecInt var55 = new org.sat4j.core.VecInt(var46);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9e4df4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var35.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9e4df4\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 4294966);

  }

  public void test490() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    int var3 = var0.getMaxLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);

  }

  public void test491() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var2 = var1.getTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    org.sat4j.minisat.core.IOrder var10 = var5.getOrder();
    java.lang.String var11 = var5.toString();
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    var12.setTimeoutOnConflicts(var15);
    var5.setTimeoutOnConflicts(var15);
    org.sat4j.tools.ModelIterator var18 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var4, var15);
    var4.setTimeoutOnConflicts(0);
    org.sat4j.tools.ModelIterator var21 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var1, 0);
    var1.clearLearntClauses();
    org.sat4j.tools.SingleSolutionDetector var23 = new org.sat4j.tools.SingleSolutionDetector((org.sat4j.specs.ISolver)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d61b2d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var11.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1d61b2d\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);

  }

  public void test492() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    int[] var33 = var3.model();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1533019\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1533019\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test493() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var1.expireTimeout();
    var0.setLearner((org.sat4j.minisat.core.Learner)var1);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var5.sort();
    org.sat4j.core.VecInt var9 = new org.sat4j.core.VecInt(100);
    int var10 = var9.size();
    java.lang.String var11 = var9.toString();
    org.sat4j.core.VecInt var13 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var14 = var13.pop();
    org.sat4j.core.ReadOnlyVecInt var15 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var13);
    org.sat4j.minisat.constraints.cnf.UnitClause var17 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    int var18 = var15.indexOf((-1));
    boolean var19 = var9.contains((-1));
    var5.pushAll((org.sat4j.specs.IVecInt)var9);
    boolean var21 = var1.isSatisfiable((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.constraints.cnf.UnitClauses var22 = new org.sat4j.minisat.constraints.cnf.UnitClauses((org.sat4j.specs.IVecInt)var5);
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    org.sat4j.minisat.core.Solver var25 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var26 = var25.getTimeout();
    var23.setTimeoutOnConflicts(var26);
    org.sat4j.minisat.core.IOrder var28 = var23.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var29 = new org.sat4j.minisat.orders.RandomWalkDecorator(var28);
    org.sat4j.minisat.core.Solver var30 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var31 = var30.getTimeout();
    org.sat4j.minisat.core.Solver var32 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var33 = var32.getTimeout();
    var30.setTimeoutOnConflicts(var33);
    org.sat4j.minisat.core.IOrder var35 = var30.getOrder();
    java.lang.String var36 = var30.toString();
    org.sat4j.minisat.core.Solver var37 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var38 = var37.getTimeout();
    org.sat4j.minisat.core.Solver var39 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var40 = var39.getTimeout();
    var37.setTimeoutOnConflicts(var40);
    var30.setTimeoutOnConflicts(var40);
    var30.setTimeoutMs(0L);
    int var45 = var30.newVar();
    double var46 = var29.varActivity(var45);
    var29.varDecayActivity();
    org.sat4j.minisat.learning.MiniSATLearning var48 = new org.sat4j.minisat.learning.MiniSATLearning();
    org.sat4j.minisat.constraints.CardinalityDataStructureYanMin var49 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMin();
    var48.setDataStructureFactory((org.sat4j.minisat.core.DataStructureFactory)var49);
    org.sat4j.minisat.core.Solver var51 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var52 = var51.getTimeout();
    org.sat4j.minisat.core.Solver var53 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var54 = var53.getTimeout();
    var51.setTimeoutOnConflicts(var54);
    int var56 = var51.getTimeout();
    var49.setLearner((org.sat4j.minisat.core.Learner)var51);
    org.sat4j.minisat.core.ILits var58 = var49.getVocabulary();
    var29.setLits(var58);
    org.sat4j.minisat.constraints.cnf.CBClause var60 = new org.sat4j.minisat.constraints.cnf.CBClause((org.sat4j.specs.IVecInt)var5, var58);
    var60.register();
    int var62 = var60.size();
    org.sat4j.minisat.constraints.cnf.UnitClause var64 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var67 = new org.sat4j.minisat.constraints.cnf.UnitClause(var66);
    var67.incActivity(10.0d);
    var64.forwardActivity(10.0d);
    var60.incActivity(10.0d);
    org.sat4j.minisat.core.Solver var72 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapEZSimp();
    var60.remove((org.sat4j.minisat.core.UnitPropagationListener)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9af8eb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var36.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@9af8eb\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test494() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var1 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var0);
    org.sat4j.reader.LecteurDimacs var2 = new org.sat4j.reader.LecteurDimacs((org.sat4j.specs.ISolver)var0);
    org.sat4j.opt.MaxSatDecorator var3 = new org.sat4j.opt.MaxSatDecorator((org.sat4j.specs.ISolver)var0);
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var6 = var5.pop();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    org.sat4j.minisat.core.Solver var9 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var10 = var9.getTimeout();
    var7.setTimeoutOnConflicts(var10);
    org.sat4j.minisat.core.IOrder var12 = var7.getOrder();
    org.sat4j.minisat.orders.RandomWalkDecorator var13 = new org.sat4j.minisat.orders.RandomWalkDecorator(var12);
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    var14.setTimeoutMs(0L);
    int var29 = var14.newVar();
    double var30 = var13.varActivity(var29);
    int var31 = var5.indexOf(var29);
    var3.setExpectedNumberOfClauses(var29);
    org.sat4j.tools.OptToSatAdapter var33 = new org.sat4j.tools.OptToSatAdapter((org.sat4j.specs.IOptimizationProblem)var3);
    int[] var34 = var33.model();
    int[] var38 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var39 = new org.sat4j.core.VecInt(var38);
    org.sat4j.minisat.core.Solver var40 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var40.expireTimeout();
    org.sat4j.minisat.core.Solver var42 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var43 = var42.getTimeout();
    var40.setTimeout(var43);
    var39.ensure(var43);
    org.sat4j.minisat.core.Solver var46 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var47 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var46);
    var39.pushAll(var47);
    int[] var49 = var33.findModel((org.sat4j.specs.IVecInt)var39);
    org.sat4j.opt.MinOneDecorator var50 = new org.sat4j.opt.MinOneDecorator((org.sat4j.specs.ISolver)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var50.discard();
      fail("Expected exception of type org.sat4j.specs.ContradictionException");
    } catch (org.sat4j.specs.ContradictionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19813a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@19813a\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test495() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newBestHT();
    org.sat4j.minisat.learning.FixedLengthLearning var1 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var2 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var1.setSolver(var2);
    org.sat4j.minisat.core.Solver var4 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var4.expireTimeout();
    org.sat4j.minisat.core.Solver var6 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var7 = var6.getTimeout();
    var4.setTimeout(var7);
    var1.setSolver(var4);
    org.sat4j.specs.IVecInt var10 = var4.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var11 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var4);
    org.sat4j.tools.GateTranslator var12 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var4);
    org.sat4j.minisat.core.Solver var13 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var14 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var15 = var14.getTimeout();
    org.sat4j.minisat.core.Solver var16 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var17 = var16.getTimeout();
    var14.setTimeoutOnConflicts(var17);
    org.sat4j.minisat.core.IOrder var19 = var14.getOrder();
    java.lang.String var20 = var14.toString();
    org.sat4j.minisat.core.Solver var21 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var22 = var21.getTimeout();
    org.sat4j.minisat.core.Solver var23 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var24 = var23.getTimeout();
    var21.setTimeoutOnConflicts(var24);
    var14.setTimeoutOnConflicts(var24);
    org.sat4j.tools.ModelIterator var27 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var13, var24);
    boolean var29 = var27.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var30 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var27);
    org.sat4j.core.VecInt var32 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var33 = var32.pop();
    org.sat4j.core.ReadOnlyVecInt var34 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var32);
    org.sat4j.minisat.core.Solver var35 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    org.sat4j.minisat.core.Solver var38 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var39 = var38.getTimeout();
    var36.setTimeoutOnConflicts(var39);
    org.sat4j.minisat.core.IOrder var41 = var36.getOrder();
    java.lang.String var42 = var36.toString();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    org.sat4j.minisat.core.Solver var45 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var46 = var45.getTimeout();
    var43.setTimeoutOnConflicts(var46);
    var36.setTimeoutOnConflicts(var46);
    org.sat4j.tools.ModelIterator var49 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var35, var46);
    boolean var51 = var49.isSatisfiable(true);
    boolean var52 = var49.isVerbose();
    boolean var53 = var27.isSatisfiable((org.sat4j.specs.IVecInt)var34, var52);
    org.sat4j.minisat.core.Solver var54 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var55 = var54.getTimeout();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    var54.setTimeoutOnConflicts(var57);
    int var59 = org.sat4j.core.LiteralsUtils.toInternal(var57);
    int var60 = var34.indexOf(var59);
    int[] var64 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var65 = new org.sat4j.core.VecInt(var64);
    org.sat4j.minisat.core.Solver var66 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var66.expireTimeout();
    org.sat4j.minisat.core.Solver var68 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var69 = var68.getTimeout();
    var66.setTimeout(var69);
    var65.ensure(var69);
    org.sat4j.specs.IConstr[] var72 = var12.and(var59, (org.sat4j.specs.IVecInt)var65);
    org.sat4j.minisat.constraints.cnf.UnitClause var74 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.specs.IConstr var75 = var12.gateFalse((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.specs.IConstr var76 = var0.getIthConstr((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1077ddf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var20.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1077ddf\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c7771c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var42.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1c7771c\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test496() throws Throwable {

    org.sat4j.minisat.learning.FixedLengthLearning var0 = new org.sat4j.minisat.learning.FixedLengthLearning();
    org.sat4j.minisat.core.Solver var1 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    var0.setSolver(var1);
    org.sat4j.minisat.core.Solver var3 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var3.expireTimeout();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    var3.setTimeout(var6);
    var0.setSolver(var3);
    org.sat4j.specs.IVecInt var9 = var3.getOutLearnt();
    org.sat4j.tools.Minimal4CardinalityModel var10 = new org.sat4j.tools.Minimal4CardinalityModel((org.sat4j.specs.ISolver)var3);
    org.sat4j.tools.GateTranslator var11 = new org.sat4j.tools.GateTranslator((org.sat4j.specs.ISolver)var3);
    org.sat4j.reader.InstanceReader var12 = new org.sat4j.reader.InstanceReader((org.sat4j.specs.ISolver)var11);
    boolean var13 = var11.isVerbose();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test497() throws Throwable {

    org.sat4j.minisat.constraints.CardinalityDataStructureYanMax var0 = new org.sat4j.minisat.constraints.CardinalityDataStructureYanMax();
    org.sat4j.core.VecInt var2 = new org.sat4j.core.VecInt(100);
    int var3 = var2.size();
    var2.sort();
    org.sat4j.minisat.core.Solver var5 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var6 = var5.getTimeout();
    org.sat4j.minisat.core.Solver var7 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var8 = var7.getTimeout();
    var5.setTimeoutOnConflicts(var8);
    int var10 = org.sat4j.core.LiteralsUtils.toInternal(var8);
    org.sat4j.specs.IVecInt var11 = var2.push(var10);
    org.sat4j.minisat.core.Constr var12 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var2);
    int[] var16 = new int[] { 100, 10, (-1)};
    org.sat4j.core.VecInt var17 = new org.sat4j.core.VecInt(var16);
    org.sat4j.minisat.core.Solver var18 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var18.expireTimeout();
    org.sat4j.minisat.core.Solver var20 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var21 = var20.getTimeout();
    var18.setTimeout(var21);
    var17.ensure(var21);
    org.sat4j.minisat.core.Solver var24 = org.sat4j.minisat.SolverFactory.newRelsat();
    org.sat4j.specs.IVecInt var25 = org.sat4j.tools.RemiUtils.backbone((org.sat4j.specs.ISolver)var24);
    var17.pushAll(var25);
    org.sat4j.minisat.core.Constr var27 = var0.createUnregisteredClause((org.sat4j.specs.IVecInt)var17);
    org.sat4j.minisat.core.Solver var28 = org.sat4j.minisat.SolverFactory.newMiniLearningCBWLPure();
    org.sat4j.tools.ExtendedDimacsArrayReader var29 = new org.sat4j.tools.ExtendedDimacsArrayReader((org.sat4j.specs.ISolver)var28);
    org.sat4j.core.VecInt var31 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var32 = var31.pop();
    org.sat4j.minisat.core.Solver var33 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var34 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var35 = var34.getTimeout();
    org.sat4j.minisat.core.Solver var36 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var37 = var36.getTimeout();
    var34.setTimeoutOnConflicts(var37);
    org.sat4j.minisat.core.IOrder var39 = var34.getOrder();
    java.lang.String var40 = var34.toString();
    org.sat4j.minisat.core.Solver var41 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var42 = var41.getTimeout();
    org.sat4j.minisat.core.Solver var43 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var44 = var43.getTimeout();
    var41.setTimeoutOnConflicts(var44);
    var34.setTimeoutOnConflicts(var44);
    org.sat4j.tools.ModelIterator var47 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var33, var44);
    boolean var49 = var47.isSatisfiable(true);
    org.sat4j.reader.DimacsReader var50 = new org.sat4j.reader.DimacsReader((org.sat4j.specs.ISolver)var47);
    org.sat4j.core.VecInt var52 = new org.sat4j.core.VecInt(100);
    org.sat4j.specs.IVecInt var53 = var52.pop();
    org.sat4j.core.ReadOnlyVecInt var54 = new org.sat4j.core.ReadOnlyVecInt((org.sat4j.specs.IVecInt)var52);
    org.sat4j.minisat.core.Solver var55 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.Solver var56 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var57 = var56.getTimeout();
    org.sat4j.minisat.core.Solver var58 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var59 = var58.getTimeout();
    var56.setTimeoutOnConflicts(var59);
    org.sat4j.minisat.core.IOrder var61 = var56.getOrder();
    java.lang.String var62 = var56.toString();
    org.sat4j.minisat.core.Solver var63 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var64 = var63.getTimeout();
    org.sat4j.minisat.core.Solver var65 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var66 = var65.getTimeout();
    var63.setTimeoutOnConflicts(var66);
    var56.setTimeoutOnConflicts(var66);
    org.sat4j.tools.ModelIterator var69 = new org.sat4j.tools.ModelIterator((org.sat4j.specs.ISolver)var55, var66);
    boolean var71 = var69.isSatisfiable(true);
    boolean var72 = var69.isVerbose();
    boolean var73 = var47.isSatisfiable((org.sat4j.specs.IVecInt)var54, var72);
    boolean var74 = var54.isEmpty();
    boolean var75 = var28.isSatisfiable((org.sat4j.specs.IVecInt)var31, var74);
    org.sat4j.minisat.core.Solver var76 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var76.expireTimeout();
    org.sat4j.minisat.core.Solver var78 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var79 = var78.getTimeout();
    var76.setTimeout(var79);
    org.sat4j.minisat.constraints.cnf.UnitClause var81 = new org.sat4j.minisat.constraints.cnf.UnitClause(var79);
    org.sat4j.minisat.core.Solver var82 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    var82.expireTimeout();
    org.sat4j.minisat.core.Solver var84 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var85 = var84.getTimeout();
    var82.setTimeout(var85);
    boolean var87 = var82.isDBSimplificationAllowed();
    org.sat4j.minisat.core.IOrder var88 = var82.getOrder();
    org.sat4j.tools.SolutionCounter var89 = new org.sat4j.tools.SolutionCounter((org.sat4j.specs.ISolver)var82);
    int var90 = var82.nVars();
    int var91 = var81.get(var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.sat4j.minisat.core.Constr var92 = var0.createCardinalityConstraint((org.sat4j.specs.IVecInt)var31, var90);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4294966);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b1bad0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var40.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@b1bad0\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1732d83\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"+ "'", var62.equals("--- Begin Solver configuration ---\nStops conflict analysis at the first Unique Implication Point\norg.sat4j.minisat.constraints.MixedDataStructureDanielWL@1732d83\nLearn all clauses as in MiniSAT\nclaDecay=0.999 varDecay=0.95 conflictBoundIncFactor=1.5 initConflictBound=100 \nVSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause\nExpensive reason simplification\nMiniSAT restarts strategy\nGlucose learned constraints deletion strategy\ntimeout=2147483 conflicts\nDB Simplification allowed=false\n--- End Solver configuration ---"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2147483);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 2147483);

  }

  public void test498() throws Throwable {

    org.sat4j.minisat.restarts.MiniSATRestarts var0 = new org.sat4j.minisat.restarts.MiniSATRestarts();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.sat4j.minisat.core.SearchParams var3 = new org.sat4j.minisat.core.SearchParams();
    org.sat4j.core.VecInt var5 = new org.sat4j.core.VecInt(100);
    int var6 = var5.size();
    var3.setInitConflictBound(var6);
    var3.setClaDecay(1.0d);
    org.sat4j.minisat.constraints.cnf.UnitClause var11 = new org.sat4j.minisat.constraints.cnf.UnitClause((-1));
    org.sat4j.minisat.core.Solver var12 = org.sat4j.minisat.SolverFactory.newMiniLearningHeapExpSimp();
    int var13 = var12.getTimeout();
    org.sat4j.minisat.constraints.cnf.UnitClause var14 = new org.sat4j.minisat.constraints.cnf.UnitClause(var13);
    var14.incActivity(10.0d);
    var11.forwardActivity(10.0d);
    var3.setClaDecay(10.0d);
    var0.init(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "MiniSAT restarts strategy"+ "'", var1.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "MiniSAT restarts strategy"+ "'", var2.equals("MiniSAT restarts strategy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2147483);

  }

  public void test499() throws Throwable {

    org.sat4j.minisat.core.IntQueue var0 = new org.sat4j.minisat.core.IntQueue();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "><"+ "'", var1.equals("><"));

  }

  public void test500() throws Throwable {

    org.sat4j.minisat.core.Solver var0 = org.sat4j.minisat.SolverFactory.newMiniSATHeap();
    org.sat4j.minisat.core.IOrder var1 = var0.getOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

}
