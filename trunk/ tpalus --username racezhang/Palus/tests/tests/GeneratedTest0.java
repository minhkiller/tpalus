package tests;

import junit.framework.*;

public class GeneratedTest0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(GeneratedTest0.class);
  }

  public void test1() throws Throwable {

    com.sqlmagic.tinysql.Utils var0 = new com.sqlmagic.tinysql.Utils();

  }

  public void test2() throws Throwable {

    byte[] var0 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var1 = com.sqlmagic.tinysql.Utils.vax_to_long(var0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test3() throws Throwable {

    java.lang.Short var0 = new java.lang.Short((short)10);
    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)var0);

  }

  public void test4() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String[] var4 = var3.getFields();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = "";
    boolean var8 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var7);
    java.lang.String var9 = var3.getField((int)var6, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = com.sqlmagic.tinysql.UtilString.dateValue(var9);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test5() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)0);
    java.lang.Byte var1 = new java.lang.Byte((byte)100);
    java.lang.Byte var2 = new java.lang.Byte((byte)10);
    byte[] var3 = new byte[] { var0, var1, var2};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = com.sqlmagic.tinysql.Utils.vax_to_long(var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test6() throws Throwable {

    com.sqlmagic.tinysql.tinySQLCmd var0 = new com.sqlmagic.tinysql.tinySQLCmd();

  }

  public void test7() throws Throwable {

    com.sqlmagic.tinysql.tinySQLGlobals var0 = new com.sqlmagic.tinysql.tinySQLGlobals();

  }

  public void test8() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test9() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    com.sqlmagic.tinysql.Utils.delFile(var21, var23);
    java.lang.Integer var26 = new java.lang.Integer(1);
    int var27 = com.sqlmagic.tinysql.UtilString.intValue(var23, (int)var26);
    boolean var28 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setReadOnly((boolean)var28);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test10() throws Throwable {

    tests.SomeParamValues var0 = new tests.SomeParamValues();

  }

  public void test11() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)1);
    byte[] var1 = new byte[] { var0};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = com.sqlmagic.tinysql.Utils.vax_to_short(var1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String[] var4 = var3.getFields();
    boolean var5 = var3.hasMoreFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test13() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var21 = var20.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test14() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    java.lang.String var22 = "";
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var23 = var20.prepareStatement(var22);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test15() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var1 = var0.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test16() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test17() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    boolean var28 = com.sqlmagic.tinysql.Utils.clearFunction(var26);
    java.lang.String var29 = "hi!";
    boolean var30 = com.sqlmagic.tinysql.UtilString.isInteger(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var33 = var24.getTablePrivileges(var26, var29, var31);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test18() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var86 = var24.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test19() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    boolean var22 = var20.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test20() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)10);
    byte[] var1 = new byte[] { var0};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var2 = com.sqlmagic.tinysql.Utils.vax_to_long(var1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test21() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.lang.String var27 = "";
    java.lang.Character var28 = new java.lang.Character('#');
    java.lang.Boolean var29 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var30 = new com.sqlmagic.tinysql.FieldTokenizer(var27, var28, var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = var30.getField((int)var32);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    com.sqlmagic.tinysql.Utils.delFile(var34, var36);
    java.lang.Integer var39 = new java.lang.Integer(1);
    int var40 = com.sqlmagic.tinysql.UtilString.intValue(var36, (int)var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var45 = var24.getTablePrivileges(var33, var36, var43);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "NULL"+ "'", var33.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test22() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    boolean var31 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var28);
    java.lang.Character var32 = new java.lang.Character('4');
    java.lang.Integer var33 = new java.lang.Integer(10);
    boolean var34 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var33);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var28, var32, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.CallableStatement var36 = var20.prepareCall(var28);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test23() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    java.lang.String var24 = "";
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    boolean var26 = var0.acceptsURL(var25);
    boolean var27 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test24() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var1 = var0.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test25() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.supportsMultipleTransactions();
    boolean var31 = var24.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test26() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var32 = var24.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test27() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.ResultSet var71 = var24.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);

  }

  public void test28() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    boolean var78 = var24.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test29() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    boolean var64 = var24.usesLocalFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test30() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.toYMD(var24);
    boolean var27 = com.sqlmagic.tinysql.UtilString.isInteger(var26);
    boolean var28 = var23.acceptsURL(var26);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    com.sqlmagic.tinysql.Utils.delFile(var32, var34);
    java.lang.Integer var37 = new java.lang.Integer(1);
    int var38 = com.sqlmagic.tinysql.UtilString.intValue(var34, (int)var37);
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD(var40);
    boolean var43 = com.sqlmagic.tinysql.UtilString.isInteger(var42);
    boolean var44 = var39.acceptsURL(var42);
    boolean var45 = var39.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var46 = var23.getConnection(var29, var34, (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var47 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var46);
    int var48 = var47.getMaxColumnsInIndex();
    boolean var49 = var47.supportsSchemasInPrivilegeDefinitions();
    boolean var50 = var47.supportsANSI92FullSQL();
    boolean var51 = var47.supportsSubqueriesInIns();
    int var52 = var47.getMaxStatementLength();
    boolean var53 = var47.nullPlusNonNullIsNull();
    int var54 = var47.getDatabaseMinorVersion();
    boolean var55 = var47.usesLocalFiles();
    java.lang.String var56 = var47.getDriverName();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLPreparedStatement var57 = new com.sqlmagic.tinysql.tinySQLPreparedStatement(var20, var56);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test31() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.doesMaxRowSizeIncludeBlobs();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var31 = var24.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test32() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    boolean var57 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test33() throws Throwable {

    com.sqlmagic.tinysql.tinySQLGlobals.writeLongNames();

  }

  public void test34() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.nullPlusNonNullIsNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test35() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    int var1 = var0.getMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);

  }

  public void test36() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var30 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test37() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    java.lang.Integer var57 = new java.lang.Integer((-1));
    java.lang.String var58 = "";
    java.lang.Character var59 = new java.lang.Character('#');
    java.lang.Boolean var60 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var61 = new com.sqlmagic.tinysql.FieldTokenizer(var58, var59, var60);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = var61.getField((int)var63);
    java.lang.Integer var65 = new java.lang.Integer((-1));
    java.lang.String var66 = "";
    java.lang.Character var67 = new java.lang.Character('#');
    java.lang.Boolean var68 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var69 = new com.sqlmagic.tinysql.FieldTokenizer(var66, var67, var68);
    java.lang.String[] var70 = var69.getFields();
    int var71 = var69.countFields();
    int var72 = var61.getInt((int)var65, (int)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var73 = var56.createStatement((int)var57, (int)var72);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NULL"+ "'", var64.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);

  }

  public void test38() throws Throwable {

    byte[] var0 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = com.sqlmagic.tinysql.Utils.vax_to_short(var0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test39() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)100);
    java.lang.Byte var1 = new java.lang.Byte((byte)1);
    byte[] var2 = new byte[] { var0, var1};
    int var3 = com.sqlmagic.tinysql.Utils.vax_to_short(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 356);

  }

  public void test40() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)10);
    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)10);

  }

  public void test41() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    java.sql.Statement var57 = var56.createStatement();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test42() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var63 = com.sqlmagic.tinysql.UtilString.dateValue(var56);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);

  }

  public void test43() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    boolean var30 = var24.isCatalogAtStart();
    boolean var31 = var24.supportsConvert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test44() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    java.lang.String var58 = "";
    java.lang.Character var59 = new java.lang.Character('#');
    java.lang.Boolean var60 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var61 = new com.sqlmagic.tinysql.FieldTokenizer(var58, var59, var60);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = var61.getField((int)var63);
    java.lang.String var65 = "";
    java.lang.Character var66 = new java.lang.Character('#');
    java.lang.Boolean var67 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var66, var67);
    java.util.Vector var69 = com.sqlmagic.tinysql.Utils.getAllFiles(var64, var65);
    java.lang.String var70 = "";
    boolean var71 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    com.sqlmagic.tinysql.Utils.delFile(var72, var74);
    java.lang.Integer var77 = new java.lang.Integer(1);
    int var78 = com.sqlmagic.tinysql.UtilString.intValue(var74, (int)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var79 = var24.getPrimaryKeys(var65, var70, var74);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NULL"+ "'", var64.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);

  }

  public void test45() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    boolean var2 = com.sqlmagic.tinysql.Utils.isDateColumn((int)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test46() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = var3.nextField();
    java.lang.String[] var5 = var3.getFields();
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    com.sqlmagic.tinysql.Utils.delFile(var6, var8);
    java.lang.Integer var11 = new java.lang.Integer(1);
    int var12 = com.sqlmagic.tinysql.UtilString.intValue(var8, (int)var11);
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character('#');
    java.lang.Boolean var15 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var16 = new com.sqlmagic.tinysql.FieldTokenizer(var13, var14, var15);
    java.lang.String[] var17 = var16.getFields();
    int var18 = var16.countFields();
    int var19 = var3.getInt((int)var12, (int)var18);
    byte[] var20 = com.sqlmagic.tinysql.Utils.intToLittleEndian((int)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test47() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = var2.nextTag();
    java.lang.Integer var4 = new java.lang.Integer(0);
    boolean var5 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var4);
    java.lang.Object var6 = var2.get((java.lang.Object)var4);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test48() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    java.lang.String var25 = "hi!";
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var26 = var23.prepareStatement(var25);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test49() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var0);
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test50() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    int var21 = var13.getMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 9);

  }

  public void test51() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    boolean var64 = var24.supportsOpenCursorsAcrossRollback();
    int var65 = var24.getMaxColumnsInTable();
    int var66 = var24.getMaxCatalogNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test52() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test53() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var22.getConnection(var28, var33, (java.sql.Driver)var38);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    int var47 = var46.getMaxColumnsInIndex();
    boolean var48 = var46.supportsSchemasInPrivilegeDefinitions();
    boolean var49 = var46.supportsANSI92FullSQL();
    boolean var50 = var46.supportsOpenStatementsAcrossRollback();
    boolean var51 = var46.supportsTableCorrelationNames();
    boolean var52 = var46.supportsColumnAliasing();
    java.lang.String var53 = var46.getNumericFunctions();
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    int var60 = var54.getMinorVersion();
    java.lang.String var61 = "";
    java.lang.String var62 = "";
    java.lang.Character var63 = new java.lang.Character('#');
    java.lang.Boolean var64 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var65 = new com.sqlmagic.tinysql.FieldTokenizer(var62, var63, var64);
    java.lang.String var66 = var65.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD(var68);
    boolean var71 = com.sqlmagic.tinysql.UtilString.isInteger(var70);
    boolean var72 = var67.acceptsURL(var70);
    boolean var73 = var67.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var74 = var54.getConnection(var61, var66, (java.sql.Driver)var67);
    int var75 = var54.getMajorVersion();
    boolean var76 = var46.supportsResultSetHoldability((int)var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setReadOnly((boolean)var76);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test54() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var30 = var24.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test55() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var58 = var24.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test56() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsANSI92EntryLevelSQL();
    boolean var75 = var24.supportsMultipleTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test57() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var4.equals("com.sqlmagic.tinysql.tinySQLException"));

  }

  public void test58() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.supportsSchemasInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test59() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    boolean var32 = var24.usesLocalFiles();
    int var33 = var24.getMaxStatements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 10);

  }

  public void test60() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    boolean var6 = var0.jdbcCompliant();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    com.sqlmagic.tinysql.Utils.delFile(var7, var9);
    boolean var12 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var9);
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes(var9);
    java.lang.String var14 = "";
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    com.sqlmagic.tinysql.Utils.delFile(var25, var27);
    java.lang.Integer var30 = new java.lang.Integer(1);
    int var31 = com.sqlmagic.tinysql.UtilString.intValue(var27, (int)var30);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    boolean var38 = var32.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var39 = var16.getConnection(var22, var27, (java.sql.Driver)var32);
    java.lang.String var40 = "";
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var40);
    boolean var42 = var16.acceptsURL(var41);
    com.sqlmagic.tinysql.tinySQLConnection var43 = var0.getConnection(var9, var14, (java.sql.Driver)var16);
    boolean var44 = com.sqlmagic.tinysql.Utils.clearFunction(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test61() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.lang.String var89 = var24.getURL();
    boolean var90 = var24.supportsAlterTableWithAddColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test62() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    int var31 = var25.getMinorVersion();
    java.lang.String var32 = "";
    java.lang.String var33 = "";
    java.lang.Character var34 = new java.lang.Character('#');
    java.lang.Boolean var35 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var36 = new com.sqlmagic.tinysql.FieldTokenizer(var33, var34, var35);
    java.lang.String var37 = var36.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var25.getConnection(var32, var37, (java.sql.Driver)var38);
    var45.close();
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    boolean var49 = com.sqlmagic.tinysql.Utils.clearFunction(var47);
    var45.setCatalog(var47);
    java.lang.String var51 = "";
    java.lang.Character var52 = new java.lang.Character('#');
    java.lang.Boolean var53 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var54 = new com.sqlmagic.tinysql.FieldTokenizer(var51, var52, var53);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue(var51);
    com.sqlmagic.tinysql.Utils.delFile(var47, var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var57 = var24.execute(var47);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4.9E-324d);

  }

  public void test63() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsUnionAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test64() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString(var3);
    java.lang.String var7 = "";
    java.lang.Character var8 = new java.lang.Character('#');
    java.lang.Boolean var9 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var10 = new com.sqlmagic.tinysql.FieldTokenizer(var7, var8, var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    boolean var13 = com.sqlmagic.tinysql.Utils.clearFunction(var11);
    com.sqlmagic.tinysql.FieldTokenizer var14 = new com.sqlmagic.tinysql.FieldTokenizer(var3, var8, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test65() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var27 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test66() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxColumnsInIndex();
    boolean var88 = var24.storesUpperCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test67() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.sql.Connection var27 = var24.getConnection();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test68() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsGroupByBeyondSelect();
    java.lang.String var87 = var24.getSearchStringEscape();
    java.sql.ResultSet var88 = var24.getTypeInfo();
    boolean var89 = var24.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\\"+ "'", var87.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test69() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test70() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    boolean var30 = var24.supportsStoredFunctionsUsingCallSyntax();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test71() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.dataDefinitionCausesTransactionCommit();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsUnion();
    java.sql.ResultSet var75 = var24.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test72() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setFetchDirection((int)var51);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);

  }

  public void test73() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = var24.getNumericFunctions();
    boolean var27 = var24.supportsConvert();
    boolean var28 = var24.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test74() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    java.lang.Long var7 = new java.lang.Long(1L);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = com.sqlmagic.tinysql.UtilString.toYMD(var9);
    boolean var12 = com.sqlmagic.tinysql.UtilString.isInteger(var11);
    boolean var13 = var8.acceptsURL(var11);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    com.sqlmagic.tinysql.Utils.delFile(var17, var19);
    java.lang.Integer var22 = new java.lang.Integer(1);
    int var23 = com.sqlmagic.tinysql.UtilString.intValue(var19, (int)var22);
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    boolean var30 = var24.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var31 = var8.getConnection(var14, var19, (java.sql.Driver)var24);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var32 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var31);
    int var33 = var32.getMaxColumnsInIndex();
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    com.sqlmagic.tinysql.Utils.delFile(var34, var36);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var36);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    com.sqlmagic.tinysql.Utils.delFile(var49, var51);
    java.lang.Integer var54 = new java.lang.Integer(1);
    int var55 = com.sqlmagic.tinysql.UtilString.intValue(var51, (int)var54);
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    boolean var61 = var56.acceptsURL(var59);
    boolean var62 = var56.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var63 = var40.getConnection(var46, var51, (java.sql.Driver)var56);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    java.lang.String var67 = "";
    java.lang.Character var68 = new java.lang.Character('#');
    java.lang.Boolean var69 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var70 = new com.sqlmagic.tinysql.FieldTokenizer(var67, var68, var69);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var64, var68, var74);
    java.lang.String var76 = "";
    java.sql.ResultSet var77 = var32.getFunctionColumns(var36, var51, var64, var76);
    boolean var78 = var32.supportsANSI92FullSQL();
    boolean var79 = var32.supportsCatalogsInDataManipulation();
    boolean var80 = var32.supportsMixedCaseIdentifiers();
    boolean var81 = var32.storesMixedCaseQuotedIdentifiers();
    boolean var82 = var32.supportsANSI92EntryLevelSQL();
    java.lang.Object var83 = var2.put((java.lang.Object)var7, (java.lang.Object)var82);
    java.lang.String var84 = "hi!";
    boolean var85 = com.sqlmagic.tinysql.UtilString.isInteger(var84);
    com.sqlmagic.tinysql.SimpleXMLTag var86 = new com.sqlmagic.tinysql.SimpleXMLTag(var84);
    int var87 = var86.size();
    com.sqlmagic.tinysql.SimpleXMLTag var88 = var2.getTag((int)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);

  }

  public void test75() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    boolean var6 = var0.jdbcCompliant();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    com.sqlmagic.tinysql.Utils.delFile(var7, var9);
    boolean var12 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var9);
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes(var9);
    java.lang.String var14 = "";
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    com.sqlmagic.tinysql.Utils.delFile(var25, var27);
    java.lang.Integer var30 = new java.lang.Integer(1);
    int var31 = com.sqlmagic.tinysql.UtilString.intValue(var27, (int)var30);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    boolean var38 = var32.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var39 = var16.getConnection(var22, var27, (java.sql.Driver)var32);
    java.lang.String var40 = "";
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var40);
    boolean var42 = var16.acceptsURL(var41);
    com.sqlmagic.tinysql.tinySQLConnection var43 = var0.getConnection(var9, var14, (java.sql.Driver)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var44 = var43.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test76() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.supportsAlterTableWithAddColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test77() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsPositionedUpdate();
    boolean var64 = var24.supportsCorrelatedSubqueries();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test78() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    int var57 = var56.getTransactionIsolation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test79() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsGroupByBeyondSelect();
    java.lang.String var87 = var24.getSearchStringEscape();
    boolean var88 = var24.supportsConvert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\\"+ "'", var87.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test80() throws Throwable {

    java.lang.String var0 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction(var4);
    com.sqlmagic.tinysql.Utils.delFile(var0, var4);
    java.lang.String var9 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var0);
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test81() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.storesMixedCaseIdentifiers();
    boolean var73 = var24.usesLocalFilePerTable();
    boolean var74 = var24.supportsCorrelatedSubqueries();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test82() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    boolean var29 = var24.supportsColumnAliasing();
    int var30 = var24.getMaxConnections();
    boolean var31 = var24.supportsBatchUpdates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test83() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    java.lang.String var31 = var24.getNumericFunctions();
    boolean var32 = var24.supportsExtendedSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test84() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "";
    java.lang.Character var15 = new java.lang.Character('#');
    java.lang.Boolean var16 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var17 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var15, var16);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = var17.getField((int)var19);
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    boolean var26 = var21.acceptsURL(var24);
    int var27 = var21.getMinorVersion();
    java.lang.String var28 = "";
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = var32.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    boolean var40 = var34.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var41 = var21.getConnection(var28, var33, (java.sql.Driver)var34);
    var41.close();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction(var43);
    var41.setCatalog(var43);
    java.lang.String var47 = "";
    java.lang.Character var48 = new java.lang.Character('#');
    java.lang.Boolean var49 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var50 = new com.sqlmagic.tinysql.FieldTokenizer(var47, var48, var49);
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue(var47);
    com.sqlmagic.tinysql.Utils.delFile(var43, var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var53 = var13.evaluate(var20, var47);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "NULL"+ "'", var20.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 4.9E-324d);

  }

  public void test85() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.nullPlusNonNullIsNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var28 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test86() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    int var21 = var0.getMajorVersion();
    byte[] var22 = com.sqlmagic.tinysql.Utils.intToLittleEndian((int)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test87() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.sql.ResultSet var89 = var24.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test88() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = var3.getField((int)var5);
    java.lang.String var7 = "";
    java.lang.Character var8 = new java.lang.Character('#');
    java.lang.Boolean var9 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var10 = new com.sqlmagic.tinysql.FieldTokenizer(var7, var8, var9);
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles(var6, var7);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    boolean var14 = com.sqlmagic.tinysql.Utils.clearFunction(var12);
    java.lang.Double var15 = new java.lang.Double(100.0d);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue(var12, (double)var15);
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue(var6, (double)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NULL"+ "'", var6.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 100.0d);

  }

  public void test89() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = var28.getField((int)var30);
    var23.setTransactionIsolation((int)var30);
    boolean var33 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "NULL"+ "'", var31.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test90() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    java.lang.String var2 = com.sqlmagic.tinysql.UtilString.toYMD(var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toStandardDate(var0);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));

  }

  public void test91() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test92() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    int var78 = var24.getDriverMajorVersion();
    int var79 = var24.getMaxColumnsInGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test93() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    java.lang.String var30 = var24.getNumericFunctions();
    boolean var31 = com.sqlmagic.tinysql.UtilString.isQuotedString(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test94() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test95() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    int var88 = var24.getMaxStatements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 10);

  }

  public void test96() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    java.lang.String var27 = var24.getIdentifierQuoteString();
    boolean var28 = var24.supportsMultipleOpenResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var29 = var24.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\""+ "'", var27.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test97() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var14 = var13.getStatus();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test98() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var0);
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.util.Vector var4 = com.sqlmagic.tinysql.Utils.getAllFiles(var0, var2);
    java.lang.Integer var5 = new java.lang.Integer(10);
    boolean var6 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var5);
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    java.lang.String var10 = com.sqlmagic.tinysql.UtilString.toYMD(var8);
    boolean var11 = com.sqlmagic.tinysql.UtilString.isInteger(var10);
    boolean var12 = var7.acceptsURL(var10);
    int var13 = var7.getMinorVersion();
    java.lang.String var14 = "";
    java.lang.String var15 = "";
    java.lang.Character var16 = new java.lang.Character('#');
    java.lang.Boolean var17 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var18 = new com.sqlmagic.tinysql.FieldTokenizer(var15, var16, var17);
    java.lang.String var19 = var18.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    boolean var25 = var20.acceptsURL(var23);
    boolean var26 = var20.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var27 = var7.getConnection(var14, var19, (java.sql.Driver)var20);
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.forceToSize(var0, (int)var5, var19);
    boolean var29 = com.sqlmagic.tinysql.Utils.isDateColumn((int)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test99() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    java.lang.String var72 = var24.getSQLKeywords();
    java.lang.String var73 = var24.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "tinySQL"+ "'", var73.equals("tinySQL"));

  }

  public void test100() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "";
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var14);
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles(var14, var16);
    java.lang.Integer var19 = new java.lang.Integer(10);
    boolean var20 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var19);
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    boolean var26 = var21.acceptsURL(var24);
    int var27 = var21.getMinorVersion();
    java.lang.String var28 = "";
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = var32.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    boolean var40 = var34.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var41 = var21.getConnection(var28, var33, (java.sql.Driver)var34);
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.forceToSize(var14, (int)var19, var33);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "";
    java.lang.Character var47 = new java.lang.Character('#');
    java.lang.Boolean var48 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var49 = new com.sqlmagic.tinysql.FieldTokenizer(var46, var47, var48);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.toYMD(var50);
    boolean var53 = com.sqlmagic.tinysql.UtilString.isInteger(var52);
    com.sqlmagic.tinysql.FieldTokenizer var54 = new com.sqlmagic.tinysql.FieldTokenizer(var43, var47, var53);
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    int var64 = var58.getMinorVersion();
    java.lang.String var65 = "";
    java.lang.String var66 = "";
    java.lang.Character var67 = new java.lang.Character('#');
    java.lang.Boolean var68 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var69 = new com.sqlmagic.tinysql.FieldTokenizer(var66, var67, var68);
    java.lang.String var70 = var69.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var58.getConnection(var65, var70, (java.sql.Driver)var71);
    boolean var79 = var78.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var80 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var81 = new com.sqlmagic.tinysql.tinySQLException();
    var80.setNextException((java.sql.SQLException)var81);
    java.lang.String var83 = var81.toString();
    java.lang.Object var84 = var57.put((java.lang.Object)var79, (java.lang.Object)var83);
    com.sqlmagic.tinysql.FieldTokenizer var85 = new com.sqlmagic.tinysql.FieldTokenizer(var42, var47, var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var86 = var13.getIndexCondition(var42);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var83.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);

  }

  public void test101() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.allTablesAreSelectable();
    boolean var27 = var24.supportsLikeEscapeClause();
    boolean var28 = var24.supportsUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test102() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    boolean var31 = var24.supportsLikeEscapeClause();
    boolean var32 = var24.supportsStoredFunctionsUsingCallSyntax();
    boolean var33 = var24.supportsUnionAll();
    boolean var34 = var24.supportsCorrelatedSubqueries();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test103() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    java.lang.String var30 = var24.getNumericFunctions();
    java.lang.String var31 = var24.getDriverName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var31.equals("com.sqlmagic.tinysql.dbfFileDriver"));

  }

  public void test104() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    int var46 = var24.getMaxFieldSize();
    java.lang.String var47 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = com.sqlmagic.tinysql.Utils.clearFunction(var51);
    com.sqlmagic.tinysql.Utils.delFile(var47, var51);
    java.lang.String var56 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var57 = var24.executeUpdate(var47);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));

  }

  public void test105() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    java.lang.String var27 = var24.getIdentifierQuoteString();
    int var28 = var24.getMaxUserNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\""+ "'", var27.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test106() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.nullsAreSortedAtEnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test107() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    boolean var28 = var24.isPoolable();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    boolean var53 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setEscapeProcessing((boolean)var53);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test108() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.nullPlusNonNullIsNull();
    java.lang.String var28 = var24.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "2.26h"+ "'", var28.equals("2.26h"));

  }

  public void test109() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = var24.othersInsertsAreVisible((int)var35);
    boolean var38 = var24.supportsPositionedUpdate();
    int var39 = var24.getMaxTablesInSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);

  }

  public void test110() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var53 = var26.sqlexec(var52);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test111() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsAlterTableWithDropColumn();
    boolean var64 = var24.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test112() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    java.lang.Integer var74 = new java.lang.Integer((-1));
    boolean var75 = var24.ownDeletesAreVisible((int)var74);
    java.sql.ResultSet var76 = var24.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test113() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    boolean var64 = var24.supportsGroupByBeyondSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test114() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsUnionAll();
    java.sql.Connection var31 = var24.getConnection();
    boolean var32 = var24.supportsOpenCursorsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test115() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = var24.othersInsertsAreVisible((int)var35);
    boolean var38 = var24.supportsPositionedUpdate();
    java.lang.String var39 = var24.getDriverName();
    boolean var40 = var24.supportsStatementPooling();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var39.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test116() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsNamedParameters();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    com.sqlmagic.tinysql.Utils.delFile(var58, var60);
    java.lang.Integer var63 = new java.lang.Integer(1);
    int var64 = com.sqlmagic.tinysql.UtilString.intValue(var60, (int)var63);
    boolean var65 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var64);
    boolean var66 = var53.othersInsertsAreVisible((int)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var67 = var28.getColumnDisplaySize((int)var64);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test117() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    int var53 = var29.getMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var54 = var28.getColumnName((int)var53);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 9);

  }

  public void test118() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    boolean var26 = var20.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test119() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "";
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var14);
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles(var14, var16);
    java.lang.String var19 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    boolean var25 = var20.acceptsURL(var23);
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    boolean var42 = var36.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var43 = var20.getConnection(var26, var31, (java.sql.Driver)var36);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var44 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var43);
    int var45 = var44.getMaxColumnsInIndex();
    boolean var46 = var44.supportsSchemasInPrivilegeDefinitions();
    boolean var47 = var44.supportsANSI92FullSQL();
    boolean var48 = var44.supportsNamedParameters();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    com.sqlmagic.tinysql.Utils.delFile(var49, var51);
    java.lang.Integer var54 = new java.lang.Integer(1);
    int var55 = com.sqlmagic.tinysql.UtilString.intValue(var51, (int)var54);
    boolean var56 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var55);
    boolean var57 = var44.othersInsertsAreVisible((int)var55);
    java.lang.Byte var58 = new java.lang.Byte((byte)(-1));
    short var59 = com.sqlmagic.tinysql.Utils.fixByte((byte)var58);
    byte[] var60 = com.sqlmagic.tinysql.Utils.forceToSize(var19, (int)var55, (byte)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var61 = var13.evaluate(var16, var19);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (short)255);

  }

  public void test120() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    com.sqlmagic.tinysql.Utils.delFile(var34, var36);
    java.lang.Integer var39 = new java.lang.Integer(1);
    int var40 = com.sqlmagic.tinysql.UtilString.intValue(var36, (int)var39);
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var25.getConnection(var31, var36, (java.sql.Driver)var41);
    boolean var49 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setReadOnly((boolean)var49);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test121() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var30);
    boolean var32 = var27.acceptsURL(var30);
    int var33 = var27.getMinorVersion();
    java.lang.String var34 = "";
    java.lang.String var35 = "";
    java.lang.Character var36 = new java.lang.Character('#');
    java.lang.Boolean var37 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var38 = new com.sqlmagic.tinysql.FieldTokenizer(var35, var36, var37);
    java.lang.String var39 = var38.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var27.getConnection(var34, var39, (java.sql.Driver)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var48 = var24.executeUpdate(var39);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test122() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)10);
    java.lang.Byte var1 = new java.lang.Byte((byte)(-1));
    byte[] var2 = new byte[] { var0, var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = com.sqlmagic.tinysql.Utils.vax_to_long(var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test123() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    boolean var58 = var24.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test124() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    java.lang.String var56 = var53.getExtraNameCharacters();
    int var57 = var53.getDatabaseMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
       var27.columnAtIndex((int)var57);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test125() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92IntermediateSQL();
    int var71 = var24.getMaxUserNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test126() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    java.lang.String var22 = "";
    java.lang.Character var23 = new java.lang.Character('#');
    java.lang.Boolean var24 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var22, var23, var24);
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = var25.getField((int)var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles(var28, var29);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var34 = var20.prepareStatement(var29);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test127() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    boolean var32 = var24.usesLocalFiles();
    java.lang.String var33 = var24.getDriverName();
    java.sql.ResultSet var34 = var24.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var33.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test128() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    var24.cancel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var29 = var24.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test129() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var27 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    java.lang.Integer var53 = new java.lang.Integer((-1));
    var52.setQueryTimeout((int)var53);
    java.sql.ResultSet var55 = var52.getGeneratedKeys();
    var52.cancel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var57 = var20.executetinySQL(var52);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);

  }

  public void test130() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var28 = var24.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test131() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    boolean var46 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test132() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    boolean var14 = var9.hasMoreTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test133() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsPositionedUpdate();
    int var58 = var24.getDriverMajorVersion();
    boolean var59 = var24.storesLowerCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test134() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var72 = var24.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test135() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    com.sqlmagic.tinysql.Utils.delFile(var34, var36);
    java.lang.Integer var39 = new java.lang.Integer(1);
    int var40 = com.sqlmagic.tinysql.UtilString.intValue(var36, (int)var39);
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var25.getConnection(var31, var36, (java.sql.Driver)var41);
    int var49 = var25.getMinorVersion();
    var24.setMaxRows((int)var49);
    com.sqlmagic.tinysql.dbfFileDriver var51 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    java.lang.String var54 = com.sqlmagic.tinysql.UtilString.toYMD(var52);
    boolean var55 = com.sqlmagic.tinysql.UtilString.isInteger(var54);
    boolean var56 = var51.acceptsURL(var54);
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    com.sqlmagic.tinysql.Utils.delFile(var60, var62);
    java.lang.Integer var65 = new java.lang.Integer(1);
    int var66 = com.sqlmagic.tinysql.UtilString.intValue(var62, (int)var65);
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD(var68);
    boolean var71 = com.sqlmagic.tinysql.UtilString.isInteger(var70);
    boolean var72 = var67.acceptsURL(var70);
    boolean var73 = var67.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var74 = var51.getConnection(var57, var62, (java.sql.Driver)var67);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    int var76 = var75.getMaxColumnsInIndex();
    boolean var77 = var75.storesLowerCaseQuotedIdentifiers();
    boolean var78 = var75.supportsOpenCursorsAcrossCommit();
    boolean var79 = var75.supportsSubqueriesInIns();
    java.lang.String var80 = var75.getStringFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var81 = var24.executeQuery(var80);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));

  }

  public void test136() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLException var28 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var29 = new com.sqlmagic.tinysql.tinySQLException();
    var28.setNextException((java.sql.SQLException)var29);
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = "hi!";
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag(var32);
    java.lang.String var35 = "hi!";
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag(var35);
    var34.putAll((java.util.Map)var37);
    int var39 = var37.size();
    boolean var40 = var37.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var41 = new com.sqlmagic.tinysql.tinySQLWhere(var31, (java.util.Hashtable)var37);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    java.lang.String var45 = "";
    java.lang.Character var46 = new java.lang.Character('#');
    java.lang.Boolean var47 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var45, var46, var47);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    com.sqlmagic.tinysql.FieldTokenizer var53 = new com.sqlmagic.tinysql.FieldTokenizer(var42, var46, var52);
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile(var42);
    com.sqlmagic.tinysql.tsResultSet var55 = new com.sqlmagic.tinysql.tsResultSet(var41, (com.sqlmagic.tinysql.tinySQL)var54);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var54);
    com.sqlmagic.tinysql.tinySQLException var57 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var58 = new com.sqlmagic.tinysql.tinySQLException();
    var57.setNextException((java.sql.SQLException)var58);
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = "hi!";
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    com.sqlmagic.tinysql.SimpleXMLTag var63 = new com.sqlmagic.tinysql.SimpleXMLTag(var61);
    java.lang.String var64 = "hi!";
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var64);
    var63.putAll((java.util.Map)var66);
    int var68 = var66.size();
    boolean var69 = var66.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var70 = new com.sqlmagic.tinysql.tinySQLWhere(var60, (java.util.Hashtable)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var71 = var13.getIndexCondition(var60);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var31.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var60.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test137() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    java.lang.Integer var74 = new java.lang.Integer(10);
    boolean var75 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var74);
    boolean var76 = var24.othersDeletesAreVisible((int)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test138() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = var24.getTimeDateFunctions();
    boolean var71 = var24.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test139() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var22.getConnection(var28, var33, (java.sql.Driver)var38);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    int var47 = var46.getMaxColumnsInIndex();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    com.sqlmagic.tinysql.Utils.delFile(var48, var50);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var50);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    java.lang.String var81 = "";
    java.lang.Character var82 = new java.lang.Character('#');
    java.lang.Boolean var83 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var81, var82, var83);
    java.lang.String var85 = "hi!";
    int var86 = com.sqlmagic.tinysql.UtilString.getValueType(var85);
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.toYMD(var85);
    boolean var88 = com.sqlmagic.tinysql.UtilString.isInteger(var87);
    com.sqlmagic.tinysql.FieldTokenizer var89 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var82, var88);
    java.lang.String var90 = "";
    java.sql.ResultSet var91 = var46.getFunctionColumns(var50, var65, var78, var90);
    boolean var92 = var46.supportsANSI92FullSQL();
    java.sql.Connection var93 = var46.getConnection();
    boolean var94 = var46.dataDefinitionCausesTransactionCommit();
    boolean var95 = var46.storesMixedCaseQuotedIdentifiers();
    boolean var96 = var46.supportsUnion();
    boolean var97 = var46.usesLocalFiles();
    var20.setAutoClose((boolean)var97);
    boolean var99 = var20.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test140() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test141() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String[] var4 = var3.getFields();
    java.lang.String[] var5 = var3.getFields();

  }

  public void test142() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    int var71 = var24.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var72 = var24.executeBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));

  }

  public void test143() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    java.lang.Integer var64 = new java.lang.Integer(0);
    boolean var65 = var24.supportsResultSetHoldability((int)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test144() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.sql.ResultSet var27 = var24.getTypeInfo();
    int var28 = var24.getSQLStateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test145() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var26 = var20.prepareStatement(var23);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test146() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.dataDefinitionCausesTransactionCommit();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsUnion();
    boolean var75 = var24.usesLocalFiles();
    boolean var76 = var24.supportsTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test147() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString(var60);
    java.lang.String var64 = var56.nativeSQL(var60);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.removeQuotes(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));

  }

  public void test148() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsPositionedUpdate();
    int var58 = var24.getDriverMajorVersion();
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = var62.getField((int)var64);
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    boolean var71 = var66.acceptsURL(var69);
    boolean var72 = com.sqlmagic.tinysql.Utils.clearFunction(var69);
    java.lang.String var73 = "";
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var73);
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles(var73, var75);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    boolean var80 = com.sqlmagic.tinysql.Utils.clearFunction(var78);
    java.lang.Double var81 = new java.lang.Double(100.0d);
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue(var78, (double)var81);
    double var83 = com.sqlmagic.tinysql.UtilString.doubleValue(var73, (double)var82);
    java.lang.String var84 = "";
    java.lang.String var85 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var84);
    java.sql.ResultSet var86 = var24.getAttributes(var65, var69, var73, var84);
    boolean var87 = com.sqlmagic.tinysql.UtilString.isQuotedString(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "NULL"+ "'", var65.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test149() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsGroupByBeyondSelect();
    java.lang.String var87 = var24.getSearchStringEscape();
    java.sql.ResultSet var88 = var24.getTypeInfo();
    boolean var89 = var24.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\\"+ "'", var87.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test150() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.getSQLState();
    java.util.Iterator var5 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test151() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxCursorNameLength();
    boolean var88 = var24.storesMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test152() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = var3.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    boolean var9 = com.sqlmagic.tinysql.UtilString.isInteger(var8);
    boolean var10 = var5.acceptsURL(var8);
    int var11 = var5.getMinorVersion();
    java.lang.String var12 = "";
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character('#');
    java.lang.Boolean var15 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var16 = new com.sqlmagic.tinysql.FieldTokenizer(var13, var14, var15);
    java.lang.String var17 = var16.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.toYMD(var19);
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger(var21);
    boolean var23 = var18.acceptsURL(var21);
    boolean var24 = var18.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var25 = var5.getConnection(var12, var17, (java.sql.Driver)var18);
    var25.close();
    var25.close();
    java.sql.DatabaseMetaData var28 = var25.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var29 = new com.sqlmagic.tinysql.tinySQLStatement(var25);
    java.lang.Integer var30 = new java.lang.Integer((-1));
    var29.setQueryTimeout((int)var30);
    java.lang.String var32 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var34);
    boolean var37 = com.sqlmagic.tinysql.UtilString.isInteger(var36);
    boolean var38 = var33.acceptsURL(var36);
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction(var36);
    com.sqlmagic.tinysql.Utils.delFile(var32, var36);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.removeQuotes(var32);
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    boolean var46 = com.sqlmagic.tinysql.UtilString.isInteger(var45);
    boolean var47 = var42.acceptsURL(var45);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    com.sqlmagic.tinysql.Utils.delFile(var51, var53);
    java.lang.Integer var56 = new java.lang.Integer(1);
    int var57 = com.sqlmagic.tinysql.UtilString.intValue(var53, (int)var56);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    boolean var64 = var58.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var42.getConnection(var48, var53, (java.sql.Driver)var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    int var67 = var66.getMaxColumnsInIndex();
    boolean var68 = var66.supportsSchemasInPrivilegeDefinitions();
    boolean var69 = var66.supportsANSI92FullSQL();
    boolean var70 = var66.supportsOpenStatementsAcrossRollback();
    boolean var71 = var66.supportsCorrelatedSubqueries();
    boolean var72 = var66.nullsAreSortedLow();
    java.lang.String var73 = var66.getURL();
    java.lang.String[] var74 = new java.lang.String[] { var73};
    int var75 = var29.executeUpdate(var41, var74);
    java.lang.String var76 = var3.getField((int)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));

  }

  public void test153() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.doesMaxRowSizeIncludeBlobs();
    java.lang.String var31 = var24.getNumericFunctions();
    java.lang.String var32 = var24.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "2.26h"+ "'", var32.equals("2.26h"));

  }

  public void test154() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var28.getTableName((int)var35);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test155() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    java.lang.String var88 = var24.getSystemFunctions();
    boolean var89 = var24.supportsPositionedDelete();
    boolean var90 = var24.supportsSchemasInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test156() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.removeQuotes(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test157() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxCursorNameLength();
    int var88 = var24.getMaxColumnsInIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var89 = var24.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test158() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsCatalogsInTableDefinitions();
    boolean var29 = var24.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test159() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsOpenStatementsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test160() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.lang.String var27 = var24.getSearchStringEscape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\\"+ "'", var27.equals("\\"));

  }

  public void test161() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLException var28 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var29 = new com.sqlmagic.tinysql.tinySQLException();
    var28.setNextException((java.sql.SQLException)var29);
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = "hi!";
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag(var32);
    java.lang.String var35 = "hi!";
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag(var35);
    var34.putAll((java.util.Map)var37);
    int var39 = var37.size();
    boolean var40 = var37.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var41 = new com.sqlmagic.tinysql.tinySQLWhere(var31, (java.util.Hashtable)var37);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    java.lang.String var45 = "";
    java.lang.Character var46 = new java.lang.Character('#');
    java.lang.Boolean var47 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var45, var46, var47);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    com.sqlmagic.tinysql.FieldTokenizer var53 = new com.sqlmagic.tinysql.FieldTokenizer(var42, var46, var52);
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile(var42);
    com.sqlmagic.tinysql.tsResultSet var55 = new com.sqlmagic.tinysql.tsResultSet(var41, (com.sqlmagic.tinysql.tinySQL)var54);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var54);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var57 = var54.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test162() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.sql.RowIdLifetime var29 = var24.getRowIdLifetime();
    boolean var30 = var24.supportsSelectForUpdate();
    boolean var31 = var24.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test163() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String[] var4 = var3.getFields();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = "";
    boolean var8 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var7);
    java.lang.String var9 = var3.getField((int)var6, var7);
    com.sqlmagic.tinysql.Utils.delFile(var7);
    java.lang.Integer var11 = new java.lang.Integer(0);
    boolean var12 = com.sqlmagic.tinysql.Utils.isDateColumn((int)var11);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.toYMD(var19);
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    com.sqlmagic.tinysql.Utils.delFile(var22, var24);
    java.lang.Integer var27 = new java.lang.Integer(1);
    int var28 = com.sqlmagic.tinysql.UtilString.intValue(var24, (int)var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    boolean var35 = var29.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var36 = var13.getConnection(var19, var24, (java.sql.Driver)var29);
    java.lang.String var37 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    java.lang.String var44 = "hi!";
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType(var44);
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD(var44);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    com.sqlmagic.tinysql.Utils.delFile(var47, var49);
    java.lang.Integer var52 = new java.lang.Integer(1);
    int var53 = com.sqlmagic.tinysql.UtilString.intValue(var49, (int)var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    boolean var60 = var54.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var61 = var38.getConnection(var44, var49, (java.sql.Driver)var54);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var61);
    int var63 = var62.getMaxColumnsInIndex();
    boolean var64 = var62.supportsSchemasInPrivilegeDefinitions();
    boolean var65 = var62.supportsANSI92FullSQL();
    boolean var66 = var62.supportsNamedParameters();
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    com.sqlmagic.tinysql.Utils.delFile(var67, var69);
    java.lang.Integer var72 = new java.lang.Integer(1);
    int var73 = com.sqlmagic.tinysql.UtilString.intValue(var69, (int)var72);
    boolean var74 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var73);
    boolean var75 = var62.othersInsertsAreVisible((int)var73);
    java.lang.Byte var76 = new java.lang.Byte((byte)(-1));
    short var77 = com.sqlmagic.tinysql.Utils.fixByte((byte)var76);
    byte[] var78 = com.sqlmagic.tinysql.Utils.forceToSize(var37, (int)var73, (byte)var76);
    boolean var79 = var13.acceptsURL(var37);
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.forceToSize(var7, (int)var11, var37);
    boolean var81 = com.sqlmagic.tinysql.UtilString.isQuotedString(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (short)255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test164() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    com.sqlmagic.tinysql.Utils.delFile(var14, var16);
    boolean var19 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var16);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes(var16);
    java.lang.String var21 = "hi!";
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger(var21);
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag(var21);
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    int var30 = var24.getMinorVersion();
    java.lang.String var31 = "";
    java.lang.String var32 = "";
    java.lang.Character var33 = new java.lang.Character('#');
    java.lang.Boolean var34 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var32, var33, var34);
    java.lang.String var36 = var35.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    boolean var43 = var37.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var44 = var24.getConnection(var31, var36, (java.sql.Driver)var37);
    boolean var45 = var44.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var46 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var47 = new com.sqlmagic.tinysql.tinySQLException();
    var46.setNextException((java.sql.SQLException)var47);
    java.lang.String var49 = var47.toString();
    java.lang.Object var50 = var23.put((java.lang.Object)var45, (java.lang.Object)var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var51 = var13.evaluate(var16, var49);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var49.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test165() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLException var28 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var29 = new com.sqlmagic.tinysql.tinySQLException();
    var28.setNextException((java.sql.SQLException)var29);
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = "hi!";
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag(var32);
    java.lang.String var35 = "hi!";
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag(var35);
    var34.putAll((java.util.Map)var37);
    int var39 = var37.size();
    boolean var40 = var37.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var41 = new com.sqlmagic.tinysql.tinySQLWhere(var31, (java.util.Hashtable)var37);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    java.lang.String var45 = "";
    java.lang.Character var46 = new java.lang.Character('#');
    java.lang.Boolean var47 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var45, var46, var47);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    com.sqlmagic.tinysql.FieldTokenizer var53 = new com.sqlmagic.tinysql.FieldTokenizer(var42, var46, var52);
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile(var42);
    com.sqlmagic.tinysql.tsResultSet var55 = new com.sqlmagic.tinysql.tsResultSet(var41, (com.sqlmagic.tinysql.tinySQL)var54);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var54);
    java.lang.String var57 = "";
    java.lang.Character var58 = new java.lang.Character('#');
    java.lang.Boolean var59 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var60 = new com.sqlmagic.tinysql.FieldTokenizer(var57, var58, var59);
    java.lang.String[] var61 = var60.getFields();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = "";
    boolean var65 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var64);
    java.lang.String var66 = var60.getField((int)var63, var64);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var56.rowAt((int)var63);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test166() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = var24.getTimeDateFunctions();
    boolean var71 = var24.supportsSubqueriesInQuantifieds();
    boolean var72 = var24.supportsANSI92IntermediateSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test167() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    com.sqlmagic.tinysql.Utils.delFile(var0, var2);
    boolean var5 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var2);
    java.lang.String var6 = com.sqlmagic.tinysql.UtilString.removeQuotes(var2);
    boolean var7 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var6);
    com.sqlmagic.tinysql.Utils.delFile(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test168() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    boolean var89 = var24.doesMaxRowSizeIncludeBlobs();
    int var90 = var24.getMaxProcedureNameLength();
    boolean var91 = var24.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test169() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.tinySQLException var29 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var30 = new com.sqlmagic.tinysql.tinySQLException();
    var29.setNextException((java.sql.SQLException)var30);
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = "hi!";
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var33);
    java.lang.String var36 = "hi!";
    boolean var37 = com.sqlmagic.tinysql.UtilString.isInteger(var36);
    com.sqlmagic.tinysql.SimpleXMLTag var38 = new com.sqlmagic.tinysql.SimpleXMLTag(var36);
    var35.putAll((java.util.Map)var38);
    int var40 = var38.size();
    boolean var41 = var38.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var42 = new com.sqlmagic.tinysql.tinySQLWhere(var32, (java.util.Hashtable)var38);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "";
    java.lang.Character var47 = new java.lang.Character('#');
    java.lang.Boolean var48 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var49 = new com.sqlmagic.tinysql.FieldTokenizer(var46, var47, var48);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.toYMD(var50);
    boolean var53 = com.sqlmagic.tinysql.UtilString.isInteger(var52);
    com.sqlmagic.tinysql.FieldTokenizer var54 = new com.sqlmagic.tinysql.FieldTokenizer(var43, var47, var53);
    com.sqlmagic.tinysql.dbfFile var55 = new com.sqlmagic.tinysql.dbfFile(var43);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet(var42, (com.sqlmagic.tinysql.tinySQL)var55);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var57 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var56);
    int var58 = var56.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var59 = var28.getColumnDisplaySize((int)var58);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var32.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test170() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var0);
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.util.Vector var4 = com.sqlmagic.tinysql.Utils.getAllFiles(var0, var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toStandardDate(var0);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test171() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsUnionAll();
    java.lang.String var75 = var24.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "2.26h"+ "'", var75.equals("2.26h"));

  }

  public void test172() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    int var30 = var24.getMaxCursorNameLength();
    java.lang.String var31 = var24.getDatabaseProductVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var32 = com.sqlmagic.tinysql.UtilString.dateValue(var31);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "2.26h"+ "'", var31.equals("2.26h"));

  }

  public void test173() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.supportsGetGeneratedKeys();
    int var74 = var24.getMaxColumnNameLength();
    boolean var75 = var24.supportsLimitedOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test174() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String[] var4 = var3.getFields();
    java.lang.String var5 = "";
    java.lang.Character var6 = new java.lang.Character('#');
    java.lang.Boolean var7 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var8 = new com.sqlmagic.tinysql.FieldTokenizer(var5, var6, var7);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = var8.getField((int)var10);
    java.lang.String var12 = var3.getField((int)var10);
    java.lang.String var13 = var3.nextField();
    boolean var14 = var3.hasMoreFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "NULL"+ "'", var11.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "NULL"+ "'", var12.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test175() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    boolean var29 = var24.supportsColumnAliasing();
    int var30 = var24.getMaxConnections();
    boolean var31 = var24.supportsColumnAliasing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test176() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.isCatalogAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test177() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test178() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)100);
    java.lang.Byte var1 = new java.lang.Byte((byte)0);
    java.lang.Byte var2 = new java.lang.Byte((byte)10);
    byte[] var3 = new byte[] { var0, var1, var2};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = com.sqlmagic.tinysql.Utils.vax_to_long(var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test179() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.dataDefinitionCausesTransactionCommit();
    int var73 = var24.getMaxStatements();
    boolean var74 = var24.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test180() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsPositionedUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test181() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.sql.RowIdLifetime var29 = var24.getRowIdLifetime();
    int var30 = var24.getMaxConnections();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var31 = var24.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test182() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test183() throws Throwable {

    java.lang.Short var0 = new java.lang.Short((short)0);
    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)var0);
    byte[] var2 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)var0);

  }

  public void test184() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    boolean var28 = var24.getMoreResults();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsSubqueriesInIns();
    java.lang.String var58 = var53.getDatabaseProductVersion();
    java.lang.Integer var59 = new java.lang.Integer(1);
    java.lang.Integer var60 = new java.lang.Integer(100);
    int[] var61 = new int[] { var59, var60};
    int var62 = var24.executeUpdate(var58, var61);
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    boolean var68 = var63.acceptsURL(var66);
    int var69 = var63.getMinorVersion();
    java.lang.String var70 = "";
    java.lang.String var71 = "";
    java.lang.Character var72 = new java.lang.Character('#');
    java.lang.Boolean var73 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var74 = new com.sqlmagic.tinysql.FieldTokenizer(var71, var72, var73);
    java.lang.String var75 = var74.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger(var79);
    boolean var81 = var76.acceptsURL(var79);
    boolean var82 = var76.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var83 = var63.getConnection(var70, var75, (java.sql.Driver)var76);
    var83.close();
    var83.close();
    java.sql.DatabaseMetaData var86 = var83.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var87 = new com.sqlmagic.tinysql.tinySQLStatement(var83);
    java.lang.Integer var88 = new java.lang.Integer((-1));
    var87.setQueryTimeout((int)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setFetchSize((int)var88);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "2.26h"+ "'", var58.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test185() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    boolean var58 = var24.supportsMultipleResultSets();
    java.lang.String var59 = var24.getUserName();
    java.lang.String var60 = var24.getSearchStringEscape();
    boolean var61 = var24.supportsOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "\\"+ "'", var60.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test186() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = var24.othersInsertsAreVisible((int)var35);
    boolean var38 = var24.supportsAlterTableWithDropColumn();
    java.sql.ResultSet var39 = var24.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test187() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    int var7 = var1.getMinorVersion();
    java.lang.String var8 = "";
    java.lang.String var9 = "";
    java.lang.Character var10 = new java.lang.Character('#');
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var12 = new com.sqlmagic.tinysql.FieldTokenizer(var9, var10, var11);
    java.lang.String var13 = var12.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    boolean var20 = var14.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var21 = var1.getConnection(var8, var13, (java.sql.Driver)var14);
    var21.close();
    var21.close();
    java.sql.DatabaseMetaData var24 = var21.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var25 = new com.sqlmagic.tinysql.tinySQLStatement(var21);
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    java.lang.String[] var31 = var29.getFields();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    com.sqlmagic.tinysql.Utils.delFile(var32, var34);
    java.lang.Integer var37 = new java.lang.Integer(1);
    int var38 = com.sqlmagic.tinysql.UtilString.intValue(var34, (int)var37);
    java.lang.String var39 = "";
    java.lang.Character var40 = new java.lang.Character('#');
    java.lang.Boolean var41 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var42 = new com.sqlmagic.tinysql.FieldTokenizer(var39, var40, var41);
    java.lang.String[] var43 = var42.getFields();
    int var44 = var42.countFields();
    int var45 = var29.getInt((int)var38, (int)var44);
    var25.setMaxFieldSize((int)var44);
    int var47 = var25.getMaxFieldSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var48 = var0.sqlexec(var25);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);

  }

  public void test188() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    boolean var28 = var24.getMoreResults();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsSubqueriesInIns();
    java.lang.String var58 = var53.getDatabaseProductVersion();
    java.lang.Integer var59 = new java.lang.Integer(1);
    java.lang.Integer var60 = new java.lang.Integer(100);
    int[] var61 = new int[] { var59, var60};
    int var62 = var24.executeUpdate(var58, var61);
    int var63 = var24.getMaxFieldSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "2.26h"+ "'", var58.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test189() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var0.getSQLState();
    com.sqlmagic.tinysql.tinySQLException var4 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var5 = new com.sqlmagic.tinysql.tinySQLException();
    var4.setNextException((java.sql.SQLException)var5);
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.getSQLState();
    var0.setNextException((java.sql.SQLException)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var7.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test190() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.dataDefinitionCausesTransactionCommit();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test191() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = var32.getField((int)var34);
    java.lang.Integer var36 = new java.lang.Integer((-1));
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String[] var41 = var40.getFields();
    int var42 = var40.countFields();
    int var43 = var32.getInt((int)var36, (int)var42);
    var27.setFetchSize((int)var36);
    com.sqlmagic.tinysql.tinySQLException var45 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var46 = new com.sqlmagic.tinysql.tinySQLException();
    var45.setNextException((java.sql.SQLException)var46);
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = "hi!";
    boolean var50 = com.sqlmagic.tinysql.UtilString.isInteger(var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var49);
    java.lang.String var52 = "hi!";
    boolean var53 = com.sqlmagic.tinysql.UtilString.isInteger(var52);
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag(var52);
    var51.putAll((java.util.Map)var54);
    int var56 = var54.size();
    boolean var57 = var54.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var58 = new com.sqlmagic.tinysql.tinySQLWhere(var48, (java.util.Hashtable)var54);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    java.lang.String var62 = "";
    java.lang.Character var63 = new java.lang.Character('#');
    java.lang.Boolean var64 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var65 = new com.sqlmagic.tinysql.FieldTokenizer(var62, var63, var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.toYMD(var66);
    boolean var69 = com.sqlmagic.tinysql.UtilString.isInteger(var68);
    com.sqlmagic.tinysql.FieldTokenizer var70 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var63, var69);
    com.sqlmagic.tinysql.dbfFile var71 = new com.sqlmagic.tinysql.dbfFile(var59);
    com.sqlmagic.tinysql.tsResultSet var72 = new com.sqlmagic.tinysql.tsResultSet(var58, (com.sqlmagic.tinysql.tinySQL)var71);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var73 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var72);
    int var74 = var72.getColumnCount();
    java.lang.Integer var75 = new java.lang.Integer(10);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var76 = var27.getMoreResults((int)var74, (int)var75);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test192() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxColumnsInIndex();
    int var88 = var24.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test193() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = var2.nextTag();
    java.lang.Integer var4 = new java.lang.Integer(0);
    boolean var5 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var4);
    java.lang.Object var6 = var2.get((java.lang.Object)var4);
    boolean var7 = var2.hasMoreTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test194() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsAlterTableWithDropColumn();
    boolean var64 = var24.storesUpperCaseQuotedIdentifiers();
    boolean var65 = var24.autoCommitFailureClosesAllResultSets();
    int var66 = var24.getMaxColumnsInOrderBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test195() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92IntermediateSQL();
    int var71 = var24.getMaxColumnsInOrderBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test196() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    com.sqlmagic.tinysql.Utils.delFile(var37, var39);
    java.lang.Integer var42 = new java.lang.Integer(1);
    int var43 = com.sqlmagic.tinysql.UtilString.intValue(var39, (int)var42);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    boolean var50 = var44.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var51 = var28.getConnection(var34, var39, (java.sql.Driver)var44);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var52 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var53 = var52.supportsCatalogsInPrivilegeDefinitions();
    boolean var54 = var52.storesLowerCaseQuotedIdentifiers();
    java.lang.String var55 = var52.getIdentifierQuoteString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var56 = var13.getIndexCondition(var55);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "\""+ "'", var55.equals("\""));

  }

  public void test197() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD(var20);
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    com.sqlmagic.tinysql.Utils.delFile(var23, var25);
    java.lang.Integer var28 = new java.lang.Integer(1);
    int var29 = com.sqlmagic.tinysql.UtilString.intValue(var25, (int)var28);
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    boolean var36 = var30.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var37 = var14.getConnection(var20, var25, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var38 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var37);
    int var39 = var38.getMaxColumnsInIndex();
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var42);
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD(var47);
    boolean var50 = com.sqlmagic.tinysql.UtilString.isInteger(var49);
    boolean var51 = var46.acceptsURL(var49);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    java.lang.String var54 = com.sqlmagic.tinysql.UtilString.toYMD(var52);
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    com.sqlmagic.tinysql.Utils.delFile(var55, var57);
    java.lang.Integer var60 = new java.lang.Integer(1);
    int var61 = com.sqlmagic.tinysql.UtilString.intValue(var57, (int)var60);
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    boolean var67 = var62.acceptsURL(var65);
    boolean var68 = var62.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var69 = var46.getConnection(var52, var57, (java.sql.Driver)var62);
    java.lang.String var70 = "hi!";
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType(var70);
    java.lang.String var72 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger(var79);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var74, var80);
    java.lang.String var82 = "";
    java.sql.ResultSet var83 = var38.getFunctionColumns(var42, var57, var70, var82);
    java.lang.String var84 = var38.getTimeDateFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var85 = var13.getIndexCondition(var84);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));

  }

  public void test198() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.lang.String var89 = var24.getURL();
    java.lang.String var90 = var24.getSearchStringEscape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "\\"+ "'", var90.equals("\\"));

  }

  public void test199() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    boolean var71 = var24.getMoreResults();
    boolean var72 = var24.isPoolable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test200() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsGroupBy();
    java.sql.RowIdLifetime var28 = var24.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test201() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    int var7 = var1.getMinorVersion();
    java.lang.String var8 = "";
    java.lang.String var9 = "";
    java.lang.Character var10 = new java.lang.Character('#');
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var12 = new com.sqlmagic.tinysql.FieldTokenizer(var9, var10, var11);
    java.lang.String var13 = var12.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    boolean var20 = var14.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var21 = var1.getConnection(var8, var13, (java.sql.Driver)var14);
    var21.close();
    var21.close();
    java.sql.DatabaseMetaData var24 = var21.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var25 = new com.sqlmagic.tinysql.tinySQLStatement(var21);
    java.lang.Integer var26 = new java.lang.Integer((-1));
    var25.setQueryTimeout((int)var26);
    java.sql.ResultSet var28 = var25.getGeneratedKeys();
    boolean var29 = var25.getMoreResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var30 = var0.sqlexec(var25);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test202() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsGroupByBeyondSelect();
    boolean var87 = var24.supportsNonNullableColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test203() throws Throwable {

    java.lang.String var0 = "";
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    com.sqlmagic.tinysql.Utils.delFile(var10, var12);
    java.lang.Integer var15 = new java.lang.Integer(1);
    int var16 = com.sqlmagic.tinysql.UtilString.intValue(var12, (int)var15);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var1.getConnection(var7, var12, (java.sql.Driver)var17);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var25 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var24);
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    var24.setTransactionIsolation((int)var31);
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    com.sqlmagic.tinysql.Utils.delFile(var43, var45);
    java.lang.Integer var48 = new java.lang.Integer(1);
    int var49 = com.sqlmagic.tinysql.UtilString.intValue(var45, (int)var48);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.toYMD(var51);
    boolean var54 = com.sqlmagic.tinysql.UtilString.isInteger(var53);
    boolean var55 = var50.acceptsURL(var53);
    boolean var56 = var50.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var57 = var34.getConnection(var40, var45, (java.sql.Driver)var50);
    boolean var58 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var40);
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.forceToSize(var0, (int)var31, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var60 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var0);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));

  }

  public void test204() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    java.lang.String var22 = var20.getCatalog();
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.toYMD(var24);
    boolean var27 = com.sqlmagic.tinysql.UtilString.isInteger(var26);
    boolean var28 = var23.acceptsURL(var26);
    int var29 = var23.getMinorVersion();
    java.lang.String var30 = "";
    java.lang.String var31 = "";
    java.lang.Character var32 = new java.lang.Character('#');
    java.lang.Boolean var33 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var34 = new com.sqlmagic.tinysql.FieldTokenizer(var31, var32, var33);
    java.lang.String var35 = var34.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    boolean var42 = var36.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var43 = var23.getConnection(var30, var35, (java.sql.Driver)var36);
    var43.close();
    var43.close();
    java.sql.DatabaseMetaData var46 = var43.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var47 = new com.sqlmagic.tinysql.tinySQLStatement(var43);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    var47.setQueryTimeout((int)var48);
    java.sql.ResultSet var50 = var47.getGeneratedKeys();
    boolean var51 = var47.getMoreResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var52 = var20.executetinySQL(var47);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test205() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction(var21);
    boolean var24 = var13.acceptsURL(var21);
    java.lang.String var25 = "";
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var25);
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles(var25, var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    boolean var32 = com.sqlmagic.tinysql.Utils.clearFunction(var30);
    java.lang.Double var33 = new java.lang.Double(100.0d);
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue(var30, (double)var33);
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue(var25, (double)var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = var40.getField((int)var42);
    java.lang.String var44 = "";
    java.lang.Character var45 = new java.lang.Character('#');
    java.lang.Boolean var46 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var47 = new com.sqlmagic.tinysql.FieldTokenizer(var44, var45, var46);
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles(var43, var44);
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.toYMD(var50);
    boolean var53 = com.sqlmagic.tinysql.UtilString.isInteger(var52);
    boolean var54 = var49.acceptsURL(var52);
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    com.sqlmagic.tinysql.Utils.delFile(var58, var60);
    java.lang.Integer var63 = new java.lang.Integer(1);
    int var64 = com.sqlmagic.tinysql.UtilString.intValue(var60, (int)var63);
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.toYMD(var66);
    boolean var69 = com.sqlmagic.tinysql.UtilString.isInteger(var68);
    boolean var70 = var65.acceptsURL(var68);
    boolean var71 = var65.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var72 = var49.getConnection(var55, var60, (java.sql.Driver)var65);
    int var73 = var49.getMinorVersion();
    com.sqlmagic.tinysql.tinySQLConnection var74 = var13.getConnection(var25, var44, (java.sql.Driver)var49);
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "NULL"+ "'", var43.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));

  }

  public void test206() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    var2.clear();
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    com.sqlmagic.tinysql.Utils.delFile(var13, var15);
    java.lang.Integer var18 = new java.lang.Integer(1);
    int var19 = com.sqlmagic.tinysql.UtilString.intValue(var15, (int)var18);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    boolean var25 = var20.acceptsURL(var23);
    boolean var26 = var20.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var27 = var4.getConnection(var10, var15, (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    com.sqlmagic.tinysql.Utils.delFile(var30, var32);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var32);
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    com.sqlmagic.tinysql.Utils.delFile(var45, var47);
    java.lang.Integer var50 = new java.lang.Integer(1);
    int var51 = com.sqlmagic.tinysql.UtilString.intValue(var47, (int)var50);
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    java.lang.String var55 = com.sqlmagic.tinysql.UtilString.toYMD(var53);
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    boolean var57 = var52.acceptsURL(var55);
    boolean var58 = var52.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var59 = var36.getConnection(var42, var47, (java.sql.Driver)var52);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "";
    java.lang.Character var64 = new java.lang.Character('#');
    java.lang.Boolean var65 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var66 = new com.sqlmagic.tinysql.FieldTokenizer(var63, var64, var65);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var60, var64, var70);
    java.lang.String var72 = "";
    java.sql.ResultSet var73 = var28.getFunctionColumns(var32, var47, var60, var72);
    boolean var74 = var28.supportsANSI92FullSQL();
    java.sql.Connection var75 = var28.getConnection();
    java.lang.Object var76 = var2.remove((java.lang.Object)var28);
    int var77 = var2.countTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test207() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    boolean var24 = var20.getAutoClose();
    java.sql.SQLWarning var25 = var20.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);

  }

  public void test208() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = var28.getField((int)var30);
    var23.setTransactionIsolation((int)var30);
    java.lang.String var33 = "";
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(10);
    boolean var39 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    int var46 = var40.getMinorVersion();
    java.lang.String var47 = "";
    java.lang.String var48 = "";
    java.lang.Character var49 = new java.lang.Character('#');
    java.lang.Boolean var50 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var51 = new com.sqlmagic.tinysql.FieldTokenizer(var48, var49, var50);
    java.lang.String var52 = var51.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var40.getConnection(var47, var52, (java.sql.Driver)var53);
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.forceToSize(var33, (int)var38, var52);
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.CallableStatement var63 = var23.prepareCall(var52);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "NULL"+ "'", var31.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));

  }

  public void test209() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    boolean var54 = var53.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var55 = "";
    java.lang.Character var56 = new java.lang.Character('#');
    java.lang.Boolean var57 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var58 = new com.sqlmagic.tinysql.FieldTokenizer(var55, var56, var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = var58.getField((int)var60);
    java.lang.Integer var62 = new java.lang.Integer((-1));
    java.lang.String var63 = "";
    java.lang.Character var64 = new java.lang.Character('#');
    java.lang.Boolean var65 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var66 = new com.sqlmagic.tinysql.FieldTokenizer(var63, var64, var65);
    java.lang.String[] var67 = var66.getFields();
    int var68 = var66.countFields();
    int var69 = var58.getInt((int)var62, (int)var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var53.supportsResultSetConcurrency((int)var69, (int)var77);
    boolean var86 = var28.isSigned((int)var69);
    int var87 = var28.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "NULL"+ "'", var61.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test210() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    boolean var8 = var5.isEmpty();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    boolean var13 = com.sqlmagic.tinysql.UtilString.isInteger(var12);
    boolean var14 = var9.acceptsURL(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    com.sqlmagic.tinysql.Utils.delFile(var18, var20);
    java.lang.Integer var23 = new java.lang.Integer(1);
    int var24 = com.sqlmagic.tinysql.UtilString.intValue(var20, (int)var23);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    boolean var31 = var25.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var32 = var9.getConnection(var15, var20, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var34 = var33.getMaxColumnsInIndex();
    boolean var35 = var33.supportsSchemasInPrivilegeDefinitions();
    boolean var36 = var33.supportsANSI92FullSQL();
    boolean var37 = var33.supportsSubqueriesInIns();
    int var38 = var33.getMaxStatementLength();
    boolean var39 = var33.nullPlusNonNullIsNull();
    int var40 = var33.getDatabaseMinorVersion();
    boolean var41 = var5.containsValue((java.lang.Object)var40);
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    boolean var46 = com.sqlmagic.tinysql.UtilString.isInteger(var45);
    boolean var47 = var42.acceptsURL(var45);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    com.sqlmagic.tinysql.Utils.delFile(var51, var53);
    java.lang.Integer var56 = new java.lang.Integer(1);
    int var57 = com.sqlmagic.tinysql.UtilString.intValue(var53, (int)var56);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    boolean var64 = var58.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var42.getConnection(var48, var53, (java.sql.Driver)var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    int var67 = var66.getMaxColumnsInIndex();
    boolean var68 = var66.supportsSchemasInPrivilegeDefinitions();
    boolean var69 = var66.supportsANSI92FullSQL();
    boolean var70 = var66.supportsSubqueriesInIns();
    int var71 = var66.getMaxStatementLength();
    boolean var72 = var5.containsValue((java.lang.Object)var66);
    boolean var73 = var66.nullsAreSortedAtEnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test211() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    boolean var32 = var24.usesLocalFiles();
    boolean var33 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var34 = var24.getDatabaseProductName();
    int var35 = var24.getMaxColumnsInTable();
    boolean var36 = var24.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "tinySQL"+ "'", var34.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test212() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var27 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    boolean var28 = var27.storesMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test213() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    com.sqlmagic.tinysql.tinySQLException var2 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var3 = var2.getSQLState();
    var0.setNextException((java.sql.SQLException)var2);
    com.sqlmagic.tinysql.tinySQLException var5 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var6 = new com.sqlmagic.tinysql.tinySQLException();
    var5.setNextException((java.sql.SQLException)var6);
    java.lang.String var8 = var6.toString();
    java.lang.String var9 = var6.getSQLState();
    var0.setNextException((java.sql.SQLException)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var8.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test214() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var65);
    java.lang.Character var69 = new java.lang.Character('4');
    java.lang.Integer var70 = new java.lang.Integer(10);
    boolean var71 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var70);
    com.sqlmagic.tinysql.FieldTokenizer var72 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var69, var71);
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.toYMD(var74);
    boolean var77 = com.sqlmagic.tinysql.UtilString.isInteger(var76);
    boolean var78 = var73.acceptsURL(var76);
    int var79 = var73.getMinorVersion();
    java.lang.String var80 = "";
    java.lang.String var81 = "";
    java.lang.Character var82 = new java.lang.Character('#');
    java.lang.Boolean var83 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var81, var82, var83);
    java.lang.String var85 = var84.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var86 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var87 = "hi!";
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType(var87);
    java.lang.String var89 = com.sqlmagic.tinysql.UtilString.toYMD(var87);
    boolean var90 = com.sqlmagic.tinysql.UtilString.isInteger(var89);
    boolean var91 = var86.acceptsURL(var89);
    boolean var92 = var86.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var93 = var73.getConnection(var80, var85, (java.sql.Driver)var86);
    boolean var94 = var93.isClosed();
    com.sqlmagic.tinysql.FieldTokenizer var95 = new com.sqlmagic.tinysql.FieldTokenizer(var30, var69, var94);
    com.sqlmagic.tinysql.tinySQLException var96 = new com.sqlmagic.tinysql.tinySQLException(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!"+ "'", var89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test215() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var27 = var20.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test216() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    boolean var30 = var24.nullsAreSortedLow();
    java.lang.String var31 = var24.getURL();
    int var32 = var24.getMaxConnections();
    boolean var33 = var24.supportsAlterTableWithDropColumn();
    boolean var34 = var24.nullsAreSortedHigh();
    boolean var35 = var24.supportsMultipleOpenResults();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test217() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    java.lang.String var88 = var24.getSystemFunctions();
    boolean var89 = var24.supportsPositionedDelete();
    boolean var90 = var24.supportsGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test218() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.allTablesAreSelectable();
    boolean var27 = var24.supportsLikeEscapeClause();
    boolean var28 = var24.supportsANSI92FullSQL();
    java.lang.String var29 = var24.getNumericFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));

  }

  public void test219() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    boolean var32 = var24.usesLocalFiles();
    boolean var33 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var34 = var24.isCatalogAtStart();
    boolean var35 = var24.supportsCatalogsInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test220() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    var2.clear();
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    com.sqlmagic.tinysql.Utils.delFile(var13, var15);
    java.lang.Integer var18 = new java.lang.Integer(1);
    int var19 = com.sqlmagic.tinysql.UtilString.intValue(var15, (int)var18);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    boolean var25 = var20.acceptsURL(var23);
    boolean var26 = var20.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var27 = var4.getConnection(var10, var15, (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    com.sqlmagic.tinysql.Utils.delFile(var30, var32);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var32);
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    com.sqlmagic.tinysql.Utils.delFile(var45, var47);
    java.lang.Integer var50 = new java.lang.Integer(1);
    int var51 = com.sqlmagic.tinysql.UtilString.intValue(var47, (int)var50);
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    java.lang.String var55 = com.sqlmagic.tinysql.UtilString.toYMD(var53);
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    boolean var57 = var52.acceptsURL(var55);
    boolean var58 = var52.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var59 = var36.getConnection(var42, var47, (java.sql.Driver)var52);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "";
    java.lang.Character var64 = new java.lang.Character('#');
    java.lang.Boolean var65 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var66 = new com.sqlmagic.tinysql.FieldTokenizer(var63, var64, var65);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var60, var64, var70);
    java.lang.String var72 = "";
    java.sql.ResultSet var73 = var28.getFunctionColumns(var32, var47, var60, var72);
    boolean var74 = var28.supportsANSI92FullSQL();
    java.sql.Connection var75 = var28.getConnection();
    java.lang.Object var76 = var2.remove((java.lang.Object)var28);
    boolean var77 = var28.supportsCatalogsInIndexDefinitions();
    boolean var78 = var28.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test221() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsPositionedUpdate();
    int var58 = var24.getDriverMajorVersion();
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = var62.getField((int)var64);
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    boolean var71 = var66.acceptsURL(var69);
    boolean var72 = com.sqlmagic.tinysql.Utils.clearFunction(var69);
    java.lang.String var73 = "";
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var73);
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles(var73, var75);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    boolean var80 = com.sqlmagic.tinysql.Utils.clearFunction(var78);
    java.lang.Double var81 = new java.lang.Double(100.0d);
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue(var78, (double)var81);
    double var83 = com.sqlmagic.tinysql.UtilString.doubleValue(var73, (double)var82);
    java.lang.String var84 = "";
    java.lang.String var85 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var84);
    java.sql.ResultSet var86 = var24.getAttributes(var65, var69, var73, var84);
    boolean var87 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "NULL"+ "'", var65.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test222() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    boolean var31 = var24.supportsLikeEscapeClause();
    boolean var32 = var24.supportsStoredFunctionsUsingCallSyntax();
    boolean var33 = var24.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test223() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = com.sqlmagic.tinysql.UtilString.toYMD(var4);
    boolean var7 = com.sqlmagic.tinysql.UtilString.isInteger(var6);
    boolean var8 = var3.acceptsURL(var6);
    int var9 = var3.getMinorVersion();
    java.lang.String var10 = "";
    java.lang.String var11 = "";
    java.lang.Character var12 = new java.lang.Character('#');
    java.lang.Boolean var13 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var14 = new com.sqlmagic.tinysql.FieldTokenizer(var11, var12, var13);
    java.lang.String var15 = var14.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var3.getConnection(var10, var15, (java.sql.Driver)var16);
    boolean var24 = var23.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var25 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    var25.setNextException((java.sql.SQLException)var26);
    java.lang.String var28 = var26.toString();
    java.lang.Object var29 = var2.put((java.lang.Object)var24, (java.lang.Object)var28);
    java.lang.String var30 = "hi!";
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var30);
    com.sqlmagic.tinysql.SimpleXMLTag var32 = new com.sqlmagic.tinysql.SimpleXMLTag(var30);
    var2.putAll((java.util.Map)var32);
    com.sqlmagic.tinysql.SimpleXMLTag var34 = var32.nextTag();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var28.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test224() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = com.sqlmagic.tinysql.UtilString.toYMD(var4);
    boolean var7 = com.sqlmagic.tinysql.UtilString.isInteger(var6);
    boolean var8 = var3.acceptsURL(var6);
    int var9 = var3.getMinorVersion();
    java.lang.String var10 = "";
    java.lang.String var11 = "";
    java.lang.Character var12 = new java.lang.Character('#');
    java.lang.Boolean var13 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var14 = new com.sqlmagic.tinysql.FieldTokenizer(var11, var12, var13);
    java.lang.String var15 = var14.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var3.getConnection(var10, var15, (java.sql.Driver)var16);
    boolean var24 = var23.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var25 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    var25.setNextException((java.sql.SQLException)var26);
    java.lang.String var28 = var26.toString();
    java.lang.Object var29 = var2.put((java.lang.Object)var24, (java.lang.Object)var28);
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.toYMD(var36);
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    com.sqlmagic.tinysql.Utils.delFile(var39, var41);
    java.lang.Integer var44 = new java.lang.Integer(1);
    int var45 = com.sqlmagic.tinysql.UtilString.intValue(var41, (int)var44);
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD(var47);
    boolean var50 = com.sqlmagic.tinysql.UtilString.isInteger(var49);
    boolean var51 = var46.acceptsURL(var49);
    boolean var52 = var46.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var53 = var30.getConnection(var36, var41, (java.sql.Driver)var46);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var53);
    int var55 = var54.getMaxColumnsInIndex();
    boolean var56 = var54.supportsSchemasInPrivilegeDefinitions();
    boolean var57 = var54.supportsANSI92FullSQL();
    boolean var58 = var54.supportsSubqueriesInIns();
    java.lang.String var59 = var54.getDatabaseProductVersion();
    boolean var60 = var2.contains((java.lang.Object)var54);
    boolean var61 = var54.supportsANSI92EntryLevelSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var28.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "2.26h"+ "'", var59.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test225() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.supportsGetGeneratedKeys();
    boolean var74 = var24.supportsExpressionsInOrderBy();
    boolean var75 = var24.supportsOrderByUnrelated();
    boolean var76 = var24.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test226() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    boolean var22 = var20.getAutoClose();
    var20.disableAutoClose();
    boolean var24 = var20.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test227() throws Throwable {

    java.lang.String var0 = "";
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    com.sqlmagic.tinysql.Utils.delFile(var10, var12);
    java.lang.Integer var15 = new java.lang.Integer(1);
    int var16 = com.sqlmagic.tinysql.UtilString.intValue(var12, (int)var15);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var1.getConnection(var7, var12, (java.sql.Driver)var17);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var25 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var24);
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    var24.setTransactionIsolation((int)var31);
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    com.sqlmagic.tinysql.Utils.delFile(var43, var45);
    java.lang.Integer var48 = new java.lang.Integer(1);
    int var49 = com.sqlmagic.tinysql.UtilString.intValue(var45, (int)var48);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.toYMD(var51);
    boolean var54 = com.sqlmagic.tinysql.UtilString.isInteger(var53);
    boolean var55 = var50.acceptsURL(var53);
    boolean var56 = var50.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var57 = var34.getConnection(var40, var45, (java.sql.Driver)var50);
    boolean var58 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var40);
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.forceToSize(var0, (int)var31, var40);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));

  }

  public void test228() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    int var46 = var24.getMaxFieldSize();
    boolean var47 = var24.getMoreResults();
    int var48 = var24.getQueryTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test229() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    int var30 = var27.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    int var37 = var31.getMinorVersion();
    java.lang.String var38 = "";
    java.lang.String var39 = "";
    java.lang.Character var40 = new java.lang.Character('#');
    java.lang.Boolean var41 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var42 = new com.sqlmagic.tinysql.FieldTokenizer(var39, var40, var41);
    java.lang.String var43 = var42.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    boolean var50 = var44.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var51 = var31.getConnection(var38, var43, (java.sql.Driver)var44);
    var51.close();
    var51.close();
    java.sql.DatabaseMetaData var54 = var51.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var55 = new com.sqlmagic.tinysql.tinySQLStatement(var51);
    java.lang.String var56 = "";
    java.lang.Character var57 = new java.lang.Character('#');
    java.lang.Boolean var58 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var59 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var57, var58);
    java.lang.String var60 = var59.nextField();
    java.lang.String[] var61 = var59.getFields();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    com.sqlmagic.tinysql.Utils.delFile(var62, var64);
    java.lang.Integer var67 = new java.lang.Integer(1);
    int var68 = com.sqlmagic.tinysql.UtilString.intValue(var64, (int)var67);
    java.lang.String var69 = "";
    java.lang.Character var70 = new java.lang.Character('#');
    java.lang.Boolean var71 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var72 = new com.sqlmagic.tinysql.FieldTokenizer(var69, var70, var71);
    java.lang.String[] var73 = var72.getFields();
    int var74 = var72.countFields();
    int var75 = var59.getInt((int)var68, (int)var74);
    var55.setMaxFieldSize((int)var74);
    java.lang.String var77 = "";
    java.lang.Character var78 = new java.lang.Character('#');
    java.lang.Boolean var79 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var80 = new com.sqlmagic.tinysql.FieldTokenizer(var77, var78, var79);
    java.lang.String[] var81 = var80.getFields();
    java.lang.String var82 = "";
    java.lang.Character var83 = new java.lang.Character('#');
    java.lang.Boolean var84 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var85 = new com.sqlmagic.tinysql.FieldTokenizer(var82, var83, var84);
    java.lang.String var86 = "hi!";
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType(var86);
    java.lang.String var88 = var85.getField((int)var87);
    java.lang.String var89 = var80.getField((int)var87);
    boolean var90 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var87);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var91 = var27.getMoreResults((int)var74, (int)var87);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test230() throws Throwable {

    com.sqlmagic.tinysql.UtilString var0 = new com.sqlmagic.tinysql.UtilString();

  }

  public void test231() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.lang.String var54 = "";
    java.lang.Character var55 = new java.lang.Character('#');
    java.lang.Boolean var56 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var57 = new com.sqlmagic.tinysql.FieldTokenizer(var54, var55, var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = var57.getField((int)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateNull((int)var59);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "NULL"+ "'", var60.equals("NULL"));

  }

  public void test232() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.allTablesAreSelectable();
    boolean var27 = var24.supportsLikeEscapeClause();
    boolean var28 = var24.storesLowerCaseIdentifiers();
    boolean var29 = var24.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test233() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var52.isPoolable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test234() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    boolean var72 = var24.supportsMixedCaseQuotedIdentifiers();
    boolean var73 = var24.supportsSavepoints();
    boolean var74 = var24.supportsExpressionsInOrderBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test235() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    java.lang.String var31 = var24.getNumericFunctions();
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    int var38 = var32.getMinorVersion();
    java.lang.String var39 = "";
    java.lang.String var40 = "";
    java.lang.Character var41 = new java.lang.Character('#');
    java.lang.Boolean var42 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var43 = new com.sqlmagic.tinysql.FieldTokenizer(var40, var41, var42);
    java.lang.String var44 = var43.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var32.getConnection(var39, var44, (java.sql.Driver)var45);
    int var53 = var32.getMajorVersion();
    boolean var54 = var24.supportsResultSetHoldability((int)var53);
    boolean var55 = var24.storesUpperCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test236() throws Throwable {

    java.lang.String var0 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction(var4);
    com.sqlmagic.tinysql.Utils.delFile(var0, var4);
    boolean var9 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test237() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    java.lang.String var31 = var24.getNumericFunctions();
    boolean var32 = var24.supportsOpenStatementsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test238() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    java.lang.String var27 = var24.getIdentifierQuoteString();
    boolean var28 = var24.supportsMultipleOpenResults();
    boolean var29 = var24.supportsCatalogsInTableDefinitions();
    java.sql.ResultSet var30 = var24.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\""+ "'", var27.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test239() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.lang.String var89 = var24.getURL();
    boolean var90 = var24.supportsPositionedUpdate();
    boolean var91 = var24.supportsUnionAll();
    boolean var92 = var24.locatorsUpdateCopy();
    int var93 = var24.getMaxBinaryLiteralLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test240() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    boolean var55 = var53.isFirst();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.insertRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test241() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "";
    java.lang.Character var56 = new java.lang.Character('#');
    java.lang.Boolean var57 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var58 = new com.sqlmagic.tinysql.FieldTokenizer(var55, var56, var57);
    java.lang.String[] var59 = var58.getFields();
    java.lang.String var60 = "";
    java.lang.Character var61 = new java.lang.Character('#');
    java.lang.Boolean var62 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var63 = new com.sqlmagic.tinysql.FieldTokenizer(var60, var61, var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = var63.getField((int)var65);
    java.lang.String var67 = var58.getField((int)var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Blob var69 = var53.getBlob((int)var65);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "NULL"+ "'", var66.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "NULL"+ "'", var67.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test242() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    java.util.Iterator var2 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test243() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    boolean var58 = var24.supportsMultipleResultSets();
    java.lang.String var59 = var24.getUserName();
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    boolean var65 = var60.acceptsURL(var63);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.toYMD(var66);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    com.sqlmagic.tinysql.Utils.delFile(var69, var71);
    java.lang.Integer var74 = new java.lang.Integer(1);
    int var75 = com.sqlmagic.tinysql.UtilString.intValue(var71, (int)var74);
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger(var79);
    boolean var81 = var76.acceptsURL(var79);
    boolean var82 = var76.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var83 = var60.getConnection(var66, var71, (java.sql.Driver)var76);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var84 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var83);
    boolean var85 = var84.supportsCatalogsInPrivilegeDefinitions();
    boolean var86 = var84.storesLowerCaseQuotedIdentifiers();
    java.lang.String var87 = var84.getIdentifierQuoteString();
    boolean var88 = com.sqlmagic.tinysql.Utils.renameFile(var59, var87);
    java.lang.String var89 = "hi!";
    boolean var90 = com.sqlmagic.tinysql.UtilString.isInteger(var89);
    com.sqlmagic.tinysql.SimpleXMLTag var91 = new com.sqlmagic.tinysql.SimpleXMLTag(var89);
    java.lang.String var92 = "hi!";
    boolean var93 = com.sqlmagic.tinysql.UtilString.isInteger(var92);
    com.sqlmagic.tinysql.SimpleXMLTag var94 = new com.sqlmagic.tinysql.SimpleXMLTag(var92);
    var91.putAll((java.util.Map)var94);
    boolean var96 = var91.hasMoreTags();
    com.sqlmagic.tinysql.tinySQLWhere var97 = new com.sqlmagic.tinysql.tinySQLWhere(var59, (java.util.Hashtable)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\""+ "'", var87.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test244() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    int var60 = var54.getMinorVersion();
    java.lang.String var61 = "";
    java.lang.String var62 = "";
    java.lang.Character var63 = new java.lang.Character('#');
    java.lang.Boolean var64 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var65 = new com.sqlmagic.tinysql.FieldTokenizer(var62, var63, var64);
    java.lang.String var66 = var65.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD(var68);
    boolean var71 = com.sqlmagic.tinysql.UtilString.isInteger(var70);
    boolean var72 = var67.acceptsURL(var70);
    boolean var73 = var67.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var74 = var54.getConnection(var61, var66, (java.sql.Driver)var67);
    var74.close();
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    boolean var78 = com.sqlmagic.tinysql.Utils.clearFunction(var76);
    var74.setCatalog(var76);
    var74.clearWarnings();
    var74.clearWarnings();
    java.lang.String var82 = var74.getCatalog();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var83 = var53.getBytes(var82);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));

  }

  public void test245() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    var23.disableAutoClose();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var25 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var23);
    boolean var26 = var25.supportsStatementPooling();
    java.lang.String var27 = var25.getSearchStringEscape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\\"+ "'", var27.equals("\\"));

  }

  public void test246() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var27 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    boolean var28 = var27.supportsConvert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test247() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    com.sqlmagic.tinysql.Utils.delFile(var64, var66);
    java.lang.Integer var69 = new java.lang.Integer(1);
    int var70 = com.sqlmagic.tinysql.UtilString.intValue(var66, (int)var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var55.getConnection(var61, var66, (java.sql.Driver)var71);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var79 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var78);
    int var80 = var79.getMaxColumnsInIndex();
    boolean var81 = var79.supportsSchemasInPrivilegeDefinitions();
    boolean var82 = var79.supportsANSI92FullSQL();
    boolean var83 = var79.supportsSubqueriesInIns();
    int var84 = var79.getMaxStatementLength();
    boolean var85 = var79.nullPlusNonNullIsNull();
    int var86 = var79.getDatabaseMinorVersion();
    boolean var87 = var79.usesLocalFiles();
    boolean var88 = var79.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var89 = var79.getDatabaseProductName();
    java.lang.Byte var90 = new java.lang.Byte((byte)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateByte(var89, (byte)var90);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "tinySQL"+ "'", var89.equals("tinySQL"));

  }

  public void test248() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    boolean var64 = var24.supportsDifferentTableCorrelationNames();
    java.sql.ResultSet var65 = var24.getTableTypes();
    java.sql.ResultSet var66 = var24.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test249() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsAlterTableWithDropColumn();
    int var64 = var24.getMaxBinaryLiteralLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var65 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test250() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = var2.nextTag();
    boolean var4 = var2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test251() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    boolean var78 = var24.storesMixedCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test252() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    boolean var8 = var5.isEmpty();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    boolean var13 = com.sqlmagic.tinysql.UtilString.isInteger(var12);
    boolean var14 = var9.acceptsURL(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    com.sqlmagic.tinysql.Utils.delFile(var18, var20);
    java.lang.Integer var23 = new java.lang.Integer(1);
    int var24 = com.sqlmagic.tinysql.UtilString.intValue(var20, (int)var23);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    boolean var31 = var25.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var32 = var9.getConnection(var15, var20, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var34 = var33.getMaxColumnsInIndex();
    boolean var35 = var33.supportsSchemasInPrivilegeDefinitions();
    boolean var36 = var33.supportsANSI92FullSQL();
    boolean var37 = var33.supportsSubqueriesInIns();
    int var38 = var33.getMaxStatementLength();
    boolean var39 = var33.nullPlusNonNullIsNull();
    int var40 = var33.getDatabaseMinorVersion();
    boolean var41 = var5.containsValue((java.lang.Object)var40);
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    boolean var46 = com.sqlmagic.tinysql.UtilString.isInteger(var45);
    boolean var47 = var42.acceptsURL(var45);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    com.sqlmagic.tinysql.Utils.delFile(var51, var53);
    java.lang.Integer var56 = new java.lang.Integer(1);
    int var57 = com.sqlmagic.tinysql.UtilString.intValue(var53, (int)var56);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    boolean var64 = var58.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var42.getConnection(var48, var53, (java.sql.Driver)var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    int var67 = var66.getMaxColumnsInIndex();
    boolean var68 = var66.supportsSchemasInPrivilegeDefinitions();
    boolean var69 = var66.supportsANSI92FullSQL();
    boolean var70 = var66.supportsSubqueriesInIns();
    int var71 = var66.getMaxStatementLength();
    boolean var72 = var5.containsValue((java.lang.Object)var66);
    boolean var73 = var66.supportsBatchUpdates();
    int var74 = var66.getDriverMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);

  }

  public void test253() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.sql.Connection var27 = var24.getConnection();
    boolean var28 = var24.supportsPositionedUpdate();
    java.lang.String var29 = var24.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "tinySQL"+ "'", var29.equals("tinySQL"));

  }

  public void test254() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.lang.String var54 = "";
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var54);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var52.addBatch(var57);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "COL00000"+ "'", var57.equals("COL00000"));

  }

  public void test255() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    boolean var8 = var5.isEmpty();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    boolean var13 = com.sqlmagic.tinysql.UtilString.isInteger(var12);
    boolean var14 = var9.acceptsURL(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    com.sqlmagic.tinysql.Utils.delFile(var18, var20);
    java.lang.Integer var23 = new java.lang.Integer(1);
    int var24 = com.sqlmagic.tinysql.UtilString.intValue(var20, (int)var23);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    boolean var31 = var25.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var32 = var9.getConnection(var15, var20, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var34 = var33.getMaxColumnsInIndex();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    com.sqlmagic.tinysql.Utils.delFile(var35, var37);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var37);
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD(var47);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    com.sqlmagic.tinysql.Utils.delFile(var50, var52);
    java.lang.Integer var55 = new java.lang.Integer(1);
    int var56 = com.sqlmagic.tinysql.UtilString.intValue(var52, (int)var55);
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = var57.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var41.getConnection(var47, var52, (java.sql.Driver)var57);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = com.sqlmagic.tinysql.UtilString.toYMD(var65);
    java.lang.String var68 = "";
    java.lang.Character var69 = new java.lang.Character('#');
    java.lang.Boolean var70 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var68, var69, var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var69, var75);
    java.lang.String var77 = "";
    java.sql.ResultSet var78 = var33.getFunctionColumns(var37, var52, var65, var77);
    java.lang.String var79 = "";
    java.lang.Character var80 = new java.lang.Character('#');
    java.lang.Boolean var81 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var82 = new com.sqlmagic.tinysql.FieldTokenizer(var79, var80, var81);
    java.lang.String var83 = "hi!";
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType(var83);
    java.lang.String var85 = var82.getField((int)var84);
    java.lang.Integer var86 = new java.lang.Integer((-1));
    java.lang.String var87 = "";
    java.lang.Character var88 = new java.lang.Character('#');
    java.lang.Boolean var89 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var90 = new com.sqlmagic.tinysql.FieldTokenizer(var87, var88, var89);
    java.lang.String[] var91 = var90.getFields();
    int var92 = var90.countFields();
    int var93 = var82.getInt((int)var86, (int)var92);
    boolean var94 = var33.insertsAreDetected((int)var86);
    boolean var95 = var33.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var96 = var33.supportsAlterTableWithDropColumn();
    java.lang.String var97 = var33.getSystemFunctions();
    boolean var98 = var5.containsValue((java.lang.Object)var33);
    boolean var99 = var33.isCatalogAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "NULL"+ "'", var85.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + ""+ "'", var97.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test256() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxColumnsInIndex();
    java.sql.RowIdLifetime var88 = var24.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);

  }

  public void test257() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    var24.cancel();
    java.lang.String var29 = var24.getSQLString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);

  }

  public void test258() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test259() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsNamedParameters();
    boolean var58 = var53.supportsColumnAliasing();
    int var59 = var53.getMaxConnections();
    boolean var60 = var28.isSigned((int)var59);
    java.lang.Integer var61 = new java.lang.Integer(0);
    boolean var62 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var61);
    boolean var63 = var28.isWritable((int)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test260() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsPositionedUpdate();
    java.sql.ResultSet var28 = var24.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test261() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    com.sqlmagic.tinysql.Utils.delFile(var64, var66);
    java.lang.Integer var69 = new java.lang.Integer(1);
    int var70 = com.sqlmagic.tinysql.UtilString.intValue(var66, (int)var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var55.getConnection(var61, var66, (java.sql.Driver)var71);
    int var79 = var55.getMinorVersion();
    java.lang.String var80 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var82 = "hi!";
    int var83 = com.sqlmagic.tinysql.UtilString.getValueType(var82);
    java.lang.String var84 = com.sqlmagic.tinysql.UtilString.toYMD(var82);
    boolean var85 = com.sqlmagic.tinysql.UtilString.isInteger(var84);
    boolean var86 = var81.acceptsURL(var84);
    boolean var87 = com.sqlmagic.tinysql.Utils.clearFunction(var84);
    com.sqlmagic.tinysql.Utils.delFile(var80, var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateString((int)var79, var80);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!"+ "'", var84.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test262() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    boolean var55 = var53.isFirst();
    java.lang.String var56 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    com.sqlmagic.tinysql.Utils.delFile(var66, var68);
    java.lang.Integer var71 = new java.lang.Integer(1);
    int var72 = com.sqlmagic.tinysql.UtilString.intValue(var68, (int)var71);
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.toYMD(var74);
    boolean var77 = com.sqlmagic.tinysql.UtilString.isInteger(var76);
    boolean var78 = var73.acceptsURL(var76);
    boolean var79 = var73.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var80 = var57.getConnection(var63, var68, (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var81 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var80);
    int var82 = var81.getMaxColumnsInIndex();
    boolean var83 = var81.supportsSchemasInPrivilegeDefinitions();
    boolean var84 = var81.supportsANSI92FullSQL();
    boolean var85 = var81.supportsNamedParameters();
    java.lang.String var86 = "hi!";
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType(var86);
    java.lang.String var88 = "hi!";
    int var89 = com.sqlmagic.tinysql.UtilString.getValueType(var88);
    com.sqlmagic.tinysql.Utils.delFile(var86, var88);
    java.lang.Integer var91 = new java.lang.Integer(1);
    int var92 = com.sqlmagic.tinysql.UtilString.intValue(var88, (int)var91);
    boolean var93 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var92);
    boolean var94 = var81.othersInsertsAreVisible((int)var92);
    java.lang.Byte var95 = new java.lang.Byte((byte)(-1));
    short var96 = com.sqlmagic.tinysql.Utils.fixByte((byte)var95);
    byte[] var97 = com.sqlmagic.tinysql.Utils.forceToSize(var56, (int)var92, (byte)var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var98 = var53.getLong(var56);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (short)255);

  }

  public void test263() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    boolean var89 = var24.doesMaxRowSizeIncludeBlobs();
    int var90 = var24.getMaxProcedureNameLength();
    int var91 = var24.getJDBCMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test264() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String[] var33 = var32.getFields();
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = "";
    boolean var37 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var36);
    java.lang.String var38 = var32.getField((int)var35, var36);
    com.sqlmagic.tinysql.Utils.delFile(var36);
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var36);
    java.lang.String var41 = "";
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.util.Vector var45 = com.sqlmagic.tinysql.Utils.getAllFiles(var41, var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var48);
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    java.lang.String var55 = com.sqlmagic.tinysql.UtilString.toYMD(var53);
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    boolean var57 = var52.acceptsURL(var55);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    com.sqlmagic.tinysql.Utils.delFile(var61, var63);
    java.lang.Integer var66 = new java.lang.Integer(1);
    int var67 = com.sqlmagic.tinysql.UtilString.intValue(var63, (int)var66);
    com.sqlmagic.tinysql.dbfFileDriver var68 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    boolean var72 = com.sqlmagic.tinysql.UtilString.isInteger(var71);
    boolean var73 = var68.acceptsURL(var71);
    boolean var74 = var68.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var75 = var52.getConnection(var58, var63, (java.sql.Driver)var68);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var76 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var75);
    int var77 = var76.getMaxColumnsInIndex();
    boolean var78 = var76.supportsSchemasInPrivilegeDefinitions();
    boolean var79 = var76.supportsANSI92FullSQL();
    boolean var80 = var76.supportsSubqueriesInIns();
    int var81 = var76.getMaxStatementLength();
    boolean var82 = var76.nullPlusNonNullIsNull();
    int var83 = var76.getDatabaseMinorVersion();
    boolean var84 = var76.usesLocalFiles();
    java.lang.String var85 = var76.getDriverName();
    java.util.Vector var86 = com.sqlmagic.tinysql.Utils.getAllFiles(var48, var85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var87 = var24.getImportedKeys(var40, var43, var85);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var85.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test265() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    var20.clearWarnings();
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    com.sqlmagic.tinysql.Utils.delFile(var37, var39);
    java.lang.Integer var42 = new java.lang.Integer(1);
    int var43 = com.sqlmagic.tinysql.UtilString.intValue(var39, (int)var42);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    boolean var50 = var44.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var51 = var28.getConnection(var34, var39, (java.sql.Driver)var44);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var52 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    int var53 = var52.getMaxColumnsInIndex();
    boolean var54 = var52.supportsSchemasInPrivilegeDefinitions();
    boolean var55 = var52.supportsANSI92FullSQL();
    boolean var56 = var52.supportsSubqueriesInIns();
    int var57 = var52.getMaxStatementLength();
    boolean var58 = var52.nullPlusNonNullIsNull();
    int var59 = var52.getDatabaseMinorVersion();
    boolean var60 = var52.usesLocalFiles();
    boolean var61 = var52.supportsCatalogsInPrivilegeDefinitions();
    boolean var62 = var52.isCatalogAtStart();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setReadOnly((boolean)var62);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test266() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    int var54 = var27.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test267() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    java.lang.String var55 = "";
    java.lang.Character var56 = new java.lang.Character('#');
    java.lang.Boolean var57 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var58 = new com.sqlmagic.tinysql.FieldTokenizer(var55, var56, var57);
    java.lang.String var59 = var58.nextField();
    java.lang.String[] var60 = var58.getFields();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    com.sqlmagic.tinysql.Utils.delFile(var61, var63);
    java.lang.Integer var66 = new java.lang.Integer(1);
    int var67 = com.sqlmagic.tinysql.UtilString.intValue(var63, (int)var66);
    java.lang.String var68 = "";
    java.lang.Character var69 = new java.lang.Character('#');
    java.lang.Boolean var70 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var68, var69, var70);
    java.lang.String[] var72 = var71.getFields();
    int var73 = var71.countFields();
    int var74 = var58.getInt((int)var67, (int)var73);
    java.lang.Byte var75 = new java.lang.Byte((byte)10);
    byte[] var76 = new byte[] { var75};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateBytes((int)var74, var76);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);

  }

  public void test268() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var77);
    int var79 = var78.getMaxColumnsInIndex();
    boolean var80 = var78.supportsSchemasInPrivilegeDefinitions();
    boolean var81 = var78.supportsANSI92FullSQL();
    boolean var82 = var78.supportsOpenStatementsAcrossRollback();
    boolean var83 = var78.supportsCorrelatedSubqueries();
    boolean var84 = var78.nullsAreSortedLow();
    java.lang.String var85 = var78.getURL();
    int var86 = var78.getMaxConnections();
    int var87 = var78.getDriverMinorVersion();
    int var88 = var78.getDriverMajorVersion();
    java.lang.Long var89 = new java.lang.Long(1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateLong((int)var88, (long)var89);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2);

  }

  public void test269() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    java.lang.String var72 = var24.getStringFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));

  }

  public void test270() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.nullPlusNonNullIsNull();
    int var28 = var24.getMaxProcedureNameLength();
    boolean var29 = var24.supportsDataManipulationTransactionsOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test271() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var71 = var24.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test272() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    boolean var71 = var24.getMoreResults();
    var24.cancel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test273() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    boolean var68 = var63.acceptsURL(var66);
    int var69 = var63.getMinorVersion();
    java.lang.String var70 = "";
    java.lang.String var71 = "";
    java.lang.Character var72 = new java.lang.Character('#');
    java.lang.Boolean var73 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var74 = new com.sqlmagic.tinysql.FieldTokenizer(var71, var72, var73);
    java.lang.String var75 = var74.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger(var79);
    boolean var81 = var76.acceptsURL(var79);
    boolean var82 = var76.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var83 = var63.getConnection(var70, var75, (java.sql.Driver)var76);
    var83.close();
    var83.close();
    java.sql.DatabaseMetaData var86 = var83.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var87 = new com.sqlmagic.tinysql.tinySQLStatement(var83);
    java.lang.Integer var88 = new java.lang.Integer((-1));
    var87.setQueryTimeout((int)var88);
    java.sql.ResultSet var90 = var87.getGeneratedKeys();
    var87.cancel();
    int var92 = var87.getFetchSize();
    java.lang.Float var93 = new java.lang.Float((-1.0f));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateFloat((int)var92, (float)var93);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 4096);

  }

  public void test274() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var20.setAutoCommit((boolean)var22);
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var24.getConnection(var30, var35, (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    com.sqlmagic.tinysql.Utils.delFile(var50, var52);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var52);
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    boolean var61 = var56.acceptsURL(var59);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    com.sqlmagic.tinysql.Utils.delFile(var65, var67);
    java.lang.Integer var70 = new java.lang.Integer(1);
    int var71 = com.sqlmagic.tinysql.UtilString.intValue(var67, (int)var70);
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    boolean var76 = com.sqlmagic.tinysql.UtilString.isInteger(var75);
    boolean var77 = var72.acceptsURL(var75);
    boolean var78 = var72.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var79 = var56.getConnection(var62, var67, (java.sql.Driver)var72);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    java.lang.String var83 = "";
    java.lang.Character var84 = new java.lang.Character('#');
    java.lang.Boolean var85 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var86 = new com.sqlmagic.tinysql.FieldTokenizer(var83, var84, var85);
    java.lang.String var87 = "hi!";
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType(var87);
    java.lang.String var89 = com.sqlmagic.tinysql.UtilString.toYMD(var87);
    boolean var90 = com.sqlmagic.tinysql.UtilString.isInteger(var89);
    com.sqlmagic.tinysql.FieldTokenizer var91 = new com.sqlmagic.tinysql.FieldTokenizer(var80, var84, var90);
    java.lang.String var92 = "";
    java.sql.ResultSet var93 = var48.getFunctionColumns(var52, var67, var80, var92);
    var20.setCatalog(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!"+ "'", var89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);

  }

  public void test275() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsPositionedUpdate();
    boolean var64 = var24.supportsCatalogsInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test276() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.storesUpperCaseQuotedIdentifiers();
    boolean var87 = var24.supportsNonNullableColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test277() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    com.sqlmagic.tinysql.Utils.delFile(var55, var57);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var57);
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    boolean var66 = var61.acceptsURL(var64);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    java.lang.String var70 = "hi!";
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    com.sqlmagic.tinysql.Utils.delFile(var70, var72);
    java.lang.Integer var75 = new java.lang.Integer(1);
    int var76 = com.sqlmagic.tinysql.UtilString.intValue(var72, (int)var75);
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    boolean var81 = com.sqlmagic.tinysql.UtilString.isInteger(var80);
    boolean var82 = var77.acceptsURL(var80);
    boolean var83 = var77.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var84 = var61.getConnection(var67, var72, (java.sql.Driver)var77);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var85 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var84);
    int var86 = var85.getMaxColumnsInIndex();
    boolean var87 = var85.supportsSchemasInPrivilegeDefinitions();
    boolean var88 = var85.supportsANSI92FullSQL();
    boolean var89 = var85.supportsSubqueriesInIns();
    int var90 = var85.getMaxStatementLength();
    boolean var91 = var85.nullPlusNonNullIsNull();
    int var92 = var85.getDatabaseMinorVersion();
    boolean var93 = var85.usesLocalFiles();
    java.lang.String var94 = var85.getDriverName();
    java.util.Vector var95 = com.sqlmagic.tinysql.Utils.getAllFiles(var57, var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Clob var96 = var53.getClob(var57);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var94.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);

  }

  public void test278() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.lang.String var54 = var53.getCursorName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));

  }

  public void test279() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Ref var59 = var53.getRef(var58);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "COL00000"+ "'", var58.equals("COL00000"));

  }

  public void test280() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    boolean var55 = var53.isFirst();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    com.sqlmagic.tinysql.Utils.delFile(var56, var58);
    java.lang.Integer var61 = new java.lang.Integer(1);
    int var62 = com.sqlmagic.tinysql.UtilString.intValue(var58, (int)var61);
    boolean var63 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var62);
    java.lang.String var64 = "";
    java.lang.Character var65 = new java.lang.Character('#');
    java.lang.Boolean var66 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var64, var65, var66);
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = var67.getField((int)var69);
    java.lang.Integer var71 = new java.lang.Integer((-1));
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String[] var76 = var75.getFields();
    int var77 = var75.countFields();
    int var78 = var67.getInt((int)var71, (int)var77);
    java.math.BigDecimal var79 = var53.getBigDecimal((int)var62, (int)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "NULL"+ "'", var70.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);

  }

  public void test281() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxColumnsInIndex();
    java.sql.ResultSet var88 = var24.getTableTypes();
    int var89 = var24.getMaxProcedureNameLength();
    boolean var90 = var24.supportsCatalogsInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test282() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.supportsGetGeneratedKeys();
    boolean var74 = var24.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test283() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsExpressionsInOrderBy();
    boolean var29 = var24.supportsAlterTableWithAddColumn();
    boolean var30 = var24.supportsCatalogsInProcedureCalls();
    boolean var31 = var24.supportsSchemasInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test284() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    java.lang.String var72 = var24.getSQLKeywords();
    java.lang.String var73 = var24.getDatabaseProductVersion();
    boolean var74 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var73);
    boolean var75 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "2.26h"+ "'", var73.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test285() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.doesMaxRowSizeIncludeBlobs();
    java.lang.String var31 = var24.getNumericFunctions();
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));

  }

  public void test286() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = var32.getField((int)var34);
    java.lang.Integer var36 = new java.lang.Integer((-1));
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String[] var41 = var40.getFields();
    int var42 = var40.countFields();
    int var43 = var32.getInt((int)var36, (int)var42);
    var27.setFetchSize((int)var36);
    int var45 = var27.getColumnCount();
    int var46 = var27.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    int var53 = var47.getMinorVersion();
    java.lang.String var54 = "";
    java.lang.String var55 = "";
    java.lang.Character var56 = new java.lang.Character('#');
    java.lang.Boolean var57 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var58 = new com.sqlmagic.tinysql.FieldTokenizer(var55, var56, var57);
    java.lang.String var59 = var58.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    boolean var65 = var60.acceptsURL(var63);
    boolean var66 = var60.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var67 = var47.getConnection(var54, var59, (java.sql.Driver)var60);
    var67.close();
    var67.close();
    java.sql.DatabaseMetaData var70 = var67.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var67);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String var76 = var75.nextField();
    java.lang.String[] var77 = var75.getFields();
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    com.sqlmagic.tinysql.Utils.delFile(var78, var80);
    java.lang.Integer var83 = new java.lang.Integer(1);
    int var84 = com.sqlmagic.tinysql.UtilString.intValue(var80, (int)var83);
    java.lang.String var85 = "";
    java.lang.Character var86 = new java.lang.Character('#');
    java.lang.Boolean var87 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var88 = new com.sqlmagic.tinysql.FieldTokenizer(var85, var86, var87);
    java.lang.String[] var89 = var88.getFields();
    int var90 = var88.countFields();
    int var91 = var75.getInt((int)var84, (int)var90);
    var71.setMaxFieldSize((int)var90);
    var27.setLevel((int)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NULL"+ "'", var35.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);

  }

  public void test287() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsSelectForUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test288() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    java.lang.Long var57 = new java.lang.Long(10L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateLong(var55, (long)var57);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test289() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsANSI92EntryLevelSQL();
    int var75 = var24.getMaxSchemaNameLength();
    boolean var76 = var24.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test290() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    java.lang.String var24 = "hi!";
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    com.sqlmagic.tinysql.SimpleXMLTag var26 = new com.sqlmagic.tinysql.SimpleXMLTag(var24);
    var26.clear();
    com.sqlmagic.tinysql.tinySQLWhere var28 = new com.sqlmagic.tinysql.tinySQLWhere(var11, (java.util.Hashtable)var26);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var28.clearValues(var31);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test291() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = com.sqlmagic.tinysql.UtilString.toYMD(var9);
    boolean var12 = com.sqlmagic.tinysql.UtilString.isInteger(var11);
    boolean var13 = var8.acceptsURL(var11);
    boolean var14 = com.sqlmagic.tinysql.Utils.clearFunction(var11);
    boolean var15 = var5.containsValue((java.lang.Object)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test292() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    com.sqlmagic.tinysql.Utils.delFile(var64, var66);
    java.lang.Integer var69 = new java.lang.Integer(1);
    int var70 = com.sqlmagic.tinysql.UtilString.intValue(var66, (int)var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var55.getConnection(var61, var66, (java.sql.Driver)var71);
    var78.disableAutoClose();
    var78.close();
    java.sql.Statement var81 = var78.createStatement();
    int var82 = var78.getTransactionIsolation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.setFetchSize((int)var82);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test293() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.sql.ResultSetMetaData var54 = var53.getMetaData();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var58 = var53.findColumn(var55);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test294() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    var23.disableAutoClose();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var25 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var23);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var26 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var27 = var23.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test295() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsDifferentTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test296() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = var3.getField((int)var5);
    java.lang.Integer var7 = new java.lang.Integer((-1));
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String[] var12 = var11.getFields();
    int var13 = var11.countFields();
    int var14 = var3.getInt((int)var7, (int)var13);
    com.sqlmagic.tinysql.tinySQLException var15 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    var15.setNextException((java.sql.SQLException)var16);
    int var18 = var15.getErrorCode();
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD(var20);
    boolean var23 = com.sqlmagic.tinysql.UtilString.isInteger(var22);
    boolean var24 = var19.acceptsURL(var22);
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    com.sqlmagic.tinysql.Utils.delFile(var28, var30);
    java.lang.Integer var33 = new java.lang.Integer(1);
    int var34 = com.sqlmagic.tinysql.UtilString.intValue(var30, (int)var33);
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.toYMD(var36);
    boolean var39 = com.sqlmagic.tinysql.UtilString.isInteger(var38);
    boolean var40 = var35.acceptsURL(var38);
    boolean var41 = var35.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var42 = var19.getConnection(var25, var30, (java.sql.Driver)var35);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var44 = var43.supportsCatalogsInPrivilegeDefinitions();
    boolean var45 = var43.storesLowerCaseQuotedIdentifiers();
    boolean var46 = var43.supportsPositionedUpdate();
    int var47 = var43.getResultSetHoldability();
    java.lang.String var48 = var43.getURL();
    int var49 = var43.getMaxColumnNameLength();
    int var50 = var3.getInt((int)var18, (int)var49);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    com.sqlmagic.tinysql.Utils.delFile(var51, var53);
    java.lang.Integer var56 = new java.lang.Integer(1);
    int var57 = com.sqlmagic.tinysql.UtilString.intValue(var53, (int)var56);
    boolean var58 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var57);
    java.lang.Integer var59 = new java.lang.Integer(10);
    int var60 = var3.getInt((int)var57, (int)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NULL"+ "'", var6.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);

  }

  public void test297() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var77);
    int var79 = var78.getMaxColumnsInIndex();
    boolean var80 = var78.supportsSchemasInPrivilegeDefinitions();
    boolean var81 = var78.supportsANSI92FullSQL();
    boolean var82 = var78.supportsOpenStatementsAcrossRollback();
    boolean var83 = var78.supportsCorrelatedSubqueries();
    boolean var84 = var78.nullsAreSortedLow();
    java.lang.String var85 = var78.getURL();
    int var86 = var78.getMaxConnections();
    int var87 = var78.getDriverMinorVersion();
    int var88 = var78.getDriverMajorVersion();
    java.sql.NClob var89 = var53.getNClob((int)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test298() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    var23.disableAutoClose();
    var23.close();
    java.sql.Statement var26 = var23.createStatement();
    int var27 = var23.getTransactionIsolation();
    var23.clearWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test299() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    int var30 = var24.getResultSetHoldability();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var31 = var24.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test300() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.sql.ResultSetMetaData var54 = var53.getMetaData();
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Clob var58 = var53.getClob(var56);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));

  }

  public void test301() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    boolean var2 = com.sqlmagic.tinysql.Utils.clearFunction(var0);
    java.lang.Double var3 = new java.lang.Double(100.0d);
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue(var0, (double)var3);
    com.sqlmagic.tinysql.dbfFile var5 = new com.sqlmagic.tinysql.dbfFile(var0);
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    boolean var10 = com.sqlmagic.tinysql.UtilString.isInteger(var9);
    boolean var11 = var6.acceptsURL(var9);
    int var12 = var6.getMinorVersion();
    java.lang.String var13 = "";
    java.lang.String var14 = "";
    java.lang.Character var15 = new java.lang.Character('#');
    java.lang.Boolean var16 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var17 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var15, var16);
    java.lang.String var18 = var17.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD(var20);
    boolean var23 = com.sqlmagic.tinysql.UtilString.isInteger(var22);
    boolean var24 = var19.acceptsURL(var22);
    boolean var25 = var19.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var26 = var6.getConnection(var13, var18, (java.sql.Driver)var19);
    var26.close();
    var26.close();
    java.sql.DatabaseMetaData var29 = var26.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var30 = new com.sqlmagic.tinysql.tinySQLStatement(var26);
    java.lang.Integer var31 = new java.lang.Integer((-1));
    var30.setQueryTimeout((int)var31);
    java.lang.String var33 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    boolean var40 = com.sqlmagic.tinysql.Utils.clearFunction(var37);
    com.sqlmagic.tinysql.Utils.delFile(var33, var37);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.removeQuotes(var33);
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var44 = "hi!";
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType(var44);
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD(var44);
    boolean var47 = com.sqlmagic.tinysql.UtilString.isInteger(var46);
    boolean var48 = var43.acceptsURL(var46);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    com.sqlmagic.tinysql.Utils.delFile(var52, var54);
    java.lang.Integer var57 = new java.lang.Integer(1);
    int var58 = com.sqlmagic.tinysql.UtilString.intValue(var54, (int)var57);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    boolean var63 = com.sqlmagic.tinysql.UtilString.isInteger(var62);
    boolean var64 = var59.acceptsURL(var62);
    boolean var65 = var59.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var66 = var43.getConnection(var49, var54, (java.sql.Driver)var59);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var67 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var66);
    int var68 = var67.getMaxColumnsInIndex();
    boolean var69 = var67.supportsSchemasInPrivilegeDefinitions();
    boolean var70 = var67.supportsANSI92FullSQL();
    boolean var71 = var67.supportsOpenStatementsAcrossRollback();
    boolean var72 = var67.supportsCorrelatedSubqueries();
    boolean var73 = var67.nullsAreSortedLow();
    java.lang.String var74 = var67.getURL();
    java.lang.String[] var75 = new java.lang.String[] { var74};
    int var76 = var30.executeUpdate(var42, var75);
    int var77 = var30.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var78 = var5.sqlexec(var30);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));

  }

  public void test302() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = var24.othersInsertsAreVisible((int)var35);
    boolean var38 = var24.supportsPositionedUpdate();
    boolean var39 = var24.supportsCatalogsInProcedureCalls();
    boolean var40 = var24.supportsExpressionsInOrderBy();
    boolean var41 = var24.supportsOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test303() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    com.sqlmagic.tinysql.Utils.delFile(var64, var66);
    java.lang.Integer var69 = new java.lang.Integer(1);
    int var70 = com.sqlmagic.tinysql.UtilString.intValue(var66, (int)var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var55.getConnection(var61, var66, (java.sql.Driver)var71);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var79 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var78);
    int var80 = var79.getMaxColumnsInIndex();
    boolean var81 = var79.supportsSchemasInPrivilegeDefinitions();
    boolean var82 = var79.supportsANSI92FullSQL();
    boolean var83 = var79.supportsNamedParameters();
    java.lang.String var84 = "hi!";
    int var85 = com.sqlmagic.tinysql.UtilString.getValueType(var84);
    java.lang.String var86 = "hi!";
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType(var86);
    com.sqlmagic.tinysql.Utils.delFile(var84, var86);
    java.lang.Integer var89 = new java.lang.Integer(1);
    int var90 = com.sqlmagic.tinysql.UtilString.intValue(var86, (int)var89);
    boolean var91 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var90);
    boolean var92 = var79.othersInsertsAreVisible((int)var90);
    boolean var93 = var79.supportsTableCorrelationNames();
    java.lang.String var94 = var79.getNumericFunctions();
    boolean var95 = var79.supportsGroupByBeyondSelect();
    int var96 = var79.getMaxCatalogNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateNull((int)var96);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + ""+ "'", var94.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test304() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    java.lang.String var64 = "";
    java.lang.Character var65 = new java.lang.Character('#');
    java.lang.Boolean var66 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var64, var65, var66);
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = var67.getField((int)var69);
    java.lang.String var71 = "hi!";
    boolean var72 = com.sqlmagic.tinysql.UtilString.isInteger(var71);
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var74 = var53.getObject((int)var69, (java.util.Map)var73);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "NULL"+ "'", var70.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test305() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    boolean var31 = var24.supportsLikeEscapeClause();
    boolean var32 = var24.supportsMultipleOpenResults();
    boolean var33 = var24.supportsTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test306() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsANSI92EntryLevelSQL();
    boolean var75 = var24.supportsCatalogsInTableDefinitions();
    boolean var76 = var24.storesUpperCaseIdentifiers();
    boolean var77 = var24.storesMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test307() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    var24.cancel();
    boolean var29 = var24.isClosed();
    boolean var30 = var24.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test308() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    int var30 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var31 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var56 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var55);
    int var57 = var56.getMaxColumnsInIndex();
    boolean var58 = var56.supportsSchemasInPrivilegeDefinitions();
    boolean var59 = var56.supportsANSI92FullSQL();
    boolean var60 = var56.supportsNamedParameters();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    com.sqlmagic.tinysql.Utils.delFile(var61, var63);
    java.lang.Integer var66 = new java.lang.Integer(1);
    int var67 = com.sqlmagic.tinysql.UtilString.intValue(var63, (int)var66);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var67);
    boolean var69 = var56.othersInsertsAreVisible((int)var67);
    boolean var70 = var56.supportsTableCorrelationNames();
    java.lang.String var71 = var56.getNumericFunctions();
    boolean var72 = var56.supportsGroupByBeyondSelect();
    int var73 = var56.getMaxCatalogNameLength();
    boolean var74 = var31.isSearchable((int)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var28.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test309() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    int var30 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var31 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var32 = "";
    java.lang.Character var33 = new java.lang.Character('#');
    java.lang.Boolean var34 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var32, var33, var34);
    java.lang.String[] var36 = var35.getFields();
    int var37 = var35.countFields();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var31.getCatalogName((int)var37);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var28.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);

  }

  public void test310() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    boolean var28 = var24.isPoolable();
    int var29 = var24.getQueryTimeout();
    java.lang.Integer var30 = new java.lang.Integer(0);
    boolean var31 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setFetchSize((int)var30);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test311() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    java.lang.String var21 = "";
    boolean var22 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var21);
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.toYMD(var24);
    boolean var27 = com.sqlmagic.tinysql.UtilString.isInteger(var26);
    boolean var28 = var23.acceptsURL(var26);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    com.sqlmagic.tinysql.Utils.delFile(var32, var34);
    java.lang.Integer var37 = new java.lang.Integer(1);
    int var38 = com.sqlmagic.tinysql.UtilString.intValue(var34, (int)var37);
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD(var40);
    boolean var43 = com.sqlmagic.tinysql.UtilString.isInteger(var42);
    boolean var44 = var39.acceptsURL(var42);
    boolean var45 = var39.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var46 = var23.getConnection(var29, var34, (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var47 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var46);
    int var48 = var47.getMaxColumnsInIndex();
    boolean var49 = var47.supportsSchemasInPrivilegeDefinitions();
    boolean var50 = var47.supportsANSI92FullSQL();
    boolean var51 = var47.supportsNamedParameters();
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    com.sqlmagic.tinysql.Utils.delFile(var52, var54);
    java.lang.Integer var57 = new java.lang.Integer(1);
    int var58 = com.sqlmagic.tinysql.UtilString.intValue(var54, (int)var57);
    boolean var59 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var58);
    boolean var60 = var47.othersInsertsAreVisible((int)var58);
    boolean var61 = var47.supportsPositionedUpdate();
    java.lang.String var62 = var47.getDriverName();
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    boolean var68 = var63.acceptsURL(var66);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    com.sqlmagic.tinysql.Utils.delFile(var72, var74);
    java.lang.Integer var77 = new java.lang.Integer(1);
    int var78 = com.sqlmagic.tinysql.UtilString.intValue(var74, (int)var77);
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    boolean var83 = com.sqlmagic.tinysql.UtilString.isInteger(var82);
    boolean var84 = var79.acceptsURL(var82);
    boolean var85 = var79.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var86 = var63.getConnection(var69, var74, (java.sql.Driver)var79);
    int var87 = var63.getMinorVersion();
    com.sqlmagic.tinysql.tinySQLConnection var88 = var13.getConnection(var21, var62, (java.sql.Driver)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var88.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var62.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 9);

  }

  public void test312() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    int var30 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var31 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var32 = "";
    java.lang.Character var33 = new java.lang.Character('#');
    java.lang.Boolean var34 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var32, var33, var34);
    java.lang.String var36 = var35.nextField();
    java.lang.String[] var37 = var35.getFields();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    java.lang.String var45 = "";
    java.lang.Character var46 = new java.lang.Character('#');
    java.lang.Boolean var47 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var45, var46, var47);
    java.lang.String[] var49 = var48.getFields();
    int var50 = var48.countFields();
    int var51 = var35.getInt((int)var44, (int)var50);
    java.lang.String var52 = var31.getSchemaName((int)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var28.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));

  }

  public void test313() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    int var71 = var24.getQueryTimeout();
    java.sql.SQLWarning var72 = var24.getWarnings();
    com.sqlmagic.tinysql.tinySQLException var73 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var74 = new com.sqlmagic.tinysql.tinySQLException();
    var73.setNextException((java.sql.SQLException)var74);
    java.lang.String var76 = var74.toString();
    java.lang.Integer var77 = new java.lang.Integer(100);
    java.lang.Integer var78 = new java.lang.Integer(10);
    java.lang.Integer var79 = new java.lang.Integer(100);
    int[] var80 = new int[] { var77, var78, var79};
    boolean var81 = var24.execute(var76, var80);
    var24.clearWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var76.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test314() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    int var25 = var24.getMaxFieldSize();
    boolean var26 = var24.isClosed();
    java.sql.ResultSet var27 = var24.getResultSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test315() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test316() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    int var71 = var24.getDatabaseMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test317() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    boolean var22 = var20.getAutoClose();
    var20.disableAutoClose();
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    int var30 = var24.getMinorVersion();
    java.lang.String var31 = "";
    java.lang.String var32 = "";
    java.lang.Character var33 = new java.lang.Character('#');
    java.lang.Boolean var34 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var32, var33, var34);
    java.lang.String var36 = var35.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    boolean var43 = var37.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var44 = var24.getConnection(var31, var36, (java.sql.Driver)var37);
    var44.close();
    var44.close();
    java.sql.DatabaseMetaData var47 = var44.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var48 = new com.sqlmagic.tinysql.tinySQLStatement(var44);
    java.lang.Integer var49 = new java.lang.Integer((-1));
    var48.setQueryTimeout((int)var49);
    java.sql.ResultSet var51 = var48.getGeneratedKeys();
    boolean var52 = var48.getMoreResults();
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    com.sqlmagic.tinysql.Utils.delFile(var62, var64);
    java.lang.Integer var67 = new java.lang.Integer(1);
    int var68 = com.sqlmagic.tinysql.UtilString.intValue(var64, (int)var67);
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var70 = "hi!";
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType(var70);
    java.lang.String var72 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    boolean var73 = com.sqlmagic.tinysql.UtilString.isInteger(var72);
    boolean var74 = var69.acceptsURL(var72);
    boolean var75 = var69.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var76 = var53.getConnection(var59, var64, (java.sql.Driver)var69);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var77 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var76);
    int var78 = var77.getMaxColumnsInIndex();
    boolean var79 = var77.supportsSchemasInPrivilegeDefinitions();
    boolean var80 = var77.supportsANSI92FullSQL();
    boolean var81 = var77.supportsSubqueriesInIns();
    java.lang.String var82 = var77.getDatabaseProductVersion();
    java.lang.Integer var83 = new java.lang.Integer(1);
    java.lang.Integer var84 = new java.lang.Integer(100);
    int[] var85 = new int[] { var83, var84};
    int var86 = var48.executeUpdate(var82, var85);
    java.lang.String var87 = "hi!";
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType(var87);
    java.lang.String var89 = "hi!";
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType(var89);
    com.sqlmagic.tinysql.Utils.delFile(var87, var89);
    java.lang.Integer var92 = new java.lang.Integer(1);
    int var93 = com.sqlmagic.tinysql.UtilString.intValue(var89, (int)var92);
    boolean var94 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var93);
    boolean var95 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var93);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var96 = var20.createStatement((int)var86, (int)var93);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "2.26h"+ "'", var82.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test318() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.supportsGetGeneratedKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var28 = var24.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test319() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    int var25 = var24.getMaxFieldSize();
    boolean var26 = var24.isClosed();
    int var27 = var24.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test320() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    java.sql.ResultSet var78 = var24.getClientInfoProperties();
    boolean var79 = var24.locatorsUpdateCopy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test321() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    com.sqlmagic.tinysql.tinySQLException var63 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var64 = new com.sqlmagic.tinysql.tinySQLException();
    var63.setNextException((java.sql.SQLException)var64);
    java.lang.String var66 = var64.toString();
    java.lang.String var67 = "hi!";
    boolean var68 = com.sqlmagic.tinysql.UtilString.isInteger(var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag(var67);
    java.lang.String var70 = "hi!";
    boolean var71 = com.sqlmagic.tinysql.UtilString.isInteger(var70);
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag(var70);
    var69.putAll((java.util.Map)var72);
    int var74 = var72.size();
    boolean var75 = var72.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var76 = new com.sqlmagic.tinysql.tinySQLWhere(var66, (java.util.Hashtable)var72);
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    java.lang.String var80 = "";
    java.lang.Character var81 = new java.lang.Character('#');
    java.lang.Boolean var82 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var83 = new com.sqlmagic.tinysql.FieldTokenizer(var80, var81, var82);
    java.lang.String var84 = "hi!";
    int var85 = com.sqlmagic.tinysql.UtilString.getValueType(var84);
    java.lang.String var86 = com.sqlmagic.tinysql.UtilString.toYMD(var84);
    boolean var87 = com.sqlmagic.tinysql.UtilString.isInteger(var86);
    com.sqlmagic.tinysql.FieldTokenizer var88 = new com.sqlmagic.tinysql.FieldTokenizer(var77, var81, var87);
    com.sqlmagic.tinysql.dbfFile var89 = new com.sqlmagic.tinysql.dbfFile(var77);
    com.sqlmagic.tinysql.tsResultSet var90 = new com.sqlmagic.tinysql.tsResultSet(var76, (com.sqlmagic.tinysql.tinySQL)var89);
    java.lang.String var91 = var90.toString();
    boolean var92 = var90.isGrouped();
    java.util.Vector var93 = var90.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var94 = com.sqlmagic.tinysql.UtilString.findTableForAlias(var56, var93);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var66.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var91.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test322() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.doesMaxRowSizeIncludeBlobs();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    boolean var38 = var24.supportsResultSetType((int)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test323() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getDatabaseProductVersion();
    boolean var30 = var24.doesMaxRowSizeIncludeBlobs();
    boolean var31 = var24.supportsSubqueriesInComparisons();
    int var32 = var24.getMaxColumnsInGroupBy();
    boolean var33 = var24.supportsNamedParameters();
    int var34 = var24.getMaxStatements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2.26h"+ "'", var29.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 10);

  }

  public void test324() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsAlterTableWithDropColumn();
    boolean var64 = var24.storesLowerCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test325() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsNamedParameters();
    boolean var58 = var53.supportsColumnAliasing();
    int var59 = var53.getMaxConnections();
    boolean var60 = var28.isSigned((int)var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    com.sqlmagic.tinysql.Utils.delFile(var61, var63);
    java.lang.Integer var66 = new java.lang.Integer(1);
    int var67 = com.sqlmagic.tinysql.UtilString.intValue(var63, (int)var66);
    boolean var68 = var28.isCurrency((int)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test326() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    boolean var55 = var53.rowInserted();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test327() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    int var71 = var24.getQueryTimeout();
    java.sql.ResultSet var72 = var24.getResultSet();
    int var73 = var24.getUpdateCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));

  }

  public void test328() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    int var25 = var24.getMaxFieldSize();
    boolean var26 = var24.isClosed();
    int var27 = var24.getMaxRows();
    var24.clearWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 65536);

  }

  public void test329() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.sql.Connection var27 = var24.getConnection();
    boolean var28 = var24.supportsPositionedUpdate();
    boolean var29 = var24.supportsMinimumSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test330() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var20.setAutoCommit((boolean)var22);
    var20.commit();
    java.lang.String var25 = "";
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var25);
    var20.setCatalog(var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction(var49);
    boolean var52 = var41.acceptsURL(var49);
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles(var26, var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);

  }

  public void test331() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    java.lang.String var88 = var24.getDatabaseProductName();
    int var89 = var24.getMaxColumnsInGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "tinySQL"+ "'", var88.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test332() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    boolean var73 = var24.storesMixedCaseQuotedIdentifiers();
    boolean var74 = var24.supportsANSI92EntryLevelSQL();
    int var75 = var24.getMaxSchemaNameLength();
    boolean var76 = var24.supportsOrderByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test333() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.lang.String var89 = var24.getURL();
    boolean var90 = var24.supportsPositionedUpdate();
    java.lang.String var91 = var24.getIdentifierQuoteString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "\""+ "'", var91.equals("\""));

  }

  public void test334() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getDatabaseMinorVersion();
    boolean var32 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var33 = var24.supportsMixedCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test335() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    boolean var72 = var24.storesMixedCaseIdentifiers();
    boolean var73 = var24.usesLocalFilePerTable();
    boolean var74 = var24.supportsGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test336() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    var53.close();
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    boolean var61 = var56.acceptsURL(var59);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    com.sqlmagic.tinysql.Utils.delFile(var65, var67);
    java.lang.Integer var70 = new java.lang.Integer(1);
    int var71 = com.sqlmagic.tinysql.UtilString.intValue(var67, (int)var70);
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    boolean var76 = com.sqlmagic.tinysql.UtilString.isInteger(var75);
    boolean var77 = var72.acceptsURL(var75);
    boolean var78 = var72.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var79 = var56.getConnection(var62, var67, (java.sql.Driver)var72);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var80 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var79);
    int var81 = var80.getMaxColumnsInIndex();
    java.lang.String var82 = var80.getNumericFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Ref var83 = var53.getRef(var82);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));

  }

  public void test337() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    boolean var8 = var5.isEmpty();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    boolean var13 = com.sqlmagic.tinysql.UtilString.isInteger(var12);
    boolean var14 = var9.acceptsURL(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    com.sqlmagic.tinysql.Utils.delFile(var18, var20);
    java.lang.Integer var23 = new java.lang.Integer(1);
    int var24 = com.sqlmagic.tinysql.UtilString.intValue(var20, (int)var23);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    boolean var31 = var25.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var32 = var9.getConnection(var15, var20, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var34 = var33.getMaxColumnsInIndex();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    com.sqlmagic.tinysql.Utils.delFile(var35, var37);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var37);
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD(var47);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    com.sqlmagic.tinysql.Utils.delFile(var50, var52);
    java.lang.Integer var55 = new java.lang.Integer(1);
    int var56 = com.sqlmagic.tinysql.UtilString.intValue(var52, (int)var55);
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = var57.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var41.getConnection(var47, var52, (java.sql.Driver)var57);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = com.sqlmagic.tinysql.UtilString.toYMD(var65);
    java.lang.String var68 = "";
    java.lang.Character var69 = new java.lang.Character('#');
    java.lang.Boolean var70 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var68, var69, var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var69, var75);
    java.lang.String var77 = "";
    java.sql.ResultSet var78 = var33.getFunctionColumns(var37, var52, var65, var77);
    java.lang.String var79 = "";
    java.lang.Character var80 = new java.lang.Character('#');
    java.lang.Boolean var81 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var82 = new com.sqlmagic.tinysql.FieldTokenizer(var79, var80, var81);
    java.lang.String var83 = "hi!";
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType(var83);
    java.lang.String var85 = var82.getField((int)var84);
    java.lang.Integer var86 = new java.lang.Integer((-1));
    java.lang.String var87 = "";
    java.lang.Character var88 = new java.lang.Character('#');
    java.lang.Boolean var89 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var90 = new com.sqlmagic.tinysql.FieldTokenizer(var87, var88, var89);
    java.lang.String[] var91 = var90.getFields();
    int var92 = var90.countFields();
    int var93 = var82.getInt((int)var86, (int)var92);
    boolean var94 = var33.insertsAreDetected((int)var86);
    boolean var95 = var33.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var96 = var33.supportsAlterTableWithDropColumn();
    java.lang.String var97 = var33.getSystemFunctions();
    boolean var98 = var5.containsValue((java.lang.Object)var33);
    java.util.Enumeration var99 = var5.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "NULL"+ "'", var85.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + ""+ "'", var97.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test338() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsNamedParameters();
    boolean var58 = var53.supportsColumnAliasing();
    int var59 = var53.getMaxConnections();
    boolean var60 = var28.isSigned((int)var59);
    int var61 = var28.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    boolean var67 = var62.acceptsURL(var65);
    int var68 = var62.getMinorVersion();
    java.lang.String var69 = "";
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = var73.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.toYMD(var76);
    boolean var79 = com.sqlmagic.tinysql.UtilString.isInteger(var78);
    boolean var80 = var75.acceptsURL(var78);
    boolean var81 = var75.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var82 = var62.getConnection(var69, var74, (java.sql.Driver)var75);
    int var83 = var62.getMinorVersion();
    boolean var84 = var28.isCurrency((int)var83);
    java.lang.String var85 = "hi!";
    boolean var86 = com.sqlmagic.tinysql.UtilString.isInteger(var85);
    com.sqlmagic.tinysql.SimpleXMLTag var87 = new com.sqlmagic.tinysql.SimpleXMLTag(var85);
    int var88 = var87.size();
    boolean var89 = var28.isWritable((int)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test339() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    boolean var26 = var24.supportsBatchUpdates();
    boolean var27 = var24.nullPlusNonNullIsNull();
    int var28 = var24.getMaxProcedureNameLength();
    boolean var29 = var24.supportsTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test340() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    boolean var87 = var24.supportsAlterTableWithDropColumn();
    boolean var88 = var24.supportsCatalogsInIndexDefinitions();
    java.lang.String var89 = var24.getURL();
    boolean var90 = var24.allProceduresAreCallable();
    boolean var91 = var24.supportsSchemasInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test341() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.Byte var55 = new java.lang.Byte((byte)(-1));
    java.lang.Byte var56 = new java.lang.Byte((byte)100);
    byte[] var57 = new byte[] { var55, var56};
    int var58 = com.sqlmagic.tinysql.Utils.vax_to_short(var57);
    com.sqlmagic.tinysql.tinySQLException var59 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var60 = new com.sqlmagic.tinysql.tinySQLException();
    var59.setNextException((java.sql.SQLException)var60);
    java.lang.String var62 = var60.toString();
    java.lang.String var63 = "hi!";
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    java.lang.String var66 = "hi!";
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag(var66);
    var65.putAll((java.util.Map)var68);
    int var70 = var68.size();
    boolean var71 = var68.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var72 = new com.sqlmagic.tinysql.tinySQLWhere(var62, (java.util.Hashtable)var68);
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    java.lang.String var76 = "";
    java.lang.Character var77 = new java.lang.Character('#');
    java.lang.Boolean var78 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var79 = new com.sqlmagic.tinysql.FieldTokenizer(var76, var77, var78);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    boolean var83 = com.sqlmagic.tinysql.UtilString.isInteger(var82);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var77, var83);
    com.sqlmagic.tinysql.dbfFile var85 = new com.sqlmagic.tinysql.dbfFile(var73);
    com.sqlmagic.tinysql.tsResultSet var86 = new com.sqlmagic.tinysql.tsResultSet(var72, (com.sqlmagic.tinysql.tinySQL)var85);
    java.lang.String var87 = var86.toString();
    boolean var88 = var86.isGrouped();
    int var89 = var86.getColumnCount();
    java.lang.Object var90 = var53.getObject((int)var58, (int)var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 25855);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var62.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var87.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);

  }

  public void test342() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = var24.getSQLKeywords();
    boolean var30 = var24.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test343() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.sql.ResultSetMetaData var54 = var53.getMetaData();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    boolean var61 = var55.jdbcCompliant();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    com.sqlmagic.tinysql.Utils.delFile(var62, var64);
    boolean var67 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var64);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.removeQuotes(var64);
    java.lang.String var69 = "";
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = "hi!";
    int var83 = com.sqlmagic.tinysql.UtilString.getValueType(var82);
    com.sqlmagic.tinysql.Utils.delFile(var80, var82);
    java.lang.Integer var85 = new java.lang.Integer(1);
    int var86 = com.sqlmagic.tinysql.UtilString.intValue(var82, (int)var85);
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var88 = "hi!";
    int var89 = com.sqlmagic.tinysql.UtilString.getValueType(var88);
    java.lang.String var90 = com.sqlmagic.tinysql.UtilString.toYMD(var88);
    boolean var91 = com.sqlmagic.tinysql.UtilString.isInteger(var90);
    boolean var92 = var87.acceptsURL(var90);
    boolean var93 = var87.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var94 = var71.getConnection(var77, var82, (java.sql.Driver)var87);
    java.lang.String var95 = "";
    java.lang.String var96 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var95);
    boolean var97 = var71.acceptsURL(var96);
    com.sqlmagic.tinysql.tinySQLConnection var98 = var55.getConnection(var64, var69, (java.sql.Driver)var71);
    java.sql.NClob var99 = var53.getNClob(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == null);

  }

  public void test344() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    int var61 = var55.getMinorVersion();
    java.lang.String var62 = "";
    java.lang.String var63 = "";
    java.lang.Character var64 = new java.lang.Character('#');
    java.lang.Boolean var65 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var66 = new com.sqlmagic.tinysql.FieldTokenizer(var63, var64, var65);
    java.lang.String var67 = var66.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var68 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    boolean var72 = com.sqlmagic.tinysql.UtilString.isInteger(var71);
    boolean var73 = var68.acceptsURL(var71);
    boolean var74 = var68.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var75 = var55.getConnection(var62, var67, (java.sql.Driver)var68);
    var75.close();
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    boolean var79 = com.sqlmagic.tinysql.Utils.clearFunction(var77);
    var75.setCatalog(var77);
    java.lang.String var81 = "";
    java.lang.Character var82 = new java.lang.Character('#');
    java.lang.Boolean var83 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var81, var82, var83);
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue(var81);
    com.sqlmagic.tinysql.Utils.delFile(var77, var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Clob var87 = var53.getClob(var81);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 4.9E-324d);

  }

  public void test345() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)1);
    java.lang.Byte var1 = new java.lang.Byte((byte)10);
    byte[] var2 = new byte[] { var0, var1};
    int var3 = com.sqlmagic.tinysql.Utils.vax_to_short(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2561);

  }

  public void test346() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.supportsOpenCursorsAcrossRollback();
    int var30 = var24.getMaxRowSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test347() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = var29.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    java.lang.String var55 = "";
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var55);
    boolean var57 = var31.acceptsURL(var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    com.sqlmagic.tinysql.Utils.delFile(var60);
    java.sql.ResultSet var62 = var24.getSuperTypes(var30, var56, var60);
    boolean var63 = var24.supportsMinimumSQLGrammar();
    boolean var64 = var24.supportsOpenCursorsAcrossRollback();
    boolean var65 = var24.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test348() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var46 = var24.executeBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);

  }

  public void test349() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    boolean var58 = var24.supportsMultipleResultSets();
    java.lang.String var59 = var24.getUserName();
    java.lang.String var60 = var24.getSearchStringEscape();
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "\\"+ "'", var60.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "\\"+ "'", var61.equals("\\"));

  }

  public void test350() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    boolean var73 = com.sqlmagic.tinysql.Utils.clearFunction(var71);
    java.lang.String var74 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.toYMD(var76);
    boolean var79 = com.sqlmagic.tinysql.UtilString.isInteger(var78);
    boolean var80 = var75.acceptsURL(var78);
    boolean var81 = com.sqlmagic.tinysql.Utils.clearFunction(var78);
    com.sqlmagic.tinysql.Utils.delFile(var74, var78);
    java.lang.String var83 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var74);
    java.lang.String[] var84 = new java.lang.String[] { var74};
    boolean var85 = var24.execute(var71, var84);
    java.sql.SQLWarning var86 = var24.getWarnings();
    boolean var87 = var24.isPoolable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test351() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.sql.SQLWarning var54 = var53.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);

  }

  public void test352() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    int var1 = var0.getMajorVersion();
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    java.lang.String var10 = com.sqlmagic.tinysql.UtilString.toYMD(var8);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    com.sqlmagic.tinysql.Utils.delFile(var11, var13);
    java.lang.Integer var16 = new java.lang.Integer(1);
    int var17 = com.sqlmagic.tinysql.UtilString.intValue(var13, (int)var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.toYMD(var19);
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger(var21);
    boolean var23 = var18.acceptsURL(var21);
    boolean var24 = var18.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var25 = var2.getConnection(var8, var13, (java.sql.Driver)var18);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var26 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var25);
    boolean var27 = var26.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var28 = "";
    java.lang.Character var29 = new java.lang.Character('#');
    java.lang.Boolean var30 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var31 = new com.sqlmagic.tinysql.FieldTokenizer(var28, var29, var30);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = var31.getField((int)var33);
    java.lang.Integer var35 = new java.lang.Integer((-1));
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String[] var40 = var39.getFields();
    int var41 = var39.countFields();
    int var42 = var31.getInt((int)var35, (int)var41);
    java.lang.String var43 = "";
    java.lang.Character var44 = new java.lang.Character('#');
    java.lang.Boolean var45 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var46 = new com.sqlmagic.tinysql.FieldTokenizer(var43, var44, var45);
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = var46.getField((int)var48);
    java.lang.Integer var50 = new java.lang.Integer((-1));
    java.lang.String var51 = "";
    java.lang.Character var52 = new java.lang.Character('#');
    java.lang.Boolean var53 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var54 = new com.sqlmagic.tinysql.FieldTokenizer(var51, var52, var53);
    java.lang.String[] var55 = var54.getFields();
    int var56 = var54.countFields();
    int var57 = var46.getInt((int)var50, (int)var56);
    boolean var58 = var26.supportsResultSetConcurrency((int)var42, (int)var50);
    boolean var59 = var26.supportsExpressionsInOrderBy();
    boolean var60 = var26.supportsMultipleResultSets();
    java.lang.String var61 = var26.getUserName();
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    boolean var67 = var62.acceptsURL(var65);
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD(var68);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    com.sqlmagic.tinysql.Utils.delFile(var71, var73);
    java.lang.Integer var76 = new java.lang.Integer(1);
    int var77 = com.sqlmagic.tinysql.UtilString.intValue(var73, (int)var76);
    com.sqlmagic.tinysql.dbfFileDriver var78 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var79 = "hi!";
    int var80 = com.sqlmagic.tinysql.UtilString.getValueType(var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var79);
    boolean var82 = com.sqlmagic.tinysql.UtilString.isInteger(var81);
    boolean var83 = var78.acceptsURL(var81);
    boolean var84 = var78.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var85 = var62.getConnection(var68, var73, (java.sql.Driver)var78);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var86 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var85);
    boolean var87 = var86.supportsCatalogsInPrivilegeDefinitions();
    boolean var88 = var86.storesLowerCaseQuotedIdentifiers();
    java.lang.String var89 = var86.getIdentifierQuoteString();
    boolean var90 = com.sqlmagic.tinysql.Utils.renameFile(var61, var89);
    boolean var91 = var0.acceptsURL(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "NULL"+ "'", var34.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "NULL"+ "'", var49.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "\""+ "'", var89.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test353() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    java.lang.String var78 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var79 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var57);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));

  }

  public void test354() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    int var64 = var53.getConcurrency();
    java.lang.String var65 = "";
    java.lang.Character var66 = new java.lang.Character('#');
    java.lang.Boolean var67 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var66, var67);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = var68.getField((int)var70);
    double var72 = var53.getDouble((int)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1007);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "NULL"+ "'", var71.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.0d);

  }

  public void test355() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    com.sqlmagic.tinysql.tinySQLException var2 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var3 = new com.sqlmagic.tinysql.tinySQLException();
    var2.setNextException((java.sql.SQLException)var3);
    var0.setNextException((java.sql.SQLException)var2);
    java.util.Iterator var6 = var2.iterator();
    com.sqlmagic.tinysql.tinySQLException var7 = new com.sqlmagic.tinysql.tinySQLException();
    var2.setNextException((java.sql.SQLException)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test356() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    var53.afterLast();
    com.sqlmagic.tinysql.tinySQLException var55 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var56 = new com.sqlmagic.tinysql.tinySQLException();
    var55.setNextException((java.sql.SQLException)var56);
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = "hi!";
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag(var59);
    java.lang.String var62 = "hi!";
    boolean var63 = com.sqlmagic.tinysql.UtilString.isInteger(var62);
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var62);
    var61.putAll((java.util.Map)var64);
    int var66 = var64.size();
    boolean var67 = var64.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var68 = new com.sqlmagic.tinysql.tinySQLWhere(var58, (java.util.Hashtable)var64);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.toYMD(var76);
    boolean var79 = com.sqlmagic.tinysql.UtilString.isInteger(var78);
    com.sqlmagic.tinysql.FieldTokenizer var80 = new com.sqlmagic.tinysql.FieldTokenizer(var69, var73, var79);
    com.sqlmagic.tinysql.dbfFile var81 = new com.sqlmagic.tinysql.dbfFile(var69);
    com.sqlmagic.tinysql.tsResultSet var82 = new com.sqlmagic.tinysql.tsResultSet(var68, (com.sqlmagic.tinysql.tinySQL)var81);
    java.lang.String var83 = var82.toString();
    java.lang.Integer var84 = new java.lang.Integer(0);
    boolean var85 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var84);
    var82.setType((int)var84);
    java.lang.String var87 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var89 = "hi!";
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType(var89);
    java.lang.String var91 = com.sqlmagic.tinysql.UtilString.toYMD(var89);
    boolean var92 = com.sqlmagic.tinysql.UtilString.isInteger(var91);
    boolean var93 = var88.acceptsURL(var91);
    boolean var94 = com.sqlmagic.tinysql.Utils.clearFunction(var91);
    com.sqlmagic.tinysql.Utils.delFile(var87, var91);
    java.lang.String var96 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var87);
    var53.updateNString((int)var84, var96);
    var53.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var58.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var83.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!"+ "'", var96.equals("hi!"));

  }

  public void test357() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String[] var77 = var76.getFields();
    int var78 = var76.countFields();
    boolean var79 = var24.updatesAreDetected((int)var78);
    java.sql.RowIdLifetime var80 = var24.getRowIdLifetime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var81 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test358() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD(var20);
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    com.sqlmagic.tinysql.Utils.delFile(var23, var25);
    java.lang.Integer var28 = new java.lang.Integer(1);
    int var29 = com.sqlmagic.tinysql.UtilString.intValue(var25, (int)var28);
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    boolean var36 = var30.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var37 = var14.getConnection(var20, var25, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var38 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var37);
    int var39 = var38.getMaxColumnsInIndex();
    boolean var40 = var38.supportsSchemasInPrivilegeDefinitions();
    boolean var41 = var38.supportsANSI92FullSQL();
    boolean var42 = var38.supportsNamedParameters();
    boolean var43 = var38.supportsColumnAliasing();
    int var44 = var38.getMaxConnections();
    java.lang.String var45 = var38.getDatabaseProductVersion();
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var47 = "hi!";
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType(var47);
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD(var47);
    boolean var50 = com.sqlmagic.tinysql.UtilString.isInteger(var49);
    boolean var51 = var46.acceptsURL(var49);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    java.lang.String var54 = com.sqlmagic.tinysql.UtilString.toYMD(var52);
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    com.sqlmagic.tinysql.Utils.delFile(var55, var57);
    java.lang.Integer var60 = new java.lang.Integer(1);
    int var61 = com.sqlmagic.tinysql.UtilString.intValue(var57, (int)var60);
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    boolean var67 = var62.acceptsURL(var65);
    boolean var68 = var62.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var69 = var46.getConnection(var52, var57, (java.sql.Driver)var62);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var70 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var69);
    int var71 = var70.getMaxColumnsInIndex();
    boolean var72 = var70.storesLowerCaseQuotedIdentifiers();
    boolean var73 = var70.supportsOpenCursorsAcrossCommit();
    boolean var74 = var70.supportsSubqueriesInIns();
    java.lang.String var75 = var70.getNumericFunctions();
    java.lang.String var76 = var70.getDriverVersion();
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile(var45, var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var78 = var13.getIndexCondition(var76);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "2.26h"+ "'", var45.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "2.26h"+ "'", var76.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test359() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsGroupByBeyondSelect();
    boolean var87 = var24.storesLowerCaseIdentifiers();
    boolean var88 = var24.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test360() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsOpenCursorsAcrossCommit();
    int var72 = var24.getJDBCMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test361() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = var3.getField((int)var5);
    java.lang.Integer var7 = new java.lang.Integer((-1));
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String[] var12 = var11.getFields();
    int var13 = var11.countFields();
    int var14 = var3.getInt((int)var7, (int)var13);
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    int var21 = var15.getMinorVersion();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    com.sqlmagic.tinysql.Utils.delFile(var22, var24);
    java.lang.Integer var27 = new java.lang.Integer(1);
    int var28 = com.sqlmagic.tinysql.UtilString.intValue(var24, (int)var27);
    int var29 = var3.getInt((int)var21, (int)var28);
    java.lang.Byte var30 = new java.lang.Byte((byte)1);
    java.lang.Byte var31 = new java.lang.Byte((byte)1);
    java.lang.Byte var32 = new java.lang.Byte((byte)(-1));
    byte[] var33 = new byte[] { var30, var31, var32};
    int var34 = com.sqlmagic.tinysql.Utils.vax_to_short(var33);
    java.lang.String var35 = var3.getField((int)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NULL"+ "'", var6.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NULL"+ "'", var35.equals("NULL"));

  }

  public void test362() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsExpressionsInOrderBy();
    boolean var58 = var24.supportsMultipleResultSets();
    java.lang.String var59 = var24.getExtraNameCharacters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));

  }

  public void test363() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = var3.nextField();
    java.lang.String[] var5 = var3.getFields();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    boolean var10 = com.sqlmagic.tinysql.UtilString.isInteger(var9);
    boolean var11 = var6.acceptsURL(var9);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    java.lang.String var14 = com.sqlmagic.tinysql.UtilString.toYMD(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    com.sqlmagic.tinysql.Utils.delFile(var15, var17);
    java.lang.Integer var20 = new java.lang.Integer(1);
    int var21 = com.sqlmagic.tinysql.UtilString.intValue(var17, (int)var20);
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    boolean var28 = var22.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var29 = var6.getConnection(var12, var17, (java.sql.Driver)var22);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var31 = var30.supportsCatalogsInPrivilegeDefinitions();
    boolean var32 = var30.supportsBatchUpdates();
    boolean var33 = var30.nullPlusNonNullIsNull();
    int var34 = var30.getMaxProcedureNameLength();
    java.lang.String var35 = var3.getField((int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test364() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = var24.getNumericFunctions();
    boolean var27 = var24.supportsConvert();
    boolean var28 = var24.supportsSchemasInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test365() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsPositionedUpdate();
    boolean var58 = var24.autoCommitFailureClosesAllResultSets();
    boolean var59 = var24.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test366() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    java.lang.String var57 = "";
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    com.sqlmagic.tinysql.Utils.delFile(var59, var61);
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var61);
    java.lang.Character var65 = new java.lang.Character('4');
    java.lang.Integer var66 = new java.lang.Integer(10);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var66);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var61, var65, var67);
    java.lang.String var69 = "hi!";
    boolean var70 = com.sqlmagic.tinysql.UtilString.isInteger(var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue(var72);
    java.sql.ResultSet var77 = var24.getFunctionColumns(var57, var61, var69, var72);
    boolean var78 = var24.allProceduresAreCallable();
    java.lang.String var79 = var24.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "tinySQL"+ "'", var79.equals("tinySQL"));

  }

  public void test367() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String[] var77 = var76.getFields();
    int var78 = var76.countFields();
    boolean var79 = var24.updatesAreDetected((int)var78);
    boolean var80 = var24.supportsOpenCursorsAcrossRollback();
    boolean var81 = var24.storesMixedCaseIdentifiers();
    boolean var82 = var24.storesUpperCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test368() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    int var57 = var24.getMaxSchemaNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test369() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    java.lang.String var64 = "";
    boolean var65 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var64);
    java.math.BigDecimal var66 = var53.getBigDecimal(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test370() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.lang.String var3 = "hi!";
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag(var3);
    var2.putAll((java.util.Map)var5);
    int var7 = var5.size();
    boolean var8 = var5.isEmpty();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    boolean var13 = com.sqlmagic.tinysql.UtilString.isInteger(var12);
    boolean var14 = var9.acceptsURL(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = "hi!";
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType(var20);
    com.sqlmagic.tinysql.Utils.delFile(var18, var20);
    java.lang.Integer var23 = new java.lang.Integer(1);
    int var24 = com.sqlmagic.tinysql.UtilString.intValue(var20, (int)var23);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    boolean var31 = var25.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var32 = var9.getConnection(var15, var20, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var34 = var33.getMaxColumnsInIndex();
    boolean var35 = var33.supportsSchemasInPrivilegeDefinitions();
    boolean var36 = var33.supportsANSI92FullSQL();
    boolean var37 = var33.supportsSubqueriesInIns();
    int var38 = var33.getMaxStatementLength();
    boolean var39 = var33.nullPlusNonNullIsNull();
    int var40 = var33.getDatabaseMinorVersion();
    boolean var41 = var5.containsValue((java.lang.Object)var40);
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    boolean var46 = com.sqlmagic.tinysql.UtilString.isInteger(var45);
    boolean var47 = var42.acceptsURL(var45);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    com.sqlmagic.tinysql.Utils.delFile(var51, var53);
    java.lang.Integer var56 = new java.lang.Integer(1);
    int var57 = com.sqlmagic.tinysql.UtilString.intValue(var53, (int)var56);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    boolean var64 = var58.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var42.getConnection(var48, var53, (java.sql.Driver)var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    int var67 = var66.getMaxColumnsInIndex();
    boolean var68 = var66.supportsSchemasInPrivilegeDefinitions();
    boolean var69 = var66.supportsANSI92FullSQL();
    boolean var70 = var66.supportsSubqueriesInIns();
    int var71 = var66.getMaxStatementLength();
    boolean var72 = var5.containsValue((java.lang.Object)var66);
    int var73 = var66.getMaxProcedureNameLength();
    byte[] var74 = com.sqlmagic.tinysql.Utils.intToLittleEndian((int)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test371() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsColumnAliasing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test372() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    int var25 = var20.getTransactionIsolation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test373() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    var53.afterLast();
    com.sqlmagic.tinysql.tinySQLException var55 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var56 = new com.sqlmagic.tinysql.tinySQLException();
    var55.setNextException((java.sql.SQLException)var56);
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = "hi!";
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag(var59);
    java.lang.String var62 = "hi!";
    boolean var63 = com.sqlmagic.tinysql.UtilString.isInteger(var62);
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var62);
    var61.putAll((java.util.Map)var64);
    int var66 = var64.size();
    boolean var67 = var64.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var68 = new com.sqlmagic.tinysql.tinySQLWhere(var58, (java.util.Hashtable)var64);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.toYMD(var76);
    boolean var79 = com.sqlmagic.tinysql.UtilString.isInteger(var78);
    com.sqlmagic.tinysql.FieldTokenizer var80 = new com.sqlmagic.tinysql.FieldTokenizer(var69, var73, var79);
    com.sqlmagic.tinysql.dbfFile var81 = new com.sqlmagic.tinysql.dbfFile(var69);
    com.sqlmagic.tinysql.tsResultSet var82 = new com.sqlmagic.tinysql.tsResultSet(var68, (com.sqlmagic.tinysql.tinySQL)var81);
    java.lang.String var83 = var82.toString();
    java.lang.Integer var84 = new java.lang.Integer(0);
    boolean var85 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var84);
    var82.setType((int)var84);
    java.lang.String var87 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var89 = "hi!";
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType(var89);
    java.lang.String var91 = com.sqlmagic.tinysql.UtilString.toYMD(var89);
    boolean var92 = com.sqlmagic.tinysql.UtilString.isInteger(var91);
    boolean var93 = var88.acceptsURL(var91);
    boolean var94 = com.sqlmagic.tinysql.Utils.clearFunction(var91);
    com.sqlmagic.tinysql.Utils.delFile(var87, var91);
    java.lang.String var96 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var87);
    var53.updateNString((int)var84, var96);
    java.sql.Statement var98 = var53.getStatement();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var58.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var83.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!"+ "'", var96.equals("hi!"));

  }

  public void test374() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    var53.afterLast();
    com.sqlmagic.tinysql.tinySQLException var55 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var56 = new com.sqlmagic.tinysql.tinySQLException();
    var55.setNextException((java.sql.SQLException)var56);
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = "hi!";
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag(var59);
    java.lang.String var62 = "hi!";
    boolean var63 = com.sqlmagic.tinysql.UtilString.isInteger(var62);
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var62);
    var61.putAll((java.util.Map)var64);
    int var66 = var64.size();
    boolean var67 = var64.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var68 = new com.sqlmagic.tinysql.tinySQLWhere(var58, (java.util.Hashtable)var64);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.toYMD(var76);
    boolean var79 = com.sqlmagic.tinysql.UtilString.isInteger(var78);
    com.sqlmagic.tinysql.FieldTokenizer var80 = new com.sqlmagic.tinysql.FieldTokenizer(var69, var73, var79);
    com.sqlmagic.tinysql.dbfFile var81 = new com.sqlmagic.tinysql.dbfFile(var69);
    com.sqlmagic.tinysql.tsResultSet var82 = new com.sqlmagic.tinysql.tsResultSet(var68, (com.sqlmagic.tinysql.tinySQL)var81);
    java.lang.String var83 = var82.toString();
    java.lang.Integer var84 = new java.lang.Integer(0);
    boolean var85 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var84);
    var82.setType((int)var84);
    java.lang.String var87 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var89 = "hi!";
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType(var89);
    java.lang.String var91 = com.sqlmagic.tinysql.UtilString.toYMD(var89);
    boolean var92 = com.sqlmagic.tinysql.UtilString.isInteger(var91);
    boolean var93 = var88.acceptsURL(var91);
    boolean var94 = com.sqlmagic.tinysql.Utils.clearFunction(var91);
    com.sqlmagic.tinysql.Utils.delFile(var87, var91);
    java.lang.String var96 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var87);
    var53.updateNString((int)var84, var96);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.insertRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var58.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var83.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!"+ "'", var96.equals("hi!"));

  }

  public void test375() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    int var70 = var24.getSQLStateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test376() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var77);
    int var79 = var78.getMaxColumnsInIndex();
    boolean var80 = var78.supportsSchemasInPrivilegeDefinitions();
    boolean var81 = var78.supportsANSI92FullSQL();
    boolean var82 = var78.supportsSubqueriesInIns();
    int var83 = var78.getMaxStatementLength();
    boolean var84 = var78.nullPlusNonNullIsNull();
    int var85 = var78.getDatabaseMinorVersion();
    boolean var86 = var78.usesLocalFiles();
    boolean var87 = var78.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var88 = var78.getDatabaseProductName();
    int var89 = var78.getMaxColumnsInTable();
    java.io.InputStream var90 = var53.getUnicodeStream((int)var89);
    java.sql.Statement var91 = var53.getStatement();
    int var92 = var53.getFetchSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "tinySQL"+ "'", var88.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test377() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    boolean var55 = var53.isFirst();
    java.lang.Byte var56 = new java.lang.Byte((byte)(-1));
    java.lang.Byte var57 = new java.lang.Byte((byte)100);
    byte[] var58 = new byte[] { var56, var57};
    int var59 = com.sqlmagic.tinysql.Utils.vax_to_short(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var60 = var53.getBoolean((int)var59);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 25855);

  }

  public void test378() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    int var30 = var24.getMaxCursorNameLength();
    java.lang.String var31 = var24.getDatabaseProductVersion();
    boolean var32 = var24.supportsOuterJoins();
    java.lang.String var33 = var24.getDatabaseProductName();
    boolean var34 = var24.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "2.26h"+ "'", var31.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "tinySQL"+ "'", var33.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test379() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    int var29 = var24.getMaxStatementLength();
    boolean var30 = var24.nullPlusNonNullIsNull();
    int var31 = var24.getMaxStatementLength();
    boolean var32 = var24.supportsAlterTableWithDropColumn();
    boolean var33 = var24.supportsUnionAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test380() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    boolean var64 = var53.last();
    java.lang.String var65 = "";
    java.lang.Character var66 = new java.lang.Character('#');
    java.lang.Boolean var67 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var66, var67);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = var68.getField((int)var70);
    java.lang.Integer var72 = new java.lang.Integer((-1));
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String[] var77 = var76.getFields();
    int var78 = var76.countFields();
    int var79 = var68.getInt((int)var72, (int)var78);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    boolean var82 = com.sqlmagic.tinysql.Utils.clearFunction(var80);
    java.lang.Double var83 = new java.lang.Double(100.0d);
    double var84 = com.sqlmagic.tinysql.UtilString.doubleValue(var80, (double)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateDouble((int)var78, (double)var84);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "NULL"+ "'", var71.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 100.0d);

  }

  public void test381() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    java.util.Set var3 = var2.entrySet();
    java.util.Collection var4 = var2.values();
    java.lang.Object var5 = var2.clone();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    boolean var10 = com.sqlmagic.tinysql.UtilString.isInteger(var9);
    boolean var11 = var6.acceptsURL(var9);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    java.lang.String var14 = com.sqlmagic.tinysql.UtilString.toYMD(var12);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    com.sqlmagic.tinysql.Utils.delFile(var15, var17);
    java.lang.Integer var20 = new java.lang.Integer(1);
    int var21 = com.sqlmagic.tinysql.UtilString.intValue(var17, (int)var20);
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    boolean var28 = var22.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var29 = var6.getConnection(var12, var17, (java.sql.Driver)var22);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    int var31 = var30.getMaxColumnsInIndex();
    boolean var32 = var30.supportsSchemasInPrivilegeDefinitions();
    java.lang.String var33 = var30.getExtraNameCharacters();
    int var34 = var30.getDatabaseMinorVersion();
    boolean var35 = var2.containsValue((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test382() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    boolean var71 = var24.supportsCatalogsInDataManipulation();
    boolean var72 = var24.supportsMixedCaseIdentifiers();
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String[] var77 = var76.getFields();
    int var78 = var76.countFields();
    boolean var79 = var24.updatesAreDetected((int)var78);
    java.sql.RowIdLifetime var80 = var24.getRowIdLifetime();
    java.lang.String var81 = "";
    java.lang.Character var82 = new java.lang.Character('#');
    java.lang.Boolean var83 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var81, var82, var83);
    java.lang.String var85 = "hi!";
    int var86 = com.sqlmagic.tinysql.UtilString.getValueType(var85);
    java.lang.String var87 = var84.getField((int)var86);
    boolean var88 = var24.othersDeletesAreVisible((int)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "NULL"+ "'", var87.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test383() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    int var71 = var24.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test384() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsUnionAll();
    int var31 = var24.getMaxTableNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 32);

  }

  public void test385() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    boolean var55 = var53.rowUpdated();
    java.lang.String var56 = "";
    java.lang.Character var57 = new java.lang.Character('#');
    java.lang.Boolean var58 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var59 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var57, var58);
    java.lang.String[] var60 = var59.getFields();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = "";
    boolean var64 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var63);
    java.lang.String var65 = var59.getField((int)var62, var63);
    com.sqlmagic.tinysql.Utils.delFile(var63);
    java.lang.String var67 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Array var68 = var53.getArray(var63);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));

  }

  public void test386() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.Byte var55 = new java.lang.Byte((byte)(-1));
    java.lang.Byte var56 = new java.lang.Byte((byte)100);
    byte[] var57 = new byte[] { var55, var56};
    int var58 = com.sqlmagic.tinysql.Utils.vax_to_short(var57);
    com.sqlmagic.tinysql.tinySQLException var59 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var60 = new com.sqlmagic.tinysql.tinySQLException();
    var59.setNextException((java.sql.SQLException)var60);
    java.lang.String var62 = var60.toString();
    java.lang.String var63 = "hi!";
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    java.lang.String var66 = "hi!";
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag(var66);
    var65.putAll((java.util.Map)var68);
    int var70 = var68.size();
    boolean var71 = var68.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var72 = new com.sqlmagic.tinysql.tinySQLWhere(var62, (java.util.Hashtable)var68);
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    java.lang.String var76 = "";
    java.lang.Character var77 = new java.lang.Character('#');
    java.lang.Boolean var78 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var79 = new com.sqlmagic.tinysql.FieldTokenizer(var76, var77, var78);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    boolean var83 = com.sqlmagic.tinysql.UtilString.isInteger(var82);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var77, var83);
    com.sqlmagic.tinysql.dbfFile var85 = new com.sqlmagic.tinysql.dbfFile(var73);
    com.sqlmagic.tinysql.tsResultSet var86 = new com.sqlmagic.tinysql.tsResultSet(var72, (com.sqlmagic.tinysql.tinySQL)var85);
    java.lang.String var87 = var86.toString();
    boolean var88 = var86.isGrouped();
    int var89 = var86.getColumnCount();
    java.lang.Object var90 = var53.getObject((int)var58, (int)var89);
    java.lang.String var91 = "hi!";
    boolean var92 = com.sqlmagic.tinysql.UtilString.isInteger(var91);
    com.sqlmagic.tinysql.SimpleXMLTag var93 = new com.sqlmagic.tinysql.SimpleXMLTag(var91);
    com.sqlmagic.tinysql.SimpleXMLTag var94 = var93.nextTag();
    java.lang.Integer var95 = new java.lang.Integer(0);
    boolean var96 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var95);
    java.lang.Object var97 = var93.get((java.lang.Object)var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateNull((int)var95);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 25855);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var62.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var87.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);

  }

  public void test387() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxColumnsInIndex();
    boolean var88 = var24.supportsANSI92FullSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test388() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.isLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.moveToCurrentRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test389() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    boolean var86 = var24.supportsDataDefinitionAndDataManipulationTransactions();
    int var87 = var24.getMaxCursorNameLength();
    int var88 = var24.getMaxColumnsInIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var89 = var24.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test390() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    boolean var30 = var24.isCatalogAtStart();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var33);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.removeQuotes(var33);
    java.lang.String var38 = "";
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    com.sqlmagic.tinysql.Utils.delFile(var39, var41);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    int var50 = var44.getMinorVersion();
    java.lang.String var51 = "";
    java.lang.String var52 = "";
    java.lang.Character var53 = new java.lang.Character('#');
    java.lang.Boolean var54 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var55 = new com.sqlmagic.tinysql.FieldTokenizer(var52, var53, var54);
    java.lang.String var56 = var55.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = var57.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var44.getConnection(var51, var56, (java.sql.Driver)var57);
    var64.close();
    var64.close();
    java.sql.DatabaseMetaData var67 = var64.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var68 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var69 = var68.getMaxFieldSize();
    java.lang.String var70 = "";
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.util.Vector var74 = com.sqlmagic.tinysql.Utils.getAllFiles(var70, var72);
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction(var75);
    java.lang.Double var78 = new java.lang.Double(100.0d);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue(var75, (double)var78);
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue(var70, (double)var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    int[] var82 = new int[] { };
    boolean var83 = var68.execute(var70, var82);
    java.lang.String[] var84 = new java.lang.String[] { var70};
    java.sql.ResultSet var85 = var24.getTables(var33, var38, var39, var84);
    com.sqlmagic.tinysql.Utils.delFile(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);

  }

  public void test391() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92IntermediateSQL();
    boolean var71 = var24.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test392() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    int var71 = var24.getMaxSchemaNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test393() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    boolean var30 = var24.isCatalogAtStart();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var33);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.removeQuotes(var33);
    java.lang.String var38 = "";
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    com.sqlmagic.tinysql.Utils.delFile(var39, var41);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    int var50 = var44.getMinorVersion();
    java.lang.String var51 = "";
    java.lang.String var52 = "";
    java.lang.Character var53 = new java.lang.Character('#');
    java.lang.Boolean var54 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var55 = new com.sqlmagic.tinysql.FieldTokenizer(var52, var53, var54);
    java.lang.String var56 = var55.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = var57.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var44.getConnection(var51, var56, (java.sql.Driver)var57);
    var64.close();
    var64.close();
    java.sql.DatabaseMetaData var67 = var64.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var68 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var69 = var68.getMaxFieldSize();
    java.lang.String var70 = "";
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.util.Vector var74 = com.sqlmagic.tinysql.Utils.getAllFiles(var70, var72);
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction(var75);
    java.lang.Double var78 = new java.lang.Double(100.0d);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue(var75, (double)var78);
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue(var70, (double)var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    int[] var82 = new int[] { };
    boolean var83 = var68.execute(var70, var82);
    java.lang.String[] var84 = new java.lang.String[] { var70};
    java.sql.ResultSet var85 = var24.getTables(var33, var38, var39, var84);
    int var86 = var24.getDatabaseMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);

  }

  public void test394() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    int var64 = var53.getConcurrency();
    boolean var65 = var53.rowUpdated();
    boolean var66 = var53.previous();
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var68 = "hi!";
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType(var68);
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD(var68);
    boolean var71 = com.sqlmagic.tinysql.UtilString.isInteger(var70);
    boolean var72 = var67.acceptsURL(var70);
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    java.lang.String var76 = "hi!";
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType(var76);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    com.sqlmagic.tinysql.Utils.delFile(var76, var78);
    java.lang.Integer var81 = new java.lang.Integer(1);
    int var82 = com.sqlmagic.tinysql.UtilString.intValue(var78, (int)var81);
    com.sqlmagic.tinysql.dbfFileDriver var83 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var84 = "hi!";
    int var85 = com.sqlmagic.tinysql.UtilString.getValueType(var84);
    java.lang.String var86 = com.sqlmagic.tinysql.UtilString.toYMD(var84);
    boolean var87 = com.sqlmagic.tinysql.UtilString.isInteger(var86);
    boolean var88 = var83.acceptsURL(var86);
    boolean var89 = var83.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var90 = var67.getConnection(var73, var78, (java.sql.Driver)var83);
    boolean var91 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      short var92 = var53.getShort(var73);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1007);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test395() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    int var54 = var53.getMaxColumnsInIndex();
    boolean var55 = var53.supportsSchemasInPrivilegeDefinitions();
    boolean var56 = var53.supportsANSI92FullSQL();
    boolean var57 = var53.supportsNamedParameters();
    boolean var58 = var53.supportsColumnAliasing();
    int var59 = var53.getMaxConnections();
    boolean var60 = var28.isSigned((int)var59);
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    boolean var66 = var61.acceptsURL(var64);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = com.sqlmagic.tinysql.UtilString.toYMD(var67);
    java.lang.String var70 = "hi!";
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    com.sqlmagic.tinysql.Utils.delFile(var70, var72);
    java.lang.Integer var75 = new java.lang.Integer(1);
    int var76 = com.sqlmagic.tinysql.UtilString.intValue(var72, (int)var75);
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    boolean var81 = com.sqlmagic.tinysql.UtilString.isInteger(var80);
    boolean var82 = var77.acceptsURL(var80);
    boolean var83 = var77.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var84 = var61.getConnection(var67, var72, (java.sql.Driver)var77);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var85 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var84);
    int var86 = var85.getMaxColumnsInIndex();
    boolean var87 = var28.isSearchable((int)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test396() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.supportsDataManipulationTransactionsOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test397() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    int var25 = var24.getMaxFieldSize();
    java.lang.String var26 = "";
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles(var26, var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    boolean var33 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    java.lang.Double var34 = new java.lang.Double(100.0d);
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue(var31, (double)var34);
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue(var26, (double)var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    int[] var38 = new int[] { };
    boolean var39 = var24.execute(var26, var38);
    boolean var40 = com.sqlmagic.tinysql.Utils.isFunctionName(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test398() throws Throwable {

    java.lang.Byte var0 = new java.lang.Byte((byte)100);
    java.lang.Byte var1 = new java.lang.Byte((byte)10);
    java.lang.Byte var2 = new java.lang.Byte((byte)10);
    byte[] var3 = new byte[] { var0, var1, var2};
    int var4 = com.sqlmagic.tinysql.Utils.vax_to_short(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2660);

  }

  public void test399() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString(var60);
    java.lang.String var64 = var56.nativeSQL(var60);
    var56.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));

  }

  public void test400() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "";
    java.lang.Character var56 = new java.lang.Character('#');
    java.lang.Boolean var57 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var58 = new com.sqlmagic.tinysql.FieldTokenizer(var55, var56, var57);
    java.lang.String[] var59 = var58.getFields();
    java.lang.String var60 = "";
    java.lang.Character var61 = new java.lang.Character('#');
    java.lang.Boolean var62 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var63 = new com.sqlmagic.tinysql.FieldTokenizer(var60, var61, var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = var63.getField((int)var65);
    java.lang.String var67 = var58.getField((int)var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var65);
    java.net.URL var69 = var53.getURL((int)var65);
    boolean var70 = var53.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "NULL"+ "'", var66.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "NULL"+ "'", var67.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test401() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = com.sqlmagic.tinysql.UtilString.toYMD(var65);
    boolean var68 = com.sqlmagic.tinysql.UtilString.isInteger(var67);
    boolean var69 = var64.acceptsURL(var67);
    int var70 = var64.getMinorVersion();
    java.lang.String var71 = "";
    java.lang.String var72 = "";
    java.lang.Character var73 = new java.lang.Character('#');
    java.lang.Boolean var74 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var75 = new com.sqlmagic.tinysql.FieldTokenizer(var72, var73, var74);
    java.lang.String var76 = var75.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    boolean var81 = com.sqlmagic.tinysql.UtilString.isInteger(var80);
    boolean var82 = var77.acceptsURL(var80);
    boolean var83 = var77.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var84 = var64.getConnection(var71, var76, (java.sql.Driver)var77);
    var84.close();
    var84.close();
    java.sql.DatabaseMetaData var87 = var84.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var88 = new com.sqlmagic.tinysql.tinySQLStatement(var84);
    int var89 = var88.getMaxFieldSize();
    java.sql.NClob var90 = var53.getNClob((int)var89);
    java.sql.ResultSetMetaData var91 = var53.getMetaData();
    java.sql.ResultSetMetaData var92 = var53.getMetaData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);

  }

  public void test402() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var77);
    int var79 = var78.getMaxColumnsInIndex();
    boolean var80 = var78.supportsSchemasInPrivilegeDefinitions();
    boolean var81 = var78.supportsANSI92FullSQL();
    boolean var82 = var78.supportsSubqueriesInIns();
    int var83 = var78.getMaxStatementLength();
    boolean var84 = var78.nullPlusNonNullIsNull();
    int var85 = var78.getDatabaseMinorVersion();
    boolean var86 = var78.usesLocalFiles();
    boolean var87 = var78.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var88 = var78.getDatabaseProductName();
    int var89 = var78.getMaxColumnsInTable();
    java.io.InputStream var90 = var53.getUnicodeStream((int)var89);
    boolean var91 = var53.wasNull();
    boolean var92 = var53.isFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "tinySQL"+ "'", var88.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test403() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    java.lang.String var70 = "";
    java.lang.Character var71 = new java.lang.Character('#');
    java.lang.Boolean var72 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var73 = new com.sqlmagic.tinysql.FieldTokenizer(var70, var71, var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    java.lang.String var76 = var73.getField((int)var75);
    java.lang.Integer var77 = new java.lang.Integer((-1));
    java.lang.String var78 = "";
    java.lang.Character var79 = new java.lang.Character('#');
    java.lang.Boolean var80 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var81 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var79, var80);
    java.lang.String[] var82 = var81.getFields();
    int var83 = var81.countFields();
    int var84 = var73.getInt((int)var77, (int)var83);
    boolean var85 = var24.insertsAreDetected((int)var77);
    int var86 = var24.getMaxCatalogNameLength();
    java.sql.RowIdLifetime var87 = var24.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NULL"+ "'", var76.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test404() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = var28.nextField();
    java.lang.String[] var30 = var28.getFields();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String[] var42 = var41.getFields();
    int var43 = var41.countFields();
    int var44 = var28.getInt((int)var37, (int)var43);
    var24.setMaxFieldSize((int)var43);
    java.sql.SQLWarning var46 = var24.getWarnings();
    int var47 = var24.getMaxFieldSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);

  }

  public void test405() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    com.sqlmagic.tinysql.Utils.delFile(var38, var40);
    java.lang.Integer var43 = new java.lang.Integer(1);
    int var44 = com.sqlmagic.tinysql.UtilString.intValue(var40, (int)var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    boolean var51 = var45.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var52 = var29.getConnection(var35, var40, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    java.lang.String var54 = "";
    java.lang.Character var55 = new java.lang.Character('#');
    java.lang.Boolean var56 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var57 = new com.sqlmagic.tinysql.FieldTokenizer(var54, var55, var56);
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = var57.getField((int)var59);
    var52.setTransactionIsolation((int)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var62 = var28.getCatalogName((int)var59);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "NULL"+ "'", var60.equals("NULL"));

  }

  public void test406() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsTableCorrelationNames();
    boolean var30 = var24.supportsColumnAliasing();
    boolean var31 = var24.supportsLikeEscapeClause();
    boolean var32 = var24.supportsStoredFunctionsUsingCallSyntax();
    boolean var33 = var24.supportsUnionAll();
    boolean var34 = var24.storesUpperCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test407() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    com.sqlmagic.tinysql.Utils.delFile(var64, var66);
    java.lang.Integer var69 = new java.lang.Integer(1);
    int var70 = com.sqlmagic.tinysql.UtilString.intValue(var66, (int)var69);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = com.sqlmagic.tinysql.UtilString.toYMD(var72);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var74);
    boolean var76 = var71.acceptsURL(var74);
    boolean var77 = var71.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var78 = var55.getConnection(var61, var66, (java.sql.Driver)var71);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var79 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var78);
    int var80 = var79.getMaxColumnsInIndex();
    boolean var81 = var79.supportsSchemasInPrivilegeDefinitions();
    boolean var82 = var79.supportsANSI92FullSQL();
    boolean var83 = var79.supportsNamedParameters();
    java.lang.String var84 = "hi!";
    int var85 = com.sqlmagic.tinysql.UtilString.getValueType(var84);
    java.lang.String var86 = "hi!";
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType(var86);
    com.sqlmagic.tinysql.Utils.delFile(var84, var86);
    java.lang.Integer var89 = new java.lang.Integer(1);
    int var90 = com.sqlmagic.tinysql.UtilString.intValue(var86, (int)var89);
    boolean var91 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var90);
    boolean var92 = var79.othersInsertsAreVisible((int)var90);
    boolean var93 = var79.supportsPositionedUpdate();
    java.lang.String var94 = var79.getDriverName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var95 = var53.getString(var94);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var94.equals("com.sqlmagic.tinysql.dbfFileDriver"));

  }

  public void test408() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    var20.disableAutoClose();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test409() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    var20.clearWarnings();
    boolean var28 = var20.getAutoClose();
    boolean var29 = var20.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test410() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var0);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.toYMD(var10);
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    com.sqlmagic.tinysql.Utils.delFile(var13, var15);
    java.lang.Integer var18 = new java.lang.Integer(1);
    int var19 = com.sqlmagic.tinysql.UtilString.intValue(var15, (int)var18);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    boolean var25 = var20.acceptsURL(var23);
    boolean var26 = var20.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var27 = var4.getConnection(var10, var15, (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var28.supportsSchemasInPrivilegeDefinitions();
    boolean var31 = var28.supportsANSI92FullSQL();
    boolean var32 = var28.supportsSubqueriesInIns();
    int var33 = var28.getMaxStatementLength();
    boolean var34 = var28.nullPlusNonNullIsNull();
    int var35 = var28.getDatabaseMinorVersion();
    int var36 = com.sqlmagic.tinysql.UtilString.intValue(var3, (int)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "COL00000"+ "'", var3.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test411() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var29 = var27.getColumnCount();
    java.util.Hashtable var30 = var27.getTableState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);

  }

  public void test412() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var20.setAutoCommit((boolean)var22);
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var24.getConnection(var30, var35, (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = "hi!";
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType(var52);
    com.sqlmagic.tinysql.Utils.delFile(var50, var52);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var52);
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    boolean var61 = var56.acceptsURL(var59);
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    com.sqlmagic.tinysql.Utils.delFile(var65, var67);
    java.lang.Integer var70 = new java.lang.Integer(1);
    int var71 = com.sqlmagic.tinysql.UtilString.intValue(var67, (int)var70);
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var73 = "hi!";
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType(var73);
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD(var73);
    boolean var76 = com.sqlmagic.tinysql.UtilString.isInteger(var75);
    boolean var77 = var72.acceptsURL(var75);
    boolean var78 = var72.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var79 = var56.getConnection(var62, var67, (java.sql.Driver)var72);
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    java.lang.String var83 = "";
    java.lang.Character var84 = new java.lang.Character('#');
    java.lang.Boolean var85 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var86 = new com.sqlmagic.tinysql.FieldTokenizer(var83, var84, var85);
    java.lang.String var87 = "hi!";
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType(var87);
    java.lang.String var89 = com.sqlmagic.tinysql.UtilString.toYMD(var87);
    boolean var90 = com.sqlmagic.tinysql.UtilString.isInteger(var89);
    com.sqlmagic.tinysql.FieldTokenizer var91 = new com.sqlmagic.tinysql.FieldTokenizer(var80, var84, var90);
    java.lang.String var92 = "";
    java.sql.ResultSet var93 = var48.getFunctionColumns(var52, var67, var80, var92);
    var20.setCatalog(var80);
    boolean var95 = var20.getAutoClose();
    var20.commit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!"+ "'", var89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test413() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsOpenStatementsAcrossRollback();
    boolean var29 = var24.supportsCorrelatedSubqueries();
    boolean var30 = var24.isCatalogAtStart();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var33);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.removeQuotes(var33);
    java.lang.String var38 = "";
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    com.sqlmagic.tinysql.Utils.delFile(var39, var41);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    int var50 = var44.getMinorVersion();
    java.lang.String var51 = "";
    java.lang.String var52 = "";
    java.lang.Character var53 = new java.lang.Character('#');
    java.lang.Boolean var54 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var55 = new com.sqlmagic.tinysql.FieldTokenizer(var52, var53, var54);
    java.lang.String var56 = var55.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    boolean var63 = var57.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var44.getConnection(var51, var56, (java.sql.Driver)var57);
    var64.close();
    var64.close();
    java.sql.DatabaseMetaData var67 = var64.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var68 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var69 = var68.getMaxFieldSize();
    java.lang.String var70 = "";
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var70);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.util.Vector var74 = com.sqlmagic.tinysql.Utils.getAllFiles(var70, var72);
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction(var75);
    java.lang.Double var78 = new java.lang.Double(100.0d);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue(var75, (double)var78);
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue(var70, (double)var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    int[] var82 = new int[] { };
    boolean var83 = var68.execute(var70, var82);
    java.lang.String[] var84 = new java.lang.String[] { var70};
    java.sql.ResultSet var85 = var24.getTables(var33, var38, var39, var84);
    boolean var86 = var24.dataDefinitionCausesTransactionCommit();
    int var87 = var24.getDriverMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);

  }

  public void test414() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    boolean var28 = var24.supportsSubqueriesInIns();
    java.lang.String var29 = var24.getNumericFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var30 = var24.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));

  }

  public void test415() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    boolean var29 = var24.supportsColumnAliasing();
    int var30 = var24.getMaxConnections();
    int var31 = var24.getMaxColumnNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 10);

  }

  public void test416() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsSubqueriesInQuantifieds();
    boolean var71 = var24.supportsOpenStatementsAcrossRollback();
    boolean var72 = var24.supportsANSI92FullSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test417() throws Throwable {

    java.lang.String var0 = "hi!";
    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var2 = new com.sqlmagic.tinysql.SimpleXMLTag(var0);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = var2.nextTag();
    java.lang.Integer var4 = new java.lang.Integer(0);
    boolean var5 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var4);
    java.lang.Object var6 = var2.get((java.lang.Object)var4);
    java.util.Enumeration var7 = var2.elements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test418() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var24.supportsOpenCursorsAcrossCommit();
    java.lang.String var28 = var24.getDatabaseProductVersion();
    boolean var29 = var24.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "2.26h"+ "'", var28.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test419() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    java.sql.Connection var27 = var24.getConnection();
    boolean var28 = var24.supportsPositionedUpdate();
    boolean var29 = var24.supportsCatalogsInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test420() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    int var64 = var53.getConcurrency();
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.toYMD(var66);
    boolean var69 = com.sqlmagic.tinysql.UtilString.isInteger(var68);
    boolean var70 = var65.acceptsURL(var68);
    int var71 = var65.getMinorVersion();
    java.lang.String var72 = "";
    java.lang.String var73 = "";
    java.lang.Character var74 = new java.lang.Character('#');
    java.lang.Boolean var75 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var76 = new com.sqlmagic.tinysql.FieldTokenizer(var73, var74, var75);
    java.lang.String var77 = var76.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var78 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var79 = "hi!";
    int var80 = com.sqlmagic.tinysql.UtilString.getValueType(var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var79);
    boolean var82 = com.sqlmagic.tinysql.UtilString.isInteger(var81);
    boolean var83 = var78.acceptsURL(var81);
    boolean var84 = var78.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var85 = var65.getConnection(var72, var77, (java.sql.Driver)var78);
    var85.close();
    java.lang.String var87 = "hi!";
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType(var87);
    boolean var89 = com.sqlmagic.tinysql.Utils.clearFunction(var87);
    var85.setCatalog(var87);
    var85.clearWarnings();
    var85.clearWarnings();
    java.lang.String var93 = var85.getCatalog();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var94 = var53.getDouble(var93);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1007);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "hi!"+ "'", var93.equals("hi!"));

  }

  public void test421() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    boolean var63 = var53.previous();
    boolean var64 = var53.last();
    int var65 = var53.getFetchDirection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1000);

  }

  public void test422() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsSubqueriesInIns();
    boolean var29 = var24.isReadOnly();
    int var30 = var24.getMaxCursorNameLength();
    java.lang.String var31 = var24.getDatabaseProductVersion();
    boolean var32 = var24.supportsOuterJoins();
    java.lang.String var33 = var24.getDatabaseProductName();
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "2.26h"+ "'", var31.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "tinySQL"+ "'", var33.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test423() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.cancelRowUpdates();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test424() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.supportsCatalogsInPrivilegeDefinitions();
    java.lang.String var26 = "";
    java.lang.Character var27 = new java.lang.Character('#');
    java.lang.Boolean var28 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var26, var27, var28);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = var29.getField((int)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    java.lang.String var34 = "";
    java.lang.Character var35 = new java.lang.Character('#');
    java.lang.Boolean var36 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var37 = new com.sqlmagic.tinysql.FieldTokenizer(var34, var35, var36);
    java.lang.String[] var38 = var37.getFields();
    int var39 = var37.countFields();
    int var40 = var29.getInt((int)var33, (int)var39);
    java.lang.String var41 = "";
    java.lang.Character var42 = new java.lang.Character('#');
    java.lang.Boolean var43 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var44 = new com.sqlmagic.tinysql.FieldTokenizer(var41, var42, var43);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = var44.getField((int)var46);
    java.lang.Integer var48 = new java.lang.Integer((-1));
    java.lang.String var49 = "";
    java.lang.Character var50 = new java.lang.Character('#');
    java.lang.Boolean var51 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var52 = new com.sqlmagic.tinysql.FieldTokenizer(var49, var50, var51);
    java.lang.String[] var53 = var52.getFields();
    int var54 = var52.countFields();
    int var55 = var44.getInt((int)var48, (int)var54);
    boolean var56 = var24.supportsResultSetConcurrency((int)var40, (int)var48);
    boolean var57 = var24.supportsPositionedUpdate();
    int var58 = var24.getDriverMajorVersion();
    boolean var59 = var24.supportsCorrelatedSubqueries();
    java.lang.String var60 = "";
    java.lang.Character var61 = new java.lang.Character('#');
    java.lang.Boolean var62 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var63 = new com.sqlmagic.tinysql.FieldTokenizer(var60, var61, var62);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = var63.getField((int)var65);
    boolean var67 = var24.updatesAreDetected((int)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NULL"+ "'", var32.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NULL"+ "'", var47.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "NULL"+ "'", var66.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test425() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    boolean var26 = var21.acceptsURL(var24);
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    java.lang.String var29 = com.sqlmagic.tinysql.UtilString.toYMD(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    com.sqlmagic.tinysql.Utils.delFile(var30, var32);
    java.lang.Integer var35 = new java.lang.Integer(1);
    int var36 = com.sqlmagic.tinysql.UtilString.intValue(var32, (int)var35);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    boolean var43 = var37.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var44 = var21.getConnection(var27, var32, (java.sql.Driver)var37);
    int var45 = var37.getMajorVersion();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    boolean var53 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var54 = var20.createStatement((int)var45, (int)var52);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test426() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.lang.String var27 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction(var31);
    com.sqlmagic.tinysql.Utils.delFile(var27, var31);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes(var27);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    com.sqlmagic.tinysql.Utils.delFile(var46, var48);
    java.lang.Integer var51 = new java.lang.Integer(1);
    int var52 = com.sqlmagic.tinysql.UtilString.intValue(var48, (int)var51);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.toYMD(var54);
    boolean var57 = com.sqlmagic.tinysql.UtilString.isInteger(var56);
    boolean var58 = var53.acceptsURL(var56);
    boolean var59 = var53.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var60 = var37.getConnection(var43, var48, (java.sql.Driver)var53);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    int var62 = var61.getMaxColumnsInIndex();
    boolean var63 = var61.supportsSchemasInPrivilegeDefinitions();
    boolean var64 = var61.supportsANSI92FullSQL();
    boolean var65 = var61.supportsOpenStatementsAcrossRollback();
    boolean var66 = var61.supportsCorrelatedSubqueries();
    boolean var67 = var61.nullsAreSortedLow();
    java.lang.String var68 = var61.getURL();
    java.lang.String[] var69 = new java.lang.String[] { var68};
    int var70 = var24.executeUpdate(var36, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var71 = var24.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test427() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var24 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.Integer var25 = new java.lang.Integer((-1));
    var24.setQueryTimeout((int)var25);
    java.sql.ResultSet var27 = var24.getGeneratedKeys();
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    boolean var30 = com.sqlmagic.tinysql.Utils.clearFunction(var28);
    java.lang.Double var31 = new java.lang.Double(100.0d);
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue(var28, (double)var31);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    int[] var34 = new int[] { var33};
    int var35 = var24.executeUpdate(var28, var34);
    java.sql.ResultSet var36 = var24.getResultSet();
    java.sql.ResultSet var37 = var24.getResultSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test428() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    boolean var54 = var53.last();
    java.lang.String var55 = "hi!";
    boolean var56 = com.sqlmagic.tinysql.UtilString.isInteger(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = var57.nextTag();
    java.lang.Integer var59 = new java.lang.Integer(0);
    boolean var60 = com.sqlmagic.tinysql.Utils.isCharColumn((int)var59);
    java.lang.Object var61 = var57.get((java.lang.Object)var59);
    java.sql.RowId var62 = var53.getRowId((int)var59);
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    boolean var67 = com.sqlmagic.tinysql.UtilString.isInteger(var66);
    boolean var68 = var63.acceptsURL(var66);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    java.lang.String var72 = "hi!";
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType(var72);
    java.lang.String var74 = "hi!";
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    com.sqlmagic.tinysql.Utils.delFile(var72, var74);
    java.lang.Integer var77 = new java.lang.Integer(1);
    int var78 = com.sqlmagic.tinysql.UtilString.intValue(var74, (int)var77);
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var80 = "hi!";
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType(var80);
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    boolean var83 = com.sqlmagic.tinysql.UtilString.isInteger(var82);
    boolean var84 = var79.acceptsURL(var82);
    boolean var85 = var79.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var86 = var63.getConnection(var69, var74, (java.sql.Driver)var79);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var87 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var86);
    int var88 = var87.getMaxColumnsInIndex();
    boolean var89 = var87.storesLowerCaseQuotedIdentifiers();
    boolean var90 = var87.supportsOpenCursorsAcrossCommit();
    boolean var91 = var87.supportsSubqueriesInIns();
    int var92 = var87.getMaxRowSize();
    int var93 = var87.getDatabaseMajorVersion();
    java.lang.Short var94 = new java.lang.Short((short)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.updateShort((int)var93, (short)var94);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test429() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    var53.afterLast();
    boolean var55 = var53.wasNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test430() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.sql.DatabaseMetaData var26 = var20.getMetaData();
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var30);
    boolean var32 = var27.acceptsURL(var30);
    int var33 = var27.getMinorVersion();
    java.lang.String var34 = "";
    java.lang.String var35 = "";
    java.lang.Character var36 = new java.lang.Character('#');
    java.lang.Boolean var37 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var38 = new com.sqlmagic.tinysql.FieldTokenizer(var35, var36, var37);
    java.lang.String var39 = var38.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var27.getConnection(var34, var39, (java.sql.Driver)var40);
    var47.close();
    var47.close();
    java.sql.DatabaseMetaData var50 = var47.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var51 = new com.sqlmagic.tinysql.tinySQLStatement(var47);
    java.lang.Integer var52 = new java.lang.Integer((-1));
    var51.setQueryTimeout((int)var52);
    java.sql.ResultSet var54 = var51.getGeneratedKeys();
    boolean var55 = var51.getMoreResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var56 = var20.executetinySQL(var51);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test431() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var22.getConnection(var28, var33, (java.sql.Driver)var38);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    int var47 = var46.getMaxColumnsInIndex();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    com.sqlmagic.tinysql.Utils.delFile(var48, var50);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var50);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var55);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger(var57);
    boolean var59 = var54.acceptsURL(var57);
    java.lang.String var60 = "hi!";
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType(var60);
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD(var60);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = "hi!";
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    com.sqlmagic.tinysql.Utils.delFile(var63, var65);
    java.lang.Integer var68 = new java.lang.Integer(1);
    int var69 = com.sqlmagic.tinysql.UtilString.intValue(var65, (int)var68);
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var54.getConnection(var60, var65, (java.sql.Driver)var70);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    java.lang.String var81 = "";
    java.lang.Character var82 = new java.lang.Character('#');
    java.lang.Boolean var83 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var84 = new com.sqlmagic.tinysql.FieldTokenizer(var81, var82, var83);
    java.lang.String var85 = "hi!";
    int var86 = com.sqlmagic.tinysql.UtilString.getValueType(var85);
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.toYMD(var85);
    boolean var88 = com.sqlmagic.tinysql.UtilString.isInteger(var87);
    com.sqlmagic.tinysql.FieldTokenizer var89 = new com.sqlmagic.tinysql.FieldTokenizer(var78, var82, var88);
    java.lang.String var90 = "";
    java.sql.ResultSet var91 = var46.getFunctionColumns(var50, var65, var78, var90);
    boolean var92 = var46.supportsANSI92FullSQL();
    java.sql.Connection var93 = var46.getConnection();
    boolean var94 = var46.dataDefinitionCausesTransactionCommit();
    boolean var95 = var46.storesMixedCaseQuotedIdentifiers();
    boolean var96 = var46.supportsUnion();
    boolean var97 = var46.usesLocalFiles();
    var20.setAutoClose((boolean)var97);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var99 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test432() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    boolean var7 = var1.jdbcCompliant();
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    com.sqlmagic.tinysql.Utils.delFile(var8, var10);
    boolean var13 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var10);
    java.lang.String var14 = com.sqlmagic.tinysql.UtilString.removeQuotes(var10);
    java.lang.String var15 = "";
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var15);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    java.lang.Integer var31 = new java.lang.Integer(1);
    int var32 = com.sqlmagic.tinysql.UtilString.intValue(var28, (int)var31);
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var34);
    boolean var37 = com.sqlmagic.tinysql.UtilString.isInteger(var36);
    boolean var38 = var33.acceptsURL(var36);
    boolean var39 = var33.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var40 = var17.getConnection(var23, var28, (java.sql.Driver)var33);
    java.lang.String var41 = "";
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var41);
    boolean var43 = var17.acceptsURL(var42);
    com.sqlmagic.tinysql.tinySQLConnection var44 = var1.getConnection(var10, var15, (java.sql.Driver)var17);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var45 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var44);
    com.sqlmagic.tinysql.tinySQLStatement var46 = new com.sqlmagic.tinysql.tinySQLStatement(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var47 = var0.sqlexec(var46);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test433() throws Throwable {

    java.lang.String var0 = "shortcol = 'sai'";
    java.lang.Character var1 = new java.lang.Character(',');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test434() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.sql.DatabaseMetaData var26 = var20.getMetaData();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    boolean var34 = var28.jdbcCompliant();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    com.sqlmagic.tinysql.Utils.delFile(var35, var37);
    boolean var40 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var37);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.removeQuotes(var37);
    java.lang.String var42 = "";
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var42);
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    boolean var48 = com.sqlmagic.tinysql.UtilString.isInteger(var47);
    boolean var49 = var44.acceptsURL(var47);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.toYMD(var50);
    java.lang.String var53 = "hi!";
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType(var53);
    java.lang.String var55 = "hi!";
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType(var55);
    com.sqlmagic.tinysql.Utils.delFile(var53, var55);
    java.lang.Integer var58 = new java.lang.Integer(1);
    int var59 = com.sqlmagic.tinysql.UtilString.intValue(var55, (int)var58);
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    boolean var65 = var60.acceptsURL(var63);
    boolean var66 = var60.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var67 = var44.getConnection(var50, var55, (java.sql.Driver)var60);
    java.lang.String var68 = "";
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var68);
    boolean var70 = var44.acceptsURL(var69);
    com.sqlmagic.tinysql.tinySQLConnection var71 = var28.getConnection(var37, var42, (java.sql.Driver)var44);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var72 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var71);
    com.sqlmagic.tinysql.tinySQLStatement var73 = new com.sqlmagic.tinysql.tinySQLStatement(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var74 = var20.executetinyUpdate(var73);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test435() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    boolean var2 = com.sqlmagic.tinysql.Utils.clearFunction(var0);
    java.lang.Double var3 = new java.lang.Double(100.0d);
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue(var0, (double)var3);
    com.sqlmagic.tinysql.dbfFile var5 = new com.sqlmagic.tinysql.dbfFile(var0);
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    boolean var10 = com.sqlmagic.tinysql.UtilString.isInteger(var9);
    boolean var11 = var6.acceptsURL(var9);
    boolean var12 = var6.jdbcCompliant();
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    com.sqlmagic.tinysql.Utils.delFile(var13, var15);
    boolean var18 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var15);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.removeQuotes(var15);
    java.lang.String var20 = "";
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var20);
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    boolean var27 = var22.acceptsURL(var25);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    com.sqlmagic.tinysql.Utils.delFile(var31, var33);
    java.lang.Integer var36 = new java.lang.Integer(1);
    int var37 = com.sqlmagic.tinysql.UtilString.intValue(var33, (int)var36);
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var22.getConnection(var28, var33, (java.sql.Driver)var38);
    java.lang.String var46 = "";
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var46);
    boolean var48 = var22.acceptsURL(var47);
    com.sqlmagic.tinysql.tinySQLConnection var49 = var6.getConnection(var15, var20, (java.sql.Driver)var22);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var50 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var49);
    com.sqlmagic.tinysql.tinySQLStatement var51 = new com.sqlmagic.tinysql.tinySQLStatement(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var52 = var5.sqlexec(var51);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test436() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var29 = var27.getColumnCount();
    int var30 = var27.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var31 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var32 = var31.getColumnCount();
    java.lang.Integer var33 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var34 = var31.getColumnName((int)var33);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test437() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    boolean var7 = var1.jdbcCompliant();
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    com.sqlmagic.tinysql.Utils.delFile(var8, var10);
    boolean var13 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var10);
    java.lang.String var14 = com.sqlmagic.tinysql.UtilString.removeQuotes(var10);
    java.lang.String var15 = "";
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var15);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    java.lang.String var23 = "hi!";
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType(var23);
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toYMD(var23);
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    java.lang.Integer var31 = new java.lang.Integer(1);
    int var32 = com.sqlmagic.tinysql.UtilString.intValue(var28, (int)var31);
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var34 = "hi!";
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType(var34);
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.toYMD(var34);
    boolean var37 = com.sqlmagic.tinysql.UtilString.isInteger(var36);
    boolean var38 = var33.acceptsURL(var36);
    boolean var39 = var33.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var40 = var17.getConnection(var23, var28, (java.sql.Driver)var33);
    java.lang.String var41 = "";
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var41);
    boolean var43 = var17.acceptsURL(var42);
    com.sqlmagic.tinysql.tinySQLConnection var44 = var1.getConnection(var10, var15, (java.sql.Driver)var17);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var45 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var44);
    com.sqlmagic.tinysql.tinySQLStatement var46 = new com.sqlmagic.tinysql.tinySQLStatement(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var47 = var0.sqlexec(var46);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test438() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var4 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var3);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test439() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var24.getConnection(var30, var35, (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    boolean var50 = var48.supportsSchemasInPrivilegeDefinitions();
    boolean var51 = var48.supportsANSI92FullSQL();
    boolean var52 = var48.supportsOpenStatementsAcrossRollback();
    boolean var53 = var48.supportsCorrelatedSubqueries();
    boolean var54 = var48.nullsAreSortedLow();
    var20.setAutoCommit((boolean)var54);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var56 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.tinySQLException var57 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var58 = new com.sqlmagic.tinysql.tinySQLException();
    var57.setNextException((java.sql.SQLException)var58);
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = "hi!";
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    com.sqlmagic.tinysql.SimpleXMLTag var63 = new com.sqlmagic.tinysql.SimpleXMLTag(var61);
    java.lang.String var64 = "hi!";
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var64);
    var63.putAll((java.util.Map)var66);
    int var68 = var66.size();
    boolean var69 = var66.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var70 = new com.sqlmagic.tinysql.tinySQLWhere(var60, (java.util.Hashtable)var66);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    java.lang.String var74 = "";
    java.lang.Character var75 = new java.lang.Character('#');
    java.lang.Boolean var76 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var77 = new com.sqlmagic.tinysql.FieldTokenizer(var74, var75, var76);
    java.lang.String var78 = "hi!";
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var78);
    boolean var81 = com.sqlmagic.tinysql.UtilString.isInteger(var80);
    com.sqlmagic.tinysql.FieldTokenizer var82 = new com.sqlmagic.tinysql.FieldTokenizer(var71, var75, var81);
    java.lang.String var83 = "hi!";
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType(var83);
    java.lang.String var85 = "";
    java.lang.Character var86 = new java.lang.Character('#');
    java.lang.Boolean var87 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var88 = new com.sqlmagic.tinysql.FieldTokenizer(var85, var86, var87);
    java.lang.String[] var89 = var88.getFields();
    java.lang.String var90 = "hi!";
    int var91 = com.sqlmagic.tinysql.UtilString.getValueType(var90);
    java.lang.String var92 = "";
    boolean var93 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var92);
    java.lang.String var94 = var88.getField((int)var91, var92);
    java.lang.String[] var95 = new java.lang.String[] { var92};
    java.sql.ResultSet var96 = var56.getTables(var60, var71, var83, var95);
    java.lang.String var97 = var56.getDatabaseProductName();
    java.lang.String var98 = var56.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var60.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + ""+ "'", var94.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "tinySQL"+ "'", var97.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "2.26h"+ "'", var98.equals("2.26h"));

  }

  public void test440() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var20.setAutoCommit((boolean)var22);
    var20.commit();
    java.lang.String var25 = "";
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var25);
    var20.setCatalog(var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));

  }

  public void test441() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    java.lang.Integer var1 = new java.lang.Integer(4096);
    var0.setFetchSize((int)var1);

  }

  public void test442() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var32 = "hi!";
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType(var32);
    java.lang.String var34 = com.sqlmagic.tinysql.UtilString.toYMD(var32);
    boolean var35 = com.sqlmagic.tinysql.UtilString.isInteger(var34);
    boolean var36 = var31.acceptsURL(var34);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    com.sqlmagic.tinysql.Utils.delFile(var40, var42);
    java.lang.Integer var45 = new java.lang.Integer(1);
    int var46 = com.sqlmagic.tinysql.UtilString.intValue(var42, (int)var45);
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.toYMD(var48);
    boolean var51 = com.sqlmagic.tinysql.UtilString.isInteger(var50);
    boolean var52 = var47.acceptsURL(var50);
    boolean var53 = var47.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var54 = var31.getConnection(var37, var42, (java.sql.Driver)var47);
    com.sqlmagic.tinysql.textFileDriver var55 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var56 = var0.getConnection(var29, var42, (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    java.lang.String var60 = com.sqlmagic.tinysql.UtilString.toYMD(var58);
    boolean var61 = com.sqlmagic.tinysql.UtilString.isInteger(var60);
    boolean var62 = var57.acceptsURL(var60);
    int var63 = var57.getMinorVersion();
    java.lang.String var64 = "";
    java.lang.String var65 = "";
    java.lang.Character var66 = new java.lang.Character('#');
    java.lang.Boolean var67 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var68 = new com.sqlmagic.tinysql.FieldTokenizer(var65, var66, var67);
    java.lang.String var69 = var68.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    java.lang.String var73 = com.sqlmagic.tinysql.UtilString.toYMD(var71);
    boolean var74 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    boolean var75 = var70.acceptsURL(var73);
    boolean var76 = var70.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var77 = var57.getConnection(var64, var69, (java.sql.Driver)var70);
    var77.close();
    var77.close();
    java.sql.DatabaseMetaData var80 = var77.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var81 = new com.sqlmagic.tinysql.tinySQLStatement(var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var82 = var56.executetinySQL(var81);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test443() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    var20.close();
    java.sql.DatabaseMetaData var23 = var20.getMetaData();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var24 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var25 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test444() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var24.getConnection(var30, var35, (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    boolean var50 = var48.supportsSchemasInPrivilegeDefinitions();
    boolean var51 = var48.supportsANSI92FullSQL();
    boolean var52 = var48.supportsOpenStatementsAcrossRollback();
    boolean var53 = var48.supportsCorrelatedSubqueries();
    boolean var54 = var48.nullsAreSortedLow();
    var20.setAutoCommit((boolean)var54);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var56 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var57 = var56.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test445() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    int var7 = var1.getMinorVersion();
    java.lang.String var8 = "";
    java.lang.String var9 = "";
    java.lang.Character var10 = new java.lang.Character('#');
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var12 = new com.sqlmagic.tinysql.FieldTokenizer(var9, var10, var11);
    java.lang.String var13 = var12.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    boolean var20 = var14.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var21 = var1.getConnection(var8, var13, (java.sql.Driver)var14);
    var21.close();
    var21.close();
    java.sql.DatabaseMetaData var24 = var21.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var25 = new com.sqlmagic.tinysql.tinySQLStatement(var21);
    java.lang.Integer var26 = new java.lang.Integer((-1));
    var25.setQueryTimeout((int)var26);
    java.sql.ResultSet var28 = var25.getGeneratedKeys();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction(var29);
    java.lang.Double var32 = new java.lang.Double(100.0d);
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue(var29, (double)var32);
    java.lang.Integer var34 = new java.lang.Integer((-1));
    int[] var35 = new int[] { var34};
    int var36 = var25.executeUpdate(var29, var35);
    java.sql.ResultSet var37 = var25.getResultSet();
    com.sqlmagic.tinysql.tinySQLResultSet var38 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var25);
    boolean var39 = var38.next();
    java.lang.String var40 = "TABLE_NAME";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var41 = var38.getString(var40);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test446() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = var32.getField((int)var34);
    java.lang.Integer var36 = new java.lang.Integer((-1));
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String[] var41 = var40.getFields();
    int var42 = var40.countFields();
    int var43 = var32.getInt((int)var36, (int)var42);
    var27.setFetchSize((int)var36);
    int var45 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var46 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var47 = var46.getColumnCount();
    java.lang.Integer var48 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var49 = var46.getColumnName((int)var48);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NULL"+ "'", var35.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test447() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    java.lang.Character var8 = new java.lang.Character('a');
    java.lang.Object var9 = var6.remove((java.lang.Object)var8);
    com.sqlmagic.tinysql.dbfFileDriver var10 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.toYMD(var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger(var13);
    boolean var15 = var10.acceptsURL(var13);
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    com.sqlmagic.tinysql.Utils.delFile(var19, var21);
    java.lang.Integer var24 = new java.lang.Integer(1);
    int var25 = com.sqlmagic.tinysql.UtilString.intValue(var21, (int)var24);
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    java.lang.String var29 = com.sqlmagic.tinysql.UtilString.toYMD(var27);
    boolean var30 = com.sqlmagic.tinysql.UtilString.isInteger(var29);
    boolean var31 = var26.acceptsURL(var29);
    boolean var32 = var26.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var33 = var10.getConnection(var16, var21, (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    int var35 = var34.getMaxColumnsInIndex();
    boolean var36 = var34.supportsSchemasInPrivilegeDefinitions();
    boolean var37 = var34.supportsANSI92FullSQL();
    boolean var38 = var34.supportsOpenStatementsAcrossRollback();
    boolean var39 = var34.supportsTableCorrelationNames();
    boolean var40 = var34.supportsColumnAliasing();
    java.lang.String var41 = var34.getNumericFunctions();
    boolean var42 = var6.contains((java.lang.Object)var41);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var43 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var6);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test448() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var1 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var2 = var1.getColumnCount();
    java.lang.Integer var3 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var1.getColumnName((int)var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test449() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var5 = "hi!";
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType(var5);
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toYMD(var5);
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    boolean var9 = var4.acceptsURL(var7);
    int var10 = var4.getMinorVersion();
    java.lang.String var11 = "";
    java.lang.String var12 = "";
    java.lang.Character var13 = new java.lang.Character('#');
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var15 = new com.sqlmagic.tinysql.FieldTokenizer(var12, var13, var14);
    java.lang.String var16 = var15.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var4.getConnection(var11, var16, (java.sql.Driver)var17);
    boolean var25 = var24.getAutoClose();
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var27 = new com.sqlmagic.tinysql.tinySQLException();
    var26.setNextException((java.sql.SQLException)var27);
    java.lang.String var29 = var27.toString();
    java.lang.Object var30 = var3.put((java.lang.Object)var25, (java.lang.Object)var29);
    java.lang.String var31 = "hi!";
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var31);
    var3.putAll((java.util.Map)var33);
    java.lang.String var35 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction(var39);
    com.sqlmagic.tinysql.Utils.delFile(var35, var39);
    java.lang.Object var44 = var33.get((java.lang.Object)var39);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var45 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var33);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test450() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    com.sqlmagic.tinysql.Utils.delFile(var26, var28);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var28);
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = com.sqlmagic.tinysql.UtilString.toYMD(var33);
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    boolean var37 = var32.acceptsURL(var35);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    com.sqlmagic.tinysql.Utils.delFile(var41, var43);
    java.lang.Integer var46 = new java.lang.Integer(1);
    int var47 = com.sqlmagic.tinysql.UtilString.intValue(var43, (int)var46);
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var32.getConnection(var38, var43, (java.sql.Driver)var48);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    java.lang.String var59 = "";
    java.lang.Character var60 = new java.lang.Character('#');
    java.lang.Boolean var61 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var62 = new com.sqlmagic.tinysql.FieldTokenizer(var59, var60, var61);
    java.lang.String var63 = "hi!";
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD(var63);
    boolean var66 = com.sqlmagic.tinysql.UtilString.isInteger(var65);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var56, var60, var66);
    java.lang.String var68 = "";
    java.sql.ResultSet var69 = var24.getFunctionColumns(var28, var43, var56, var68);
    boolean var70 = var24.supportsANSI92FullSQL();
    java.sql.Connection var71 = var24.getConnection();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var72 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData(var71);
    java.sql.Connection var73 = var72.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test451() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    java.lang.String var25 = "";
    java.lang.Character var26 = new java.lang.Character('#');
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var28 = new com.sqlmagic.tinysql.FieldTokenizer(var25, var26, var27);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = var28.getField((int)var30);
    var23.setTransactionIsolation((int)var30);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "NULL"+ "'", var31.equals("NULL"));

  }

  public void test452() throws Throwable {

    java.lang.String var0 = "hi!";
    int var1 = com.sqlmagic.tinysql.UtilString.getValueType(var0);
    java.lang.String var2 = com.sqlmagic.tinysql.UtilString.toYMD(var0);
    java.lang.String var3 = "";
    java.lang.Character var4 = new java.lang.Character('#');
    java.lang.Boolean var5 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var6 = new com.sqlmagic.tinysql.FieldTokenizer(var3, var4, var5);
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    boolean var10 = com.sqlmagic.tinysql.UtilString.isInteger(var9);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var4, var10);
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile(var0);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    int var19 = var13.getMinorVersion();
    java.lang.String var20 = "";
    java.lang.String var21 = "";
    java.lang.Character var22 = new java.lang.Character('#');
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var24 = new com.sqlmagic.tinysql.FieldTokenizer(var21, var22, var23);
    java.lang.String var25 = var24.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    java.lang.String var29 = com.sqlmagic.tinysql.UtilString.toYMD(var27);
    boolean var30 = com.sqlmagic.tinysql.UtilString.isInteger(var29);
    boolean var31 = var26.acceptsURL(var29);
    boolean var32 = var26.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var33 = var13.getConnection(var20, var25, (java.sql.Driver)var26);
    var33.close();
    var33.close();
    java.sql.DatabaseMetaData var36 = var33.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var37 = new com.sqlmagic.tinysql.tinySQLStatement(var33);
    java.lang.Integer var38 = new java.lang.Integer((-1));
    var37.setQueryTimeout((int)var38);
    java.sql.ResultSet var40 = var37.getGeneratedKeys();
    boolean var41 = var37.isPoolable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var42 = var12.sqlexec(var37);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test453() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var24.getConnection(var30, var35, (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    boolean var50 = var48.supportsSchemasInPrivilegeDefinitions();
    boolean var51 = var48.supportsANSI92FullSQL();
    boolean var52 = var48.supportsOpenStatementsAcrossRollback();
    boolean var53 = var48.supportsCorrelatedSubqueries();
    boolean var54 = var48.nullsAreSortedLow();
    var20.setAutoCommit((boolean)var54);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var56 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var57 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test454() throws Throwable {

    java.lang.String var0 = "TEST->TEST.SHORTCOL";
    java.lang.Character var1 = new java.lang.Character('(');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test455() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    int var8 = var2.getMinorVersion();
    java.lang.String var9 = "";
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    java.lang.String var14 = var13.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    boolean var21 = var15.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var22 = var2.getConnection(var9, var14, (java.sql.Driver)var15);
    int var23 = var2.getMinorVersion();
    com.sqlmagic.tinysql.dbfFileConnection var24 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    java.sql.DatabaseMetaData var25 = var24.getMetaData();
    java.sql.DatabaseMetaData var26 = var24.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 9);

  }

  public void test456() throws Throwable {

    java.lang.String var0 = "insert into TEST (shortcol) values ('hell world')";
    java.lang.Character var1 = new java.lang.Character(' ');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test457() throws Throwable {

    java.lang.String var0 = "insert into TEST (shortcol) values ('hell world')";
    java.lang.Character var1 = new java.lang.Character(' ');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test458() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = var32.getField((int)var34);
    java.lang.Integer var36 = new java.lang.Integer((-1));
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String[] var41 = var40.getFields();
    int var42 = var40.countFields();
    int var43 = var32.getInt((int)var36, (int)var42);
    var27.setFetchSize((int)var36);
    int var45 = var27.getColumnCount();
    int var46 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var47 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var48 = var47.getColumnCount();
    java.lang.Integer var49 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var50 = var47.getColumnName((int)var49);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NULL"+ "'", var35.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test459() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    int var7 = var1.getMinorVersion();
    java.lang.String var8 = "";
    java.lang.String var9 = "";
    java.lang.Character var10 = new java.lang.Character('#');
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var12 = new com.sqlmagic.tinysql.FieldTokenizer(var9, var10, var11);
    java.lang.String var13 = var12.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var15 = "hi!";
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType(var15);
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.toYMD(var15);
    boolean var18 = com.sqlmagic.tinysql.UtilString.isInteger(var17);
    boolean var19 = var14.acceptsURL(var17);
    boolean var20 = var14.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var21 = var1.getConnection(var8, var13, (java.sql.Driver)var14);
    var21.close();
    var21.close();
    java.sql.DatabaseMetaData var24 = var21.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var25 = new com.sqlmagic.tinysql.tinySQLStatement(var21);
    java.lang.Integer var26 = new java.lang.Integer((-1));
    var25.setQueryTimeout((int)var26);
    java.sql.ResultSet var28 = var25.getGeneratedKeys();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction(var29);
    java.lang.Double var32 = new java.lang.Double(100.0d);
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue(var29, (double)var32);
    java.lang.Integer var34 = new java.lang.Integer((-1));
    int[] var35 = new int[] { var34};
    int var36 = var25.executeUpdate(var29, var35);
    java.sql.ResultSet var37 = var25.getResultSet();
    com.sqlmagic.tinysql.tinySQLResultSet var38 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var25);
    boolean var39 = var38.next();
    java.lang.String var40 = "TABLE_NAME";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var41 = var38.findColumn(var40);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test460() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    boolean var24 = var20.getAutoClose();
    java.lang.String var25 = "hi!";
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    com.sqlmagic.tinysql.SimpleXMLTag var27 = new com.sqlmagic.tinysql.SimpleXMLTag(var25);
    java.lang.String var28 = "hi!";
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    com.sqlmagic.tinysql.SimpleXMLTag var30 = new com.sqlmagic.tinysql.SimpleXMLTag(var28);
    var27.putAll((java.util.Map)var30);
    int var32 = var30.size();
    boolean var33 = var30.isEmpty();
    var20.setAutoClose((boolean)var33);
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.toYMD(var36);
    boolean var39 = com.sqlmagic.tinysql.UtilString.isInteger(var38);
    boolean var40 = var35.acceptsURL(var38);
    int var41 = var35.getMinorVersion();
    java.lang.String var42 = "";
    java.lang.String var43 = "";
    java.lang.Character var44 = new java.lang.Character('#');
    java.lang.Boolean var45 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var46 = new com.sqlmagic.tinysql.FieldTokenizer(var43, var44, var45);
    java.lang.String var47 = var46.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.toYMD(var49);
    boolean var52 = com.sqlmagic.tinysql.UtilString.isInteger(var51);
    boolean var53 = var48.acceptsURL(var51);
    boolean var54 = var48.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var55 = var35.getConnection(var42, var47, (java.sql.Driver)var48);
    var55.close();
    var55.close();
    java.sql.DatabaseMetaData var58 = var55.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var59 = new com.sqlmagic.tinysql.tinySQLStatement(var55);
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var61 = "hi!";
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType(var61);
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.toYMD(var61);
    boolean var64 = com.sqlmagic.tinysql.UtilString.isInteger(var63);
    boolean var65 = var60.acceptsURL(var63);
    java.lang.String var66 = "hi!";
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType(var66);
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.toYMD(var66);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = "hi!";
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType(var71);
    com.sqlmagic.tinysql.Utils.delFile(var69, var71);
    java.lang.Integer var74 = new java.lang.Integer(1);
    int var75 = com.sqlmagic.tinysql.UtilString.intValue(var71, (int)var74);
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var77 = "hi!";
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType(var77);
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toYMD(var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger(var79);
    boolean var81 = var76.acceptsURL(var79);
    boolean var82 = var76.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var83 = var60.getConnection(var66, var71, (java.sql.Driver)var76);
    int var84 = var60.getMinorVersion();
    var59.setMaxRows((int)var84);
    var20.setTransactionIsolation((int)var84);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var87 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var88 = var87.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 9);

  }

  public void test461() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.sql.Statement var22 = var20.createStatement();
    var20.close();
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var25 = "hi!";
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType(var25);
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.toYMD(var25);
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    boolean var29 = var24.acceptsURL(var27);
    int var30 = var24.getMinorVersion();
    java.lang.String var31 = "";
    java.lang.String var32 = "";
    java.lang.Character var33 = new java.lang.Character('#');
    java.lang.Boolean var34 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var32, var33, var34);
    java.lang.String var36 = var35.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    boolean var43 = var37.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var44 = var24.getConnection(var31, var36, (java.sql.Driver)var37);
    var44.close();
    var44.close();
    java.sql.DatabaseMetaData var47 = var44.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var48 = new com.sqlmagic.tinysql.tinySQLStatement(var44);
    java.lang.Integer var49 = new java.lang.Integer((-1));
    var48.setQueryTimeout((int)var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var51 = var20.executetinySQL(var48);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test462() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var8 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var6);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test463() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.lang.Integer var26 = new java.lang.Integer(0);
    var20.setTransactionIsolation((int)var26);
    boolean var28 = var20.isClosed();
    com.sqlmagic.tinysql.tinySQLStatement var29 = new com.sqlmagic.tinysql.tinySQLStatement(var20);
    java.lang.String var30 = "drop table TEST";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var31 = var29.executeUpdate(var30);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test464() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    boolean var8 = var2.jdbcCompliant();
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    boolean var14 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var11);
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes(var11);
    java.lang.String var16 = "";
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.toYMD(var19);
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger(var21);
    boolean var23 = var18.acceptsURL(var21);
    java.lang.String var24 = "hi!";
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.toYMD(var24);
    java.lang.String var27 = "hi!";
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType(var27);
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    com.sqlmagic.tinysql.Utils.delFile(var27, var29);
    java.lang.Integer var32 = new java.lang.Integer(1);
    int var33 = com.sqlmagic.tinysql.UtilString.intValue(var29, (int)var32);
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.toYMD(var35);
    boolean var38 = com.sqlmagic.tinysql.UtilString.isInteger(var37);
    boolean var39 = var34.acceptsURL(var37);
    boolean var40 = var34.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var41 = var18.getConnection(var24, var29, (java.sql.Driver)var34);
    java.lang.String var42 = "";
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var42);
    boolean var44 = var18.acceptsURL(var43);
    com.sqlmagic.tinysql.tinySQLConnection var45 = var2.getConnection(var11, var16, (java.sql.Driver)var18);
    com.sqlmagic.tinysql.dbfFileConnection var46 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    java.sql.DatabaseMetaData var47 = var46.getMetaData();
    java.sql.DatabaseMetaData var48 = var46.getMetaData();
    com.sqlmagic.tinysql.tinySQL var49 = var46.get_tinySQL();
    java.sql.DatabaseMetaData var50 = var46.getMetaData();
    java.sql.DatabaseMetaData var51 = var46.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test465() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    int var8 = var2.getMinorVersion();
    java.lang.String var9 = "";
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    java.lang.String var14 = var13.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    boolean var21 = var15.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var22 = var2.getConnection(var9, var14, (java.sql.Driver)var15);
    com.sqlmagic.tinysql.dbfFileConnection var23 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    java.sql.DatabaseMetaData var24 = var23.getMetaData();
    java.sql.DatabaseMetaData var25 = var23.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test466() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    int var36 = var30.getMinorVersion();
    java.lang.String var37 = "";
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String var42 = var41.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var44 = "hi!";
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType(var44);
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD(var44);
    boolean var47 = com.sqlmagic.tinysql.UtilString.isInteger(var46);
    boolean var48 = var43.acceptsURL(var46);
    boolean var49 = var43.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var50 = var30.getConnection(var37, var42, (java.sql.Driver)var43);
    var50.close();
    var50.close();
    java.sql.DatabaseMetaData var53 = var50.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var54 = new com.sqlmagic.tinysql.tinySQLStatement(var50);
    java.lang.Integer var55 = new java.lang.Integer((-1));
    var54.setQueryTimeout((int)var55);
    java.sql.ResultSet var57 = var54.getGeneratedKeys();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    boolean var60 = com.sqlmagic.tinysql.Utils.clearFunction(var58);
    java.lang.Double var61 = new java.lang.Double(100.0d);
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue(var58, (double)var61);
    java.lang.Integer var63 = new java.lang.Integer((-1));
    int[] var64 = new int[] { var63};
    int var65 = var54.executeUpdate(var58, var64);
    java.sql.ResultSet var66 = var54.getResultSet();
    com.sqlmagic.tinysql.tinySQLResultSet var67 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var54);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var68 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var69 = var68.getColumnCount();
    java.lang.Integer var70 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var71 = var68.getColumnName((int)var70);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var28.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);

  }

  public void test467() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var20.setAutoCommit((boolean)var22);
    var20.commit();
    java.lang.String var25 = "";
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var25);
    var20.setCatalog(var26);
    var20.clearWarnings();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    boolean var35 = var29.jdbcCompliant();
    java.lang.String var36 = "hi!";
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType(var36);
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    com.sqlmagic.tinysql.Utils.delFile(var36, var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var38);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.removeQuotes(var38);
    java.lang.String var43 = "";
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var43);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.toYMD(var51);
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    com.sqlmagic.tinysql.Utils.delFile(var54, var56);
    java.lang.Integer var59 = new java.lang.Integer(1);
    int var60 = com.sqlmagic.tinysql.UtilString.intValue(var56, (int)var59);
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    boolean var66 = var61.acceptsURL(var64);
    boolean var67 = var61.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var68 = var45.getConnection(var51, var56, (java.sql.Driver)var61);
    java.lang.String var69 = "";
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var69);
    boolean var71 = var45.acceptsURL(var70);
    com.sqlmagic.tinysql.tinySQLConnection var72 = var29.getConnection(var38, var43, (java.sql.Driver)var45);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var73 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var72);
    com.sqlmagic.tinysql.tinySQLStatement var74 = new com.sqlmagic.tinysql.tinySQLStatement(var72);
    java.lang.String var75 = "drop table TEST";
    int var76 = var74.executeUpdate(var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var77 = var20.executetinyUpdate(var74);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test468() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    boolean var8 = var3.hasMoreTags();
    java.util.Enumeration var9 = var3.keys();
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    int var14 = var13.countFields();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = var3.getTag((int)var14);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var16 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var3);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test469() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.Character var1 = new java.lang.Character(',');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test470() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    boolean var8 = var3.hasMoreTags();
    java.util.Enumeration var9 = var3.keys();
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    int var14 = var13.countFields();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = var3.getTag((int)var14);
    java.util.Enumeration var16 = var3.elements();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var3);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test471() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    var20.clearWarnings();
    java.lang.String var28 = var20.getCatalog();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));

  }

  public void test472() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var28 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    java.lang.String var29 = "";
    java.lang.Character var30 = new java.lang.Character('#');
    java.lang.Boolean var31 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var32 = new com.sqlmagic.tinysql.FieldTokenizer(var29, var30, var31);
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = var32.getField((int)var34);
    java.lang.Integer var36 = new java.lang.Integer((-1));
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String[] var41 = var40.getFields();
    int var42 = var40.countFields();
    int var43 = var32.getInt((int)var36, (int)var42);
    var27.setFetchSize((int)var36);
    int var45 = var27.getColumnCount();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var46 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var47 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var48 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var49 = var48.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NULL"+ "'", var35.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test473() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "jdbc:dbfFile:.";
    boolean var2 = var0.acceptsURL(var1);
    java.lang.String var3 = "";
    java.lang.String var4 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    boolean var9 = com.sqlmagic.tinysql.UtilString.isInteger(var8);
    boolean var10 = var5.acceptsURL(var8);
    boolean var11 = var5.jdbcCompliant();
    int var12 = var5.getMajorVersion();
    boolean var13 = var5.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var14 = var0.getConnection(var3, var4, (java.sql.Driver)var5);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var15 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var14);
    java.sql.Connection var16 = var15.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test474() throws Throwable {

    java.lang.String var0 = ".";
    com.sqlmagic.tinysql.dbfFile var1 = new com.sqlmagic.tinysql.dbfFile(var0);
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    int var8 = var2.getMinorVersion();
    java.lang.String var9 = "";
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    java.lang.String var14 = var13.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    boolean var21 = var15.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var22 = var2.getConnection(var9, var14, (java.sql.Driver)var15);
    var22.close();
    var22.close();
    java.sql.DatabaseMetaData var25 = var22.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var26 = new com.sqlmagic.tinysql.tinySQLStatement(var22);
    java.lang.Integer var27 = new java.lang.Integer((-1));
    var26.setQueryTimeout((int)var27);
    java.lang.String var29 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.clearFunction(var33);
    com.sqlmagic.tinysql.Utils.delFile(var29, var33);
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.removeQuotes(var29);
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var40 = "hi!";
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType(var40);
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD(var40);
    boolean var43 = com.sqlmagic.tinysql.UtilString.isInteger(var42);
    boolean var44 = var39.acceptsURL(var42);
    java.lang.String var45 = "hi!";
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var45);
    java.lang.String var48 = "hi!";
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    java.lang.String var50 = "hi!";
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType(var50);
    com.sqlmagic.tinysql.Utils.delFile(var48, var50);
    java.lang.Integer var53 = new java.lang.Integer(1);
    int var54 = com.sqlmagic.tinysql.UtilString.intValue(var50, (int)var53);
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    boolean var61 = var55.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var62 = var39.getConnection(var45, var50, (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var63 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var62);
    int var64 = var63.getMaxColumnsInIndex();
    boolean var65 = var63.supportsSchemasInPrivilegeDefinitions();
    boolean var66 = var63.supportsANSI92FullSQL();
    boolean var67 = var63.supportsOpenStatementsAcrossRollback();
    boolean var68 = var63.supportsCorrelatedSubqueries();
    boolean var69 = var63.nullsAreSortedLow();
    java.lang.String var70 = var63.getURL();
    java.lang.String[] var71 = new java.lang.String[] { var70};
    int var72 = var26.executeUpdate(var38, var71);
    java.lang.String var73 = "";
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var73);
    java.lang.Integer var75 = new java.lang.Integer(10);
    java.lang.Integer var76 = new java.lang.Integer((-1));
    int[] var77 = new int[] { var75, var76};
    boolean var78 = var26.execute(var73, var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var79 = var1.sqlexec(var26);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test475() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    var20.clearWarnings();
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var28 = "hi!";
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType(var28);
    java.lang.String var30 = com.sqlmagic.tinysql.UtilString.toYMD(var28);
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var30);
    boolean var32 = var27.acceptsURL(var30);
    int var33 = var27.getMinorVersion();
    java.lang.String var34 = "";
    java.lang.String var35 = "";
    java.lang.Character var36 = new java.lang.Character('#');
    java.lang.Boolean var37 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var38 = new com.sqlmagic.tinysql.FieldTokenizer(var35, var36, var37);
    java.lang.String var39 = var38.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var41 = "hi!";
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType(var41);
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD(var41);
    boolean var44 = com.sqlmagic.tinysql.UtilString.isInteger(var43);
    boolean var45 = var40.acceptsURL(var43);
    boolean var46 = var40.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var47 = var27.getConnection(var34, var39, (java.sql.Driver)var40);
    var47.close();
    java.lang.String var49 = "hi!";
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType(var49);
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction(var49);
    var47.setCatalog(var49);
    java.sql.DatabaseMetaData var53 = var47.getMetaData();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    com.sqlmagic.tinysql.tinySQLStatement var55 = new com.sqlmagic.tinysql.tinySQLStatement(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var56 = var20.executetinySQL(var55);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test476() throws Throwable {

    java.lang.String var0 = "TEST (shortcol char(12))";
    java.lang.Character var1 = new java.lang.Character(',');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test477() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    int var8 = var2.getMinorVersion();
    java.lang.String var9 = "";
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    java.lang.String var14 = var13.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    boolean var21 = var15.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var22 = var2.getConnection(var9, var14, (java.sql.Driver)var15);
    com.sqlmagic.tinysql.dbfFileConnection var23 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    java.sql.DatabaseMetaData var24 = var23.getMetaData();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var26 = "hi!";
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType(var26);
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.toYMD(var26);
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger(var28);
    boolean var30 = var25.acceptsURL(var28);
    int var31 = var25.getMinorVersion();
    java.lang.String var32 = "";
    java.lang.String var33 = "";
    java.lang.Character var34 = new java.lang.Character('#');
    java.lang.Boolean var35 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var36 = new com.sqlmagic.tinysql.FieldTokenizer(var33, var34, var35);
    java.lang.String var37 = var36.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var39 = "hi!";
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType(var39);
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.toYMD(var39);
    boolean var42 = com.sqlmagic.tinysql.UtilString.isInteger(var41);
    boolean var43 = var38.acceptsURL(var41);
    boolean var44 = var38.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var45 = var25.getConnection(var32, var37, (java.sql.Driver)var38);
    var45.close();
    var45.close();
    java.sql.DatabaseMetaData var48 = var45.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var49 = new com.sqlmagic.tinysql.tinySQLStatement(var45);
    java.lang.Integer var50 = new java.lang.Integer((-1));
    var49.setQueryTimeout((int)var50);
    java.sql.ResultSet var52 = var49.getGeneratedKeys();
    var49.cancel();
    int var54 = var49.getFetchSize();
    java.lang.Byte var55 = new java.lang.Byte((byte)1);
    java.lang.Byte var56 = new java.lang.Byte((byte)1);
    java.lang.Byte var57 = new java.lang.Byte((byte)(-1));
    byte[] var58 = new byte[] { var55, var56, var57};
    int var59 = com.sqlmagic.tinysql.Utils.vax_to_short(var58);
    var49.setQueryTimeout((int)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var61 = var23.executetinySQL(var49);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4096);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 257);

  }

  public void test478() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.lang.Integer var54 = new java.lang.Integer(0);
    var27.setFetchSize((int)var54);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var56 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var27);
    int var57 = var56.getColumnCount();
    java.lang.Integer var58 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var59 = var56.getColumnName((int)var58);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test479() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    int var25 = var24.getMaxColumnsInIndex();
    boolean var26 = var24.supportsSchemasInPrivilegeDefinitions();
    boolean var27 = var24.supportsANSI92FullSQL();
    boolean var28 = var24.supportsNamedParameters();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    com.sqlmagic.tinysql.Utils.delFile(var29, var31);
    java.lang.Integer var34 = new java.lang.Integer(1);
    int var35 = com.sqlmagic.tinysql.UtilString.intValue(var31, (int)var34);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var35);
    boolean var37 = var24.othersInsertsAreVisible((int)var35);
    boolean var38 = var24.supportsTableCorrelationNames();
    java.lang.String var39 = var24.getNumericFunctions();
    boolean var40 = var24.supportsGroupByBeyondSelect();
    java.sql.Connection var41 = var24.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var42 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var41);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test480() throws Throwable {

    java.lang.String var0 = "TABLE_SCHEM";
    java.lang.Character var1 = new java.lang.Character('(');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test481() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    boolean var8 = var3.hasMoreTags();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var9 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var3);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test482() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    java.lang.Integer var21 = new java.lang.Integer(10);
    boolean var22 = com.sqlmagic.tinysql.Utils.isNumberColumn((int)var21);
    var20.setTransactionIsolation((int)var21);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var24 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var25 = var24.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test483() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileConnection var3 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var4 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var3);
    java.sql.Connection var5 = var4.getConnection();

  }

  public void test484() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    java.lang.String var8 = "hi!";
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType(var8);
    java.lang.String var10 = com.sqlmagic.tinysql.UtilString.toYMD(var8);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    java.lang.String var13 = "hi!";
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType(var13);
    com.sqlmagic.tinysql.Utils.delFile(var11, var13);
    java.lang.Integer var16 = new java.lang.Integer(1);
    int var17 = com.sqlmagic.tinysql.UtilString.intValue(var13, (int)var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var19 = "hi!";
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType(var19);
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.toYMD(var19);
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger(var21);
    boolean var23 = var18.acceptsURL(var21);
    boolean var24 = var18.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var25 = var2.getConnection(var8, var13, (java.sql.Driver)var18);
    int var26 = var18.getMajorVersion();
    com.sqlmagic.tinysql.dbfFileConnection var27 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var18);
    java.sql.DatabaseMetaData var28 = var27.getMetaData();
    com.sqlmagic.tinysql.tinySQL var29 = var27.get_tinySQL();
    java.sql.DatabaseMetaData var30 = var27.getMetaData();
    java.sql.DatabaseMetaData var31 = var27.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test485() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    var23.disableAutoClose();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var25 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var23);
    java.lang.String var26 = var23.getCatalog();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var30 = "hi!";
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType(var30);
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD(var30);
    boolean var33 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    boolean var34 = var29.acceptsURL(var32);
    int var35 = var29.getMinorVersion();
    java.lang.String var36 = "";
    java.lang.String var37 = "";
    java.lang.Character var38 = new java.lang.Character('#');
    java.lang.Boolean var39 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var40 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var38, var39);
    java.lang.String var41 = var40.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var43 = "hi!";
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType(var43);
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD(var43);
    boolean var46 = com.sqlmagic.tinysql.UtilString.isInteger(var45);
    boolean var47 = var42.acceptsURL(var45);
    boolean var48 = var42.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var49 = var29.getConnection(var36, var41, (java.sql.Driver)var42);
    var49.close();
    var49.close();
    java.sql.DatabaseMetaData var52 = var49.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var53 = new com.sqlmagic.tinysql.tinySQLStatement(var49);
    java.lang.Integer var54 = new java.lang.Integer((-1));
    var53.setQueryTimeout((int)var54);
    java.sql.ResultSet var56 = var53.getGeneratedKeys();
    boolean var57 = var53.getMoreResults();
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var59 = "hi!";
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType(var59);
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD(var59);
    boolean var62 = com.sqlmagic.tinysql.UtilString.isInteger(var61);
    boolean var63 = var58.acceptsURL(var61);
    java.lang.String var64 = "hi!";
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.toYMD(var64);
    java.lang.String var67 = "hi!";
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    com.sqlmagic.tinysql.Utils.delFile(var67, var69);
    java.lang.Integer var72 = new java.lang.Integer(1);
    int var73 = com.sqlmagic.tinysql.UtilString.intValue(var69, (int)var72);
    com.sqlmagic.tinysql.dbfFileDriver var74 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var75 = "hi!";
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType(var75);
    java.lang.String var77 = com.sqlmagic.tinysql.UtilString.toYMD(var75);
    boolean var78 = com.sqlmagic.tinysql.UtilString.isInteger(var77);
    boolean var79 = var74.acceptsURL(var77);
    boolean var80 = var74.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var81 = var58.getConnection(var64, var69, (java.sql.Driver)var74);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var82 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var81);
    int var83 = var82.getMaxColumnsInIndex();
    boolean var84 = var82.supportsSchemasInPrivilegeDefinitions();
    boolean var85 = var82.supportsANSI92FullSQL();
    boolean var86 = var82.supportsSubqueriesInIns();
    java.lang.String var87 = var82.getDatabaseProductVersion();
    java.lang.Integer var88 = new java.lang.Integer(1);
    java.lang.Integer var89 = new java.lang.Integer(100);
    int[] var90 = new int[] { var88, var89};
    int var91 = var53.executeUpdate(var87, var90);
    com.sqlmagic.tinysql.tinySQLException var92 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var93 = var92.getSQLState();
    com.sqlmagic.tinysql.tinySQLException var94 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var95 = var94.getSQLState();
    var92.setNextException((java.sql.SQLException)var94);
    int var97 = var92.getErrorCode();
    var53.setMaxRows((int)var97);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var99 = var23.executetinySQL(var53);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "2.26h"+ "'", var87.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);

  }

  public void test486() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var29 = "hi!";
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType(var29);
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.toYMD(var29);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isInteger(var31);
    boolean var33 = var28.acceptsURL(var31);
    int var34 = var28.getMinorVersion();
    java.lang.String var35 = "";
    java.lang.String var36 = "";
    java.lang.Character var37 = new java.lang.Character('#');
    java.lang.Boolean var38 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var39 = new com.sqlmagic.tinysql.FieldTokenizer(var36, var37, var38);
    java.lang.String var40 = var39.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var42 = "hi!";
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType(var42);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.toYMD(var42);
    boolean var45 = com.sqlmagic.tinysql.UtilString.isInteger(var44);
    boolean var46 = var41.acceptsURL(var44);
    boolean var47 = var41.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var48 = var28.getConnection(var35, var40, (java.sql.Driver)var41);
    var48.close();
    var48.close();
    java.sql.DatabaseMetaData var51 = var48.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement(var48);
    com.sqlmagic.tinysql.tinySQLResultSet var53 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var52);
    java.lang.Integer var54 = new java.lang.Integer(0);
    var27.setFetchSize((int)var54);
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var57 = "hi!";
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var57);
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.toYMD(var57);
    boolean var60 = com.sqlmagic.tinysql.UtilString.isInteger(var59);
    boolean var61 = var56.acceptsURL(var59);
    int var62 = var56.getMinorVersion();
    java.lang.String var63 = "";
    java.lang.String var64 = "";
    java.lang.Character var65 = new java.lang.Character('#');
    java.lang.Boolean var66 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var67 = new com.sqlmagic.tinysql.FieldTokenizer(var64, var65, var66);
    java.lang.String var68 = var67.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var70 = "hi!";
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType(var70);
    java.lang.String var72 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    boolean var73 = com.sqlmagic.tinysql.UtilString.isInteger(var72);
    boolean var74 = var69.acceptsURL(var72);
    boolean var75 = var69.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var76 = var56.getConnection(var63, var68, (java.sql.Driver)var69);
    var76.close();
    var76.close();
    java.sql.DatabaseMetaData var79 = var76.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var80 = new com.sqlmagic.tinysql.tinySQLStatement(var76);
    int var81 = var80.getMaxFieldSize();
    boolean var82 = var80.isClosed();
    int var83 = var80.getMaxRows();
    com.sqlmagic.tinysql.tinySQLResultSet var84 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var80);
    java.sql.ResultSetMetaData var85 = var84.getMetaData();
    java.sql.ResultSetMetaData var86 = var84.getMetaData();
    boolean var87 = var84.next();
    java.lang.Integer var88 = new java.lang.Integer(1);
    java.lang.String var89 = var84.getString((int)var88);
    boolean var90 = var84.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test487() throws Throwable {

    java.lang.String var0 = "";
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var2 = "hi!";
    int var3 = com.sqlmagic.tinysql.UtilString.getValueType(var2);
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.toYMD(var2);
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    boolean var6 = var1.acceptsURL(var4);
    java.lang.String var7 = "hi!";
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType(var7);
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.toYMD(var7);
    java.lang.String var10 = "hi!";
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType(var10);
    java.lang.String var12 = "hi!";
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType(var12);
    com.sqlmagic.tinysql.Utils.delFile(var10, var12);
    java.lang.Integer var15 = new java.lang.Integer(1);
    int var16 = com.sqlmagic.tinysql.UtilString.intValue(var12, (int)var15);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var18 = "hi!";
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType(var18);
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD(var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger(var20);
    boolean var22 = var17.acceptsURL(var20);
    boolean var23 = var17.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var24 = var1.getConnection(var7, var12, (java.sql.Driver)var17);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var25 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var24);
    int var26 = var25.getMaxColumnsInIndex();
    boolean var27 = var25.supportsSchemasInPrivilegeDefinitions();
    boolean var28 = var25.supportsANSI92FullSQL();
    boolean var29 = var25.supportsOpenStatementsAcrossRollback();
    boolean var30 = var25.supportsCorrelatedSubqueries();
    boolean var31 = var25.nullsAreSortedLow();
    java.lang.String var32 = var25.getURL();
    int var33 = var25.getMaxConnections();
    int var34 = var25.getDriverMinorVersion();
    int var35 = var25.getDriverMajorVersion();
    java.lang.String var36 = var25.getSystemFunctions();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var38 = "hi!";
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType(var38);
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.toYMD(var38);
    boolean var41 = com.sqlmagic.tinysql.UtilString.isInteger(var40);
    boolean var42 = var37.acceptsURL(var40);
    int var43 = var37.getMinorVersion();
    java.lang.String var44 = "";
    java.lang.String var45 = "";
    java.lang.Character var46 = new java.lang.Character('#');
    java.lang.Boolean var47 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var45, var46, var47);
    java.lang.String var49 = var48.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.toYMD(var51);
    boolean var54 = com.sqlmagic.tinysql.UtilString.isInteger(var53);
    boolean var55 = var50.acceptsURL(var53);
    boolean var56 = var50.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var57 = var37.getConnection(var44, var49, (java.sql.Driver)var50);
    com.sqlmagic.tinysql.dbfFileConnection var58 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var36, (java.sql.Driver)var37);
    com.sqlmagic.tinysql.tinySQL var59 = var58.get_tinySQL();
    java.sql.DatabaseMetaData var60 = var58.getMetaData();
    java.sql.DatabaseMetaData var61 = var58.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test488() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.lang.Integer var26 = new java.lang.Integer(0);
    var20.setTransactionIsolation((int)var26);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var28 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var29 = var28.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test489() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.sql.DatabaseMetaData var26 = var20.getMetaData();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var20);
    boolean var28 = var20.getAutoClose();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var29 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var30 = var29.getConnection();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var31 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData(var30);
    java.sql.Connection var32 = var31.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test490() throws Throwable {

    java.lang.String var0 = ".";
    com.sqlmagic.tinysql.dbfFile var1 = new com.sqlmagic.tinysql.dbfFile(var0);
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var3 = "hi!";
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType(var3);
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var3);
    boolean var6 = com.sqlmagic.tinysql.UtilString.isInteger(var5);
    boolean var7 = var2.acceptsURL(var5);
    int var8 = var2.getMinorVersion();
    java.lang.String var9 = "";
    java.lang.String var10 = "";
    java.lang.Character var11 = new java.lang.Character('#');
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var13 = new com.sqlmagic.tinysql.FieldTokenizer(var10, var11, var12);
    java.lang.String var14 = var13.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var16 = "hi!";
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType(var16);
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD(var16);
    boolean var19 = com.sqlmagic.tinysql.UtilString.isInteger(var18);
    boolean var20 = var15.acceptsURL(var18);
    boolean var21 = var15.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var22 = var2.getConnection(var9, var14, (java.sql.Driver)var15);
    var22.close();
    var22.close();
    java.sql.DatabaseMetaData var25 = var22.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var26 = new com.sqlmagic.tinysql.tinySQLStatement(var22);
    java.lang.String var27 = "";
    java.lang.Character var28 = new java.lang.Character('#');
    java.lang.Boolean var29 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var30 = new com.sqlmagic.tinysql.FieldTokenizer(var27, var28, var29);
    java.lang.String var31 = var30.nextField();
    java.lang.String[] var32 = var30.getFields();
    java.lang.String var33 = "hi!";
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType(var33);
    java.lang.String var35 = "hi!";
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType(var35);
    com.sqlmagic.tinysql.Utils.delFile(var33, var35);
    java.lang.Integer var38 = new java.lang.Integer(1);
    int var39 = com.sqlmagic.tinysql.UtilString.intValue(var35, (int)var38);
    java.lang.String var40 = "";
    java.lang.Character var41 = new java.lang.Character('#');
    java.lang.Boolean var42 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var43 = new com.sqlmagic.tinysql.FieldTokenizer(var40, var41, var42);
    java.lang.String[] var44 = var43.getFields();
    int var45 = var43.countFields();
    int var46 = var30.getInt((int)var39, (int)var45);
    var26.setMaxFieldSize((int)var45);
    java.sql.SQLWarning var48 = var26.getWarnings();
    var26.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var50 = var1.sqlexec(var26);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);

  }

  public void test491() throws Throwable {

    java.lang.String var0 = "insert into TEST (shortcol) values ('hell world')";
    java.lang.Character var1 = new java.lang.Character(' ');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test492() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileConnection var3 = new com.sqlmagic.tinysql.dbfFileConnection(var0, var1, (java.sql.Driver)var2);
    java.sql.DatabaseMetaData var4 = var3.getMetaData();
    java.sql.DatabaseMetaData var5 = var3.getMetaData();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var6 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var3);
    java.sql.Connection var7 = var6.getConnection();

  }

  public void test493() throws Throwable {

    java.lang.String var0 = "";
    java.lang.Character var1 = new java.lang.Character('#');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);
    java.lang.String var4 = "hi!";
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType(var4);
    java.lang.String var6 = var3.getField((int)var5);
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile(var6);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = com.sqlmagic.tinysql.UtilString.toYMD(var9);
    boolean var12 = com.sqlmagic.tinysql.UtilString.isInteger(var11);
    boolean var13 = var8.acceptsURL(var11);
    int var14 = var8.getMinorVersion();
    java.lang.String var15 = "";
    java.lang.String var16 = "";
    java.lang.Character var17 = new java.lang.Character('#');
    java.lang.Boolean var18 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var19 = new com.sqlmagic.tinysql.FieldTokenizer(var16, var17, var18);
    java.lang.String var20 = var19.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD(var22);
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    boolean var26 = var21.acceptsURL(var24);
    boolean var27 = var21.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var28 = var8.getConnection(var15, var20, (java.sql.Driver)var21);
    var28.close();
    var28.close();
    java.sql.DatabaseMetaData var31 = var28.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var32 = new com.sqlmagic.tinysql.tinySQLStatement(var28);
    java.lang.Integer var33 = new java.lang.Integer((-1));
    var32.setQueryTimeout((int)var33);
    java.lang.String var35 = "hi!";
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    boolean var40 = com.sqlmagic.tinysql.UtilString.isInteger(var39);
    boolean var41 = var36.acceptsURL(var39);
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction(var39);
    com.sqlmagic.tinysql.Utils.delFile(var35, var39);
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.removeQuotes(var35);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var46 = "hi!";
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType(var46);
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toYMD(var46);
    boolean var49 = com.sqlmagic.tinysql.UtilString.isInteger(var48);
    boolean var50 = var45.acceptsURL(var48);
    java.lang.String var51 = "hi!";
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType(var51);
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.toYMD(var51);
    java.lang.String var54 = "hi!";
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType(var54);
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    com.sqlmagic.tinysql.Utils.delFile(var54, var56);
    java.lang.Integer var59 = new java.lang.Integer(1);
    int var60 = com.sqlmagic.tinysql.UtilString.intValue(var56, (int)var59);
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var62 = "hi!";
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD(var62);
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger(var64);
    boolean var66 = var61.acceptsURL(var64);
    boolean var67 = var61.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var68 = var45.getConnection(var51, var56, (java.sql.Driver)var61);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var69 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var68);
    int var70 = var69.getMaxColumnsInIndex();
    boolean var71 = var69.supportsSchemasInPrivilegeDefinitions();
    boolean var72 = var69.supportsANSI92FullSQL();
    boolean var73 = var69.supportsOpenStatementsAcrossRollback();
    boolean var74 = var69.supportsCorrelatedSubqueries();
    boolean var75 = var69.nullsAreSortedLow();
    java.lang.String var76 = var69.getURL();
    java.lang.String[] var77 = new java.lang.String[] { var76};
    int var78 = var32.executeUpdate(var44, var77);
    int var79 = var32.getQueryTimeout();
    java.sql.SQLWarning var80 = var32.getWarnings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var81 = var7.sqlexec(var32);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NULL"+ "'", var6.equals("NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test494() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    boolean var21 = var20.getAutoClose();
    java.lang.String var22 = var20.getCatalog();
    com.sqlmagic.tinysql.tinySQLException var23 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var24 = new com.sqlmagic.tinysql.tinySQLException();
    var23.setNextException((java.sql.SQLException)var24);
    java.lang.String var26 = var24.toString();
    java.lang.String var27 = "hi!";
    boolean var28 = com.sqlmagic.tinysql.UtilString.isInteger(var27);
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag(var27);
    java.lang.String var30 = "hi!";
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var30);
    com.sqlmagic.tinysql.SimpleXMLTag var32 = new com.sqlmagic.tinysql.SimpleXMLTag(var30);
    var29.putAll((java.util.Map)var32);
    int var34 = var32.size();
    boolean var35 = var32.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var36 = new com.sqlmagic.tinysql.tinySQLWhere(var26, (java.util.Hashtable)var32);
    java.lang.String var37 = "hi!";
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    java.lang.String var39 = com.sqlmagic.tinysql.UtilString.toYMD(var37);
    java.lang.String var40 = "";
    java.lang.Character var41 = new java.lang.Character('#');
    java.lang.Boolean var42 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var43 = new com.sqlmagic.tinysql.FieldTokenizer(var40, var41, var42);
    java.lang.String var44 = "hi!";
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType(var44);
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD(var44);
    boolean var47 = com.sqlmagic.tinysql.UtilString.isInteger(var46);
    com.sqlmagic.tinysql.FieldTokenizer var48 = new com.sqlmagic.tinysql.FieldTokenizer(var37, var41, var47);
    com.sqlmagic.tinysql.dbfFile var49 = new com.sqlmagic.tinysql.dbfFile(var37);
    com.sqlmagic.tinysql.tsResultSet var50 = new com.sqlmagic.tinysql.tsResultSet(var36, (com.sqlmagic.tinysql.tinySQL)var49);
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var51 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var50);
    int var52 = var50.getColumnCount();
    int var53 = var50.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var54 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var50);
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var56 = "hi!";
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType(var56);
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isInteger(var58);
    boolean var60 = var55.acceptsURL(var58);
    int var61 = var55.getMinorVersion();
    java.lang.String var62 = "";
    java.lang.String var63 = "";
    java.lang.Character var64 = new java.lang.Character('#');
    java.lang.Boolean var65 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var66 = new com.sqlmagic.tinysql.FieldTokenizer(var63, var64, var65);
    java.lang.String var67 = var66.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var68 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var69 = "hi!";
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType(var69);
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var69);
    boolean var72 = com.sqlmagic.tinysql.UtilString.isInteger(var71);
    boolean var73 = var68.acceptsURL(var71);
    boolean var74 = var68.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var75 = var55.getConnection(var62, var67, (java.sql.Driver)var68);
    var75.close();
    var75.close();
    java.sql.DatabaseMetaData var78 = var75.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var79 = new com.sqlmagic.tinysql.tinySQLStatement(var75);
    java.lang.Integer var80 = new java.lang.Integer((-1));
    var79.setQueryTimeout((int)var80);
    java.sql.ResultSet var82 = var79.getGeneratedKeys();
    boolean var83 = var79.getMoreResults();
    com.sqlmagic.tinysql.tinySQLResultSet var84 = new com.sqlmagic.tinysql.tinySQLResultSet(var50, var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var85 = var20.executetinySQL(var79);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var26.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test495() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    java.lang.String var9 = "hi!";
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType(var9);
    java.lang.String var11 = "hi!";
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType(var11);
    com.sqlmagic.tinysql.Utils.delFile(var9, var11);
    java.lang.Integer var14 = new java.lang.Integer(1);
    int var15 = com.sqlmagic.tinysql.UtilString.intValue(var11, (int)var14);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var17 = "hi!";
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType(var17);
    java.lang.String var19 = com.sqlmagic.tinysql.UtilString.toYMD(var17);
    boolean var20 = com.sqlmagic.tinysql.UtilString.isInteger(var19);
    boolean var21 = var16.acceptsURL(var19);
    boolean var22 = var16.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var23 = var0.getConnection(var6, var11, (java.sql.Driver)var16);
    java.lang.String var24 = "hi!";
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger(var24);
    com.sqlmagic.tinysql.SimpleXMLTag var26 = new com.sqlmagic.tinysql.SimpleXMLTag(var24);
    var26.clear();
    com.sqlmagic.tinysql.tinySQLWhere var28 = new com.sqlmagic.tinysql.tinySQLWhere(var11, (java.util.Hashtable)var26);
    com.sqlmagic.tinysql.textFile var29 = new com.sqlmagic.tinysql.textFile();
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet(var28, (com.sqlmagic.tinysql.tinySQL)var29);
    java.lang.Integer var31 = new java.lang.Integer(4096);
    var30.setFetchSize((int)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test496() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    java.lang.String var7 = "hi!";
    boolean var8 = com.sqlmagic.tinysql.UtilString.isInteger(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var9 = new com.sqlmagic.tinysql.SimpleXMLTag(var7);
    var6.putAll((java.util.Map)var9);
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var13 = new com.sqlmagic.tinysql.tinySQLWhere(var3, (java.util.Hashtable)var9);
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    java.lang.String var17 = "";
    java.lang.Character var18 = new java.lang.Character('#');
    java.lang.Boolean var19 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var20 = new com.sqlmagic.tinysql.FieldTokenizer(var17, var18, var19);
    java.lang.String var21 = "hi!";
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType(var21);
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.toYMD(var21);
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    com.sqlmagic.tinysql.FieldTokenizer var25 = new com.sqlmagic.tinysql.FieldTokenizer(var14, var18, var24);
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile(var14);
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var13, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.isGrouped();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var31 = "hi!";
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.toYMD(var31);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var33);
    boolean var35 = var30.acceptsURL(var33);
    int var36 = var30.getMinorVersion();
    java.lang.String var37 = "";
    java.lang.String var38 = "";
    java.lang.Character var39 = new java.lang.Character('#');
    java.lang.Boolean var40 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var41 = new com.sqlmagic.tinysql.FieldTokenizer(var38, var39, var40);
    java.lang.String var42 = var41.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var44 = "hi!";
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType(var44);
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD(var44);
    boolean var47 = com.sqlmagic.tinysql.UtilString.isInteger(var46);
    boolean var48 = var43.acceptsURL(var46);
    boolean var49 = var43.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var50 = var30.getConnection(var37, var42, (java.sql.Driver)var43);
    var50.close();
    var50.close();
    java.sql.DatabaseMetaData var53 = var50.getMetaData();
    com.sqlmagic.tinysql.tinySQLStatement var54 = new com.sqlmagic.tinysql.tinySQLStatement(var50);
    java.lang.Integer var55 = new java.lang.Integer((-1));
    var54.setQueryTimeout((int)var55);
    java.sql.ResultSet var57 = var54.getGeneratedKeys();
    java.lang.String var58 = "hi!";
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType(var58);
    boolean var60 = com.sqlmagic.tinysql.Utils.clearFunction(var58);
    java.lang.Double var61 = new java.lang.Double(100.0d);
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue(var58, (double)var61);
    java.lang.Integer var63 = new java.lang.Integer((-1));
    int[] var64 = new int[] { var63};
    int var65 = var54.executeUpdate(var58, var64);
    java.sql.ResultSet var66 = var54.getResultSet();
    com.sqlmagic.tinysql.tinySQLResultSet var67 = new com.sqlmagic.tinysql.tinySQLResultSet(var27, var54);
    boolean var68 = var67.next();
    java.lang.String var69 = "TABLE_NAME";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var70 = var67.getString(var69);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var28.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test497() throws Throwable {

    java.lang.String var0 = "update TEST set shortcol = 'sai' where TRIM(shortcol)='hell world'";
    java.lang.Character var1 = new java.lang.Character(' ');
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var3 = new com.sqlmagic.tinysql.FieldTokenizer(var0, var1, var2);

  }

  public void test498() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "jdbc:dbfFile:.";
    boolean var2 = var0.acceptsURL(var1);
    java.lang.String var3 = "";
    java.lang.String var4 = "jdbc:dbfFile:.";
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var6 = "hi!";
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType(var6);
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.toYMD(var6);
    boolean var9 = com.sqlmagic.tinysql.UtilString.isInteger(var8);
    boolean var10 = var5.acceptsURL(var8);
    boolean var11 = var5.jdbcCompliant();
    int var12 = var5.getMajorVersion();
    boolean var13 = var5.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var14 = var0.getConnection(var3, var4, (java.sql.Driver)var5);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var15 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var14);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var16 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var14);
    java.sql.Connection var17 = var16.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test499() throws Throwable {

    java.lang.String var0 = "TRIM(shortcol)='hell world'";
    java.lang.String var1 = "hi!";
    boolean var2 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    com.sqlmagic.tinysql.SimpleXMLTag var3 = new com.sqlmagic.tinysql.SimpleXMLTag(var1);
    java.lang.String var4 = "hi!";
    boolean var5 = com.sqlmagic.tinysql.UtilString.isInteger(var4);
    com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
    var3.putAll((java.util.Map)var6);
    java.lang.Character var8 = new java.lang.Character('a');
    java.lang.Object var9 = var6.remove((java.lang.Object)var8);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLWhere var10 = new com.sqlmagic.tinysql.tinySQLWhere(var0, (java.util.Hashtable)var6);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test500() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var1 = "hi!";
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType(var1);
    java.lang.String var3 = com.sqlmagic.tinysql.UtilString.toYMD(var1);
    boolean var4 = com.sqlmagic.tinysql.UtilString.isInteger(var3);
    boolean var5 = var0.acceptsURL(var3);
    int var6 = var0.getMinorVersion();
    java.lang.String var7 = "";
    java.lang.String var8 = "";
    java.lang.Character var9 = new java.lang.Character('#');
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    com.sqlmagic.tinysql.FieldTokenizer var11 = new com.sqlmagic.tinysql.FieldTokenizer(var8, var9, var10);
    java.lang.String var12 = var11.nextField();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    java.lang.String var14 = "hi!";
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType(var14);
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.toYMD(var14);
    boolean var17 = com.sqlmagic.tinysql.UtilString.isInteger(var16);
    boolean var18 = var13.acceptsURL(var16);
    boolean var19 = var13.jdbcCompliant();
    com.sqlmagic.tinysql.tinySQLConnection var20 = var0.getConnection(var7, var12, (java.sql.Driver)var13);
    var20.close();
    java.lang.String var22 = "hi!";
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType(var22);
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var22);
    var20.setCatalog(var22);
    java.lang.Integer var26 = new java.lang.Integer(0);
    var20.setTransactionIsolation((int)var26);
    int var28 = var20.getTransactionIsolation();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var29 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var20);
    java.sql.Connection var30 = var29.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

}
